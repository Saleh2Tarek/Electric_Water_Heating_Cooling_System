
Electric_Water_HeaterSystem_v3_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000023c  00800060  00002780  00002814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007d  0080029c  0080029c  00002a50  2**0
                  ALLOC
  3 .stab         00005d48  00000000  00000000  00002a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000368f  00000000  00000000  00008798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  0000be27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000e7  00000000  00000000  0000bee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d85  00000000  00000000  0000bfce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000082e  00000000  00000000  0000cd53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000733  00000000  00000000  0000d581  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  0000dcb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000220  00000000  00000000  0000dd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000356  00000000  00000000  0000df94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__vector_1>
       8:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__vector_2>
       c:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__vector_3>
      10:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_4>
      14:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__vector_7>
      20:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_8>
      24:	0c 94 93 04 	jmp	0x926	; 0x926 <__vector_9>
      28:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__vector_10>
      2c:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 31       	cpi	r26, 0x19	; 25
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <main>
      8a:	0c 94 be 13 	jmp	0x277c	; 0x277c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__eqsf2>:
      92:	a8 e1       	ldi	r26, 0x18	; 24
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__+0x18>
      9e:	69 83       	std	Y+1, r22	; 0x01
      a0:	7a 83       	std	Y+2, r23	; 0x02
      a2:	8b 83       	std	Y+3, r24	; 0x03
      a4:	9c 83       	std	Y+4, r25	; 0x04
      a6:	2d 83       	std	Y+5, r18	; 0x05
      a8:	3e 83       	std	Y+6, r19	; 0x06
      aa:	4f 83       	std	Y+7, r20	; 0x07
      ac:	58 87       	std	Y+8, r21	; 0x08
      ae:	89 e0       	ldi	r24, 0x09	; 9
      b0:	e8 2e       	mov	r14, r24
      b2:	f1 2c       	mov	r15, r1
      b4:	ec 0e       	add	r14, r28
      b6:	fd 1e       	adc	r15, r29
      b8:	ce 01       	movw	r24, r28
      ba:	01 96       	adiw	r24, 0x01	; 1
      bc:	b7 01       	movw	r22, r14
      be:	0e 94 16 02 	call	0x42c	; 0x42c <__unpack_f>
      c2:	8e 01       	movw	r16, r28
      c4:	0f 5e       	subi	r16, 0xEF	; 239
      c6:	1f 4f       	sbci	r17, 0xFF	; 255
      c8:	ce 01       	movw	r24, r28
      ca:	05 96       	adiw	r24, 0x05	; 5
      cc:	b8 01       	movw	r22, r16
      ce:	0e 94 16 02 	call	0x42c	; 0x42c <__unpack_f>
      d2:	89 85       	ldd	r24, Y+9	; 0x09
      d4:	82 30       	cpi	r24, 0x02	; 2
      d6:	40 f0       	brcs	.+16     	; 0xe8 <__eqsf2+0x56>
      d8:	89 89       	ldd	r24, Y+17	; 0x11
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	28 f0       	brcs	.+10     	; 0xe8 <__eqsf2+0x56>
      de:	c7 01       	movw	r24, r14
      e0:	b8 01       	movw	r22, r16
      e2:	0e 94 8e 02 	call	0x51c	; 0x51c <__fpcmp_parts_f>
      e6:	01 c0       	rjmp	.+2      	; 0xea <__eqsf2+0x58>
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	68 96       	adiw	r28, 0x18	; 24
      ec:	e6 e0       	ldi	r30, 0x06	; 6
      ee:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__+0x18>

000000f2 <__floatunsisf>:
      f2:	a8 e0       	ldi	r26, 0x08	; 8
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	ef e7       	ldi	r30, 0x7F	; 127
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__prologue_saves__+0x10>
      fe:	7b 01       	movw	r14, r22
     100:	8c 01       	movw	r16, r24
     102:	61 15       	cp	r22, r1
     104:	71 05       	cpc	r23, r1
     106:	81 05       	cpc	r24, r1
     108:	91 05       	cpc	r25, r1
     10a:	19 f4       	brne	.+6      	; 0x112 <__floatunsisf+0x20>
     10c:	82 e0       	ldi	r24, 0x02	; 2
     10e:	89 83       	std	Y+1, r24	; 0x01
     110:	60 c0       	rjmp	.+192    	; 0x1d2 <__floatunsisf+0xe0>
     112:	83 e0       	ldi	r24, 0x03	; 3
     114:	89 83       	std	Y+1, r24	; 0x01
     116:	8e e1       	ldi	r24, 0x1E	; 30
     118:	c8 2e       	mov	r12, r24
     11a:	d1 2c       	mov	r13, r1
     11c:	dc 82       	std	Y+4, r13	; 0x04
     11e:	cb 82       	std	Y+3, r12	; 0x03
     120:	ed 82       	std	Y+5, r14	; 0x05
     122:	fe 82       	std	Y+6, r15	; 0x06
     124:	0f 83       	std	Y+7, r16	; 0x07
     126:	18 87       	std	Y+8, r17	; 0x08
     128:	c8 01       	movw	r24, r16
     12a:	b7 01       	movw	r22, r14
     12c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__clzsi2>
     130:	fc 01       	movw	r30, r24
     132:	31 97       	sbiw	r30, 0x01	; 1
     134:	f7 ff       	sbrs	r31, 7
     136:	3b c0       	rjmp	.+118    	; 0x1ae <__floatunsisf+0xbc>
     138:	22 27       	eor	r18, r18
     13a:	33 27       	eor	r19, r19
     13c:	2e 1b       	sub	r18, r30
     13e:	3f 0b       	sbc	r19, r31
     140:	57 01       	movw	r10, r14
     142:	68 01       	movw	r12, r16
     144:	02 2e       	mov	r0, r18
     146:	04 c0       	rjmp	.+8      	; 0x150 <__floatunsisf+0x5e>
     148:	d6 94       	lsr	r13
     14a:	c7 94       	ror	r12
     14c:	b7 94       	ror	r11
     14e:	a7 94       	ror	r10
     150:	0a 94       	dec	r0
     152:	d2 f7       	brpl	.-12     	; 0x148 <__floatunsisf+0x56>
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	04 c0       	rjmp	.+8      	; 0x16e <__floatunsisf+0x7c>
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	aa 1f       	adc	r26, r26
     16c:	bb 1f       	adc	r27, r27
     16e:	2a 95       	dec	r18
     170:	d2 f7       	brpl	.-12     	; 0x166 <__floatunsisf+0x74>
     172:	01 97       	sbiw	r24, 0x01	; 1
     174:	a1 09       	sbc	r26, r1
     176:	b1 09       	sbc	r27, r1
     178:	8e 21       	and	r24, r14
     17a:	9f 21       	and	r25, r15
     17c:	a0 23       	and	r26, r16
     17e:	b1 23       	and	r27, r17
     180:	00 97       	sbiw	r24, 0x00	; 0
     182:	a1 05       	cpc	r26, r1
     184:	b1 05       	cpc	r27, r1
     186:	21 f0       	breq	.+8      	; 0x190 <__floatunsisf+0x9e>
     188:	41 e0       	ldi	r20, 0x01	; 1
     18a:	50 e0       	ldi	r21, 0x00	; 0
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	4a 29       	or	r20, r10
     192:	5b 29       	or	r21, r11
     194:	6c 29       	or	r22, r12
     196:	7d 29       	or	r23, r13
     198:	4d 83       	std	Y+5, r20	; 0x05
     19a:	5e 83       	std	Y+6, r21	; 0x06
     19c:	6f 83       	std	Y+7, r22	; 0x07
     19e:	78 87       	std	Y+8, r23	; 0x08
     1a0:	8e e1       	ldi	r24, 0x1E	; 30
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	8e 1b       	sub	r24, r30
     1a6:	9f 0b       	sbc	r25, r31
     1a8:	9c 83       	std	Y+4, r25	; 0x04
     1aa:	8b 83       	std	Y+3, r24	; 0x03
     1ac:	12 c0       	rjmp	.+36     	; 0x1d2 <__floatunsisf+0xe0>
     1ae:	30 97       	sbiw	r30, 0x00	; 0
     1b0:	81 f0       	breq	.+32     	; 0x1d2 <__floatunsisf+0xe0>
     1b2:	0e 2e       	mov	r0, r30
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <__floatunsisf+0xcc>
     1b6:	ee 0c       	add	r14, r14
     1b8:	ff 1c       	adc	r15, r15
     1ba:	00 1f       	adc	r16, r16
     1bc:	11 1f       	adc	r17, r17
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <__floatunsisf+0xc4>
     1c2:	ed 82       	std	Y+5, r14	; 0x05
     1c4:	fe 82       	std	Y+6, r15	; 0x06
     1c6:	0f 83       	std	Y+7, r16	; 0x07
     1c8:	18 87       	std	Y+8, r17	; 0x08
     1ca:	ce 1a       	sub	r12, r30
     1cc:	df 0a       	sbc	r13, r31
     1ce:	dc 82       	std	Y+4, r13	; 0x04
     1d0:	cb 82       	std	Y+3, r12	; 0x03
     1d2:	1a 82       	std	Y+2, r1	; 0x02
     1d4:	ce 01       	movw	r24, r28
     1d6:	01 96       	adiw	r24, 0x01	; 1
     1d8:	0e 94 41 01 	call	0x282	; 0x282 <__pack_f>
     1dc:	28 96       	adiw	r28, 0x08	; 8
     1de:	ea e0       	ldi	r30, 0x0A	; 10
     1e0:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__epilogue_restores__+0x10>

000001e4 <__clzsi2>:
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	7b 01       	movw	r14, r22
     1ee:	8c 01       	movw	r16, r24
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	e8 16       	cp	r14, r24
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	f8 06       	cpc	r15, r24
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	08 07       	cpc	r16, r24
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	18 07       	cpc	r17, r24
     200:	88 f4       	brcc	.+34     	; 0x224 <__clzsi2+0x40>
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	e8 16       	cp	r14, r24
     206:	f1 04       	cpc	r15, r1
     208:	01 05       	cpc	r16, r1
     20a:	11 05       	cpc	r17, r1
     20c:	31 f0       	breq	.+12     	; 0x21a <__clzsi2+0x36>
     20e:	28 f0       	brcs	.+10     	; 0x21a <__clzsi2+0x36>
     210:	88 e0       	ldi	r24, 0x08	; 8
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	17 c0       	rjmp	.+46     	; 0x248 <__clzsi2+0x64>
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	a0 e0       	ldi	r26, 0x00	; 0
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	12 c0       	rjmp	.+36     	; 0x248 <__clzsi2+0x64>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	e8 16       	cp	r14, r24
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	f8 06       	cpc	r15, r24
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	08 07       	cpc	r16, r24
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	18 07       	cpc	r17, r24
     234:	28 f0       	brcs	.+10     	; 0x240 <__clzsi2+0x5c>
     236:	88 e1       	ldi	r24, 0x18	; 24
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	04 c0       	rjmp	.+8      	; 0x248 <__clzsi2+0x64>
     240:	80 e1       	ldi	r24, 0x10	; 16
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	20 e2       	ldi	r18, 0x20	; 32
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	28 1b       	sub	r18, r24
     252:	39 0b       	sbc	r19, r25
     254:	4a 0b       	sbc	r20, r26
     256:	5b 0b       	sbc	r21, r27
     258:	04 c0       	rjmp	.+8      	; 0x262 <__clzsi2+0x7e>
     25a:	16 95       	lsr	r17
     25c:	07 95       	ror	r16
     25e:	f7 94       	ror	r15
     260:	e7 94       	ror	r14
     262:	8a 95       	dec	r24
     264:	d2 f7       	brpl	.-12     	; 0x25a <__clzsi2+0x76>
     266:	f7 01       	movw	r30, r14
     268:	e9 5a       	subi	r30, 0xA9	; 169
     26a:	fe 4f       	sbci	r31, 0xFE	; 254
     26c:	80 81       	ld	r24, Z
     26e:	28 1b       	sub	r18, r24
     270:	31 09       	sbc	r19, r1
     272:	41 09       	sbc	r20, r1
     274:	51 09       	sbc	r21, r1
     276:	c9 01       	movw	r24, r18
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	08 95       	ret

00000282 <__pack_f>:
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	fc 01       	movw	r30, r24
     28e:	e4 80       	ldd	r14, Z+4	; 0x04
     290:	f5 80       	ldd	r15, Z+5	; 0x05
     292:	06 81       	ldd	r16, Z+6	; 0x06
     294:	17 81       	ldd	r17, Z+7	; 0x07
     296:	d1 80       	ldd	r13, Z+1	; 0x01
     298:	80 81       	ld	r24, Z
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	48 f4       	brcc	.+18     	; 0x2b0 <__pack_f+0x2e>
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	a0 e1       	ldi	r26, 0x10	; 16
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e8 2a       	or	r14, r24
     2a8:	f9 2a       	or	r15, r25
     2aa:	0a 2b       	or	r16, r26
     2ac:	1b 2b       	or	r17, r27
     2ae:	a5 c0       	rjmp	.+330    	; 0x3fa <__pack_f+0x178>
     2b0:	84 30       	cpi	r24, 0x04	; 4
     2b2:	09 f4       	brne	.+2      	; 0x2b6 <__pack_f+0x34>
     2b4:	9f c0       	rjmp	.+318    	; 0x3f4 <__pack_f+0x172>
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	21 f4       	brne	.+8      	; 0x2c2 <__pack_f+0x40>
     2ba:	ee 24       	eor	r14, r14
     2bc:	ff 24       	eor	r15, r15
     2be:	87 01       	movw	r16, r14
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <__pack_f+0x4a>
     2c2:	e1 14       	cp	r14, r1
     2c4:	f1 04       	cpc	r15, r1
     2c6:	01 05       	cpc	r16, r1
     2c8:	11 05       	cpc	r17, r1
     2ca:	19 f4       	brne	.+6      	; 0x2d2 <__pack_f+0x50>
     2cc:	e0 e0       	ldi	r30, 0x00	; 0
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	96 c0       	rjmp	.+300    	; 0x3fe <__pack_f+0x17c>
     2d2:	62 81       	ldd	r22, Z+2	; 0x02
     2d4:	73 81       	ldd	r23, Z+3	; 0x03
     2d6:	9f ef       	ldi	r25, 0xFF	; 255
     2d8:	62 38       	cpi	r22, 0x82	; 130
     2da:	79 07       	cpc	r23, r25
     2dc:	0c f0       	brlt	.+2      	; 0x2e0 <__pack_f+0x5e>
     2de:	5b c0       	rjmp	.+182    	; 0x396 <__pack_f+0x114>
     2e0:	22 e8       	ldi	r18, 0x82	; 130
     2e2:	3f ef       	ldi	r19, 0xFF	; 255
     2e4:	26 1b       	sub	r18, r22
     2e6:	37 0b       	sbc	r19, r23
     2e8:	2a 31       	cpi	r18, 0x1A	; 26
     2ea:	31 05       	cpc	r19, r1
     2ec:	2c f0       	brlt	.+10     	; 0x2f8 <__pack_f+0x76>
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	2a c0       	rjmp	.+84     	; 0x34c <__pack_f+0xca>
     2f8:	b8 01       	movw	r22, r16
     2fa:	a7 01       	movw	r20, r14
     2fc:	02 2e       	mov	r0, r18
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <__pack_f+0x86>
     300:	76 95       	lsr	r23
     302:	67 95       	ror	r22
     304:	57 95       	ror	r21
     306:	47 95       	ror	r20
     308:	0a 94       	dec	r0
     30a:	d2 f7       	brpl	.-12     	; 0x300 <__pack_f+0x7e>
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	a0 e0       	ldi	r26, 0x00	; 0
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	04 c0       	rjmp	.+8      	; 0x31e <__pack_f+0x9c>
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	aa 1f       	adc	r26, r26
     31c:	bb 1f       	adc	r27, r27
     31e:	2a 95       	dec	r18
     320:	d2 f7       	brpl	.-12     	; 0x316 <__pack_f+0x94>
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	a1 09       	sbc	r26, r1
     326:	b1 09       	sbc	r27, r1
     328:	8e 21       	and	r24, r14
     32a:	9f 21       	and	r25, r15
     32c:	a0 23       	and	r26, r16
     32e:	b1 23       	and	r27, r17
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	a1 05       	cpc	r26, r1
     334:	b1 05       	cpc	r27, r1
     336:	21 f0       	breq	.+8      	; 0x340 <__pack_f+0xbe>
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	a0 e0       	ldi	r26, 0x00	; 0
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	9a 01       	movw	r18, r20
     342:	ab 01       	movw	r20, r22
     344:	28 2b       	or	r18, r24
     346:	39 2b       	or	r19, r25
     348:	4a 2b       	or	r20, r26
     34a:	5b 2b       	or	r21, r27
     34c:	da 01       	movw	r26, r20
     34e:	c9 01       	movw	r24, r18
     350:	8f 77       	andi	r24, 0x7F	; 127
     352:	90 70       	andi	r25, 0x00	; 0
     354:	a0 70       	andi	r26, 0x00	; 0
     356:	b0 70       	andi	r27, 0x00	; 0
     358:	80 34       	cpi	r24, 0x40	; 64
     35a:	91 05       	cpc	r25, r1
     35c:	a1 05       	cpc	r26, r1
     35e:	b1 05       	cpc	r27, r1
     360:	39 f4       	brne	.+14     	; 0x370 <__pack_f+0xee>
     362:	27 ff       	sbrs	r18, 7
     364:	09 c0       	rjmp	.+18     	; 0x378 <__pack_f+0xf6>
     366:	20 5c       	subi	r18, 0xC0	; 192
     368:	3f 4f       	sbci	r19, 0xFF	; 255
     36a:	4f 4f       	sbci	r20, 0xFF	; 255
     36c:	5f 4f       	sbci	r21, 0xFF	; 255
     36e:	04 c0       	rjmp	.+8      	; 0x378 <__pack_f+0xf6>
     370:	21 5c       	subi	r18, 0xC1	; 193
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	4f 4f       	sbci	r20, 0xFF	; 255
     376:	5f 4f       	sbci	r21, 0xFF	; 255
     378:	e0 e0       	ldi	r30, 0x00	; 0
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	20 30       	cpi	r18, 0x00	; 0
     37e:	a0 e0       	ldi	r26, 0x00	; 0
     380:	3a 07       	cpc	r19, r26
     382:	a0 e0       	ldi	r26, 0x00	; 0
     384:	4a 07       	cpc	r20, r26
     386:	a0 e4       	ldi	r26, 0x40	; 64
     388:	5a 07       	cpc	r21, r26
     38a:	10 f0       	brcs	.+4      	; 0x390 <__pack_f+0x10e>
     38c:	e1 e0       	ldi	r30, 0x01	; 1
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	79 01       	movw	r14, r18
     392:	8a 01       	movw	r16, r20
     394:	27 c0       	rjmp	.+78     	; 0x3e4 <__pack_f+0x162>
     396:	60 38       	cpi	r22, 0x80	; 128
     398:	71 05       	cpc	r23, r1
     39a:	64 f5       	brge	.+88     	; 0x3f4 <__pack_f+0x172>
     39c:	fb 01       	movw	r30, r22
     39e:	e1 58       	subi	r30, 0x81	; 129
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	d8 01       	movw	r26, r16
     3a4:	c7 01       	movw	r24, r14
     3a6:	8f 77       	andi	r24, 0x7F	; 127
     3a8:	90 70       	andi	r25, 0x00	; 0
     3aa:	a0 70       	andi	r26, 0x00	; 0
     3ac:	b0 70       	andi	r27, 0x00	; 0
     3ae:	80 34       	cpi	r24, 0x40	; 64
     3b0:	91 05       	cpc	r25, r1
     3b2:	a1 05       	cpc	r26, r1
     3b4:	b1 05       	cpc	r27, r1
     3b6:	39 f4       	brne	.+14     	; 0x3c6 <__pack_f+0x144>
     3b8:	e7 fe       	sbrs	r14, 7
     3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <__pack_f+0x154>
     3bc:	80 e4       	ldi	r24, 0x40	; 64
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	a0 e0       	ldi	r26, 0x00	; 0
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	04 c0       	rjmp	.+8      	; 0x3ce <__pack_f+0x14c>
     3c6:	8f e3       	ldi	r24, 0x3F	; 63
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	a0 e0       	ldi	r26, 0x00	; 0
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	e8 0e       	add	r14, r24
     3d0:	f9 1e       	adc	r15, r25
     3d2:	0a 1f       	adc	r16, r26
     3d4:	1b 1f       	adc	r17, r27
     3d6:	17 ff       	sbrs	r17, 7
     3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <__pack_f+0x162>
     3da:	16 95       	lsr	r17
     3dc:	07 95       	ror	r16
     3de:	f7 94       	ror	r15
     3e0:	e7 94       	ror	r14
     3e2:	31 96       	adiw	r30, 0x01	; 1
     3e4:	87 e0       	ldi	r24, 0x07	; 7
     3e6:	16 95       	lsr	r17
     3e8:	07 95       	ror	r16
     3ea:	f7 94       	ror	r15
     3ec:	e7 94       	ror	r14
     3ee:	8a 95       	dec	r24
     3f0:	d1 f7       	brne	.-12     	; 0x3e6 <__pack_f+0x164>
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__pack_f+0x17c>
     3f4:	ee 24       	eor	r14, r14
     3f6:	ff 24       	eor	r15, r15
     3f8:	87 01       	movw	r16, r14
     3fa:	ef ef       	ldi	r30, 0xFF	; 255
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	6e 2f       	mov	r22, r30
     400:	67 95       	ror	r22
     402:	66 27       	eor	r22, r22
     404:	67 95       	ror	r22
     406:	90 2f       	mov	r25, r16
     408:	9f 77       	andi	r25, 0x7F	; 127
     40a:	d7 94       	ror	r13
     40c:	dd 24       	eor	r13, r13
     40e:	d7 94       	ror	r13
     410:	8e 2f       	mov	r24, r30
     412:	86 95       	lsr	r24
     414:	49 2f       	mov	r20, r25
     416:	46 2b       	or	r20, r22
     418:	58 2f       	mov	r21, r24
     41a:	5d 29       	or	r21, r13
     41c:	b7 01       	movw	r22, r14
     41e:	ca 01       	movw	r24, r20
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	08 95       	ret

0000042c <__unpack_f>:
     42c:	fc 01       	movw	r30, r24
     42e:	db 01       	movw	r26, r22
     430:	40 81       	ld	r20, Z
     432:	51 81       	ldd	r21, Z+1	; 0x01
     434:	22 81       	ldd	r18, Z+2	; 0x02
     436:	62 2f       	mov	r22, r18
     438:	6f 77       	andi	r22, 0x7F	; 127
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	22 1f       	adc	r18, r18
     43e:	22 27       	eor	r18, r18
     440:	22 1f       	adc	r18, r18
     442:	93 81       	ldd	r25, Z+3	; 0x03
     444:	89 2f       	mov	r24, r25
     446:	88 0f       	add	r24, r24
     448:	82 2b       	or	r24, r18
     44a:	28 2f       	mov	r18, r24
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	99 1f       	adc	r25, r25
     450:	99 27       	eor	r25, r25
     452:	99 1f       	adc	r25, r25
     454:	11 96       	adiw	r26, 0x01	; 1
     456:	9c 93       	st	X, r25
     458:	11 97       	sbiw	r26, 0x01	; 1
     45a:	21 15       	cp	r18, r1
     45c:	31 05       	cpc	r19, r1
     45e:	a9 f5       	brne	.+106    	; 0x4ca <__unpack_f+0x9e>
     460:	41 15       	cp	r20, r1
     462:	51 05       	cpc	r21, r1
     464:	61 05       	cpc	r22, r1
     466:	71 05       	cpc	r23, r1
     468:	11 f4       	brne	.+4      	; 0x46e <__unpack_f+0x42>
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	37 c0       	rjmp	.+110    	; 0x4dc <__unpack_f+0xb0>
     46e:	82 e8       	ldi	r24, 0x82	; 130
     470:	9f ef       	ldi	r25, 0xFF	; 255
     472:	13 96       	adiw	r26, 0x03	; 3
     474:	9c 93       	st	X, r25
     476:	8e 93       	st	-X, r24
     478:	12 97       	sbiw	r26, 0x02	; 2
     47a:	9a 01       	movw	r18, r20
     47c:	ab 01       	movw	r20, r22
     47e:	67 e0       	ldi	r22, 0x07	; 7
     480:	22 0f       	add	r18, r18
     482:	33 1f       	adc	r19, r19
     484:	44 1f       	adc	r20, r20
     486:	55 1f       	adc	r21, r21
     488:	6a 95       	dec	r22
     48a:	d1 f7       	brne	.-12     	; 0x480 <__unpack_f+0x54>
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	8c 93       	st	X, r24
     490:	0d c0       	rjmp	.+26     	; 0x4ac <__unpack_f+0x80>
     492:	22 0f       	add	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	44 1f       	adc	r20, r20
     498:	55 1f       	adc	r21, r21
     49a:	12 96       	adiw	r26, 0x02	; 2
     49c:	8d 91       	ld	r24, X+
     49e:	9c 91       	ld	r25, X
     4a0:	13 97       	sbiw	r26, 0x03	; 3
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	13 96       	adiw	r26, 0x03	; 3
     4a6:	9c 93       	st	X, r25
     4a8:	8e 93       	st	-X, r24
     4aa:	12 97       	sbiw	r26, 0x02	; 2
     4ac:	20 30       	cpi	r18, 0x00	; 0
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	38 07       	cpc	r19, r24
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	48 07       	cpc	r20, r24
     4b6:	80 e4       	ldi	r24, 0x40	; 64
     4b8:	58 07       	cpc	r21, r24
     4ba:	58 f3       	brcs	.-42     	; 0x492 <__unpack_f+0x66>
     4bc:	14 96       	adiw	r26, 0x04	; 4
     4be:	2d 93       	st	X+, r18
     4c0:	3d 93       	st	X+, r19
     4c2:	4d 93       	st	X+, r20
     4c4:	5c 93       	st	X, r21
     4c6:	17 97       	sbiw	r26, 0x07	; 7
     4c8:	08 95       	ret
     4ca:	2f 3f       	cpi	r18, 0xFF	; 255
     4cc:	31 05       	cpc	r19, r1
     4ce:	79 f4       	brne	.+30     	; 0x4ee <__unpack_f+0xc2>
     4d0:	41 15       	cp	r20, r1
     4d2:	51 05       	cpc	r21, r1
     4d4:	61 05       	cpc	r22, r1
     4d6:	71 05       	cpc	r23, r1
     4d8:	19 f4       	brne	.+6      	; 0x4e0 <__unpack_f+0xb4>
     4da:	84 e0       	ldi	r24, 0x04	; 4
     4dc:	8c 93       	st	X, r24
     4de:	08 95       	ret
     4e0:	64 ff       	sbrs	r22, 4
     4e2:	03 c0       	rjmp	.+6      	; 0x4ea <__unpack_f+0xbe>
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	8c 93       	st	X, r24
     4e8:	12 c0       	rjmp	.+36     	; 0x50e <__unpack_f+0xe2>
     4ea:	1c 92       	st	X, r1
     4ec:	10 c0       	rjmp	.+32     	; 0x50e <__unpack_f+0xe2>
     4ee:	2f 57       	subi	r18, 0x7F	; 127
     4f0:	30 40       	sbci	r19, 0x00	; 0
     4f2:	13 96       	adiw	r26, 0x03	; 3
     4f4:	3c 93       	st	X, r19
     4f6:	2e 93       	st	-X, r18
     4f8:	12 97       	sbiw	r26, 0x02	; 2
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	8c 93       	st	X, r24
     4fe:	87 e0       	ldi	r24, 0x07	; 7
     500:	44 0f       	add	r20, r20
     502:	55 1f       	adc	r21, r21
     504:	66 1f       	adc	r22, r22
     506:	77 1f       	adc	r23, r23
     508:	8a 95       	dec	r24
     50a:	d1 f7       	brne	.-12     	; 0x500 <__unpack_f+0xd4>
     50c:	70 64       	ori	r23, 0x40	; 64
     50e:	14 96       	adiw	r26, 0x04	; 4
     510:	4d 93       	st	X+, r20
     512:	5d 93       	st	X+, r21
     514:	6d 93       	st	X+, r22
     516:	7c 93       	st	X, r23
     518:	17 97       	sbiw	r26, 0x07	; 7
     51a:	08 95       	ret

0000051c <__fpcmp_parts_f>:
     51c:	1f 93       	push	r17
     51e:	dc 01       	movw	r26, r24
     520:	fb 01       	movw	r30, r22
     522:	9c 91       	ld	r25, X
     524:	92 30       	cpi	r25, 0x02	; 2
     526:	08 f4       	brcc	.+2      	; 0x52a <__fpcmp_parts_f+0xe>
     528:	47 c0       	rjmp	.+142    	; 0x5b8 <__fpcmp_parts_f+0x9c>
     52a:	80 81       	ld	r24, Z
     52c:	82 30       	cpi	r24, 0x02	; 2
     52e:	08 f4       	brcc	.+2      	; 0x532 <__fpcmp_parts_f+0x16>
     530:	43 c0       	rjmp	.+134    	; 0x5b8 <__fpcmp_parts_f+0x9c>
     532:	94 30       	cpi	r25, 0x04	; 4
     534:	51 f4       	brne	.+20     	; 0x54a <__fpcmp_parts_f+0x2e>
     536:	11 96       	adiw	r26, 0x01	; 1
     538:	1c 91       	ld	r17, X
     53a:	84 30       	cpi	r24, 0x04	; 4
     53c:	99 f5       	brne	.+102    	; 0x5a4 <__fpcmp_parts_f+0x88>
     53e:	81 81       	ldd	r24, Z+1	; 0x01
     540:	68 2f       	mov	r22, r24
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	61 1b       	sub	r22, r17
     546:	71 09       	sbc	r23, r1
     548:	3f c0       	rjmp	.+126    	; 0x5c8 <__fpcmp_parts_f+0xac>
     54a:	84 30       	cpi	r24, 0x04	; 4
     54c:	21 f0       	breq	.+8      	; 0x556 <__fpcmp_parts_f+0x3a>
     54e:	92 30       	cpi	r25, 0x02	; 2
     550:	31 f4       	brne	.+12     	; 0x55e <__fpcmp_parts_f+0x42>
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	b9 f1       	breq	.+110    	; 0x5c4 <__fpcmp_parts_f+0xa8>
     556:	81 81       	ldd	r24, Z+1	; 0x01
     558:	88 23       	and	r24, r24
     55a:	89 f1       	breq	.+98     	; 0x5be <__fpcmp_parts_f+0xa2>
     55c:	2d c0       	rjmp	.+90     	; 0x5b8 <__fpcmp_parts_f+0x9c>
     55e:	11 96       	adiw	r26, 0x01	; 1
     560:	1c 91       	ld	r17, X
     562:	11 97       	sbiw	r26, 0x01	; 1
     564:	82 30       	cpi	r24, 0x02	; 2
     566:	f1 f0       	breq	.+60     	; 0x5a4 <__fpcmp_parts_f+0x88>
     568:	81 81       	ldd	r24, Z+1	; 0x01
     56a:	18 17       	cp	r17, r24
     56c:	d9 f4       	brne	.+54     	; 0x5a4 <__fpcmp_parts_f+0x88>
     56e:	12 96       	adiw	r26, 0x02	; 2
     570:	2d 91       	ld	r18, X+
     572:	3c 91       	ld	r19, X
     574:	13 97       	sbiw	r26, 0x03	; 3
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	93 81       	ldd	r25, Z+3	; 0x03
     57a:	82 17       	cp	r24, r18
     57c:	93 07       	cpc	r25, r19
     57e:	94 f0       	brlt	.+36     	; 0x5a4 <__fpcmp_parts_f+0x88>
     580:	28 17       	cp	r18, r24
     582:	39 07       	cpc	r19, r25
     584:	bc f0       	brlt	.+46     	; 0x5b4 <__fpcmp_parts_f+0x98>
     586:	14 96       	adiw	r26, 0x04	; 4
     588:	8d 91       	ld	r24, X+
     58a:	9d 91       	ld	r25, X+
     58c:	0d 90       	ld	r0, X+
     58e:	bc 91       	ld	r27, X
     590:	a0 2d       	mov	r26, r0
     592:	24 81       	ldd	r18, Z+4	; 0x04
     594:	35 81       	ldd	r19, Z+5	; 0x05
     596:	46 81       	ldd	r20, Z+6	; 0x06
     598:	57 81       	ldd	r21, Z+7	; 0x07
     59a:	28 17       	cp	r18, r24
     59c:	39 07       	cpc	r19, r25
     59e:	4a 07       	cpc	r20, r26
     5a0:	5b 07       	cpc	r21, r27
     5a2:	18 f4       	brcc	.+6      	; 0x5aa <__fpcmp_parts_f+0x8e>
     5a4:	11 23       	and	r17, r17
     5a6:	41 f0       	breq	.+16     	; 0x5b8 <__fpcmp_parts_f+0x9c>
     5a8:	0a c0       	rjmp	.+20     	; 0x5be <__fpcmp_parts_f+0xa2>
     5aa:	82 17       	cp	r24, r18
     5ac:	93 07       	cpc	r25, r19
     5ae:	a4 07       	cpc	r26, r20
     5b0:	b5 07       	cpc	r27, r21
     5b2:	40 f4       	brcc	.+16     	; 0x5c4 <__fpcmp_parts_f+0xa8>
     5b4:	11 23       	and	r17, r17
     5b6:	19 f0       	breq	.+6      	; 0x5be <__fpcmp_parts_f+0xa2>
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <__fpcmp_parts_f+0xac>
     5be:	6f ef       	ldi	r22, 0xFF	; 255
     5c0:	7f ef       	ldi	r23, 0xFF	; 255
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <__fpcmp_parts_f+0xac>
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	cb 01       	movw	r24, r22
     5ca:	1f 91       	pop	r17
     5cc:	08 95       	ret

000005ce <TIMER0_enuInit>:
#endif
/*----------------------------------------------------------------------------------------*/
/*----------------------------- TIMER0_CTC_MODE --------------------------*/

#elif TIMER0_MODE == TIMER0_CTC_MODE
	  		 	 	  			 TCCR0 &= ~(TIMER_MASK_BIT<<TCCR0_WGM00);
     5ce:	83 b7       	in	r24, 0x33	; 51
     5d0:	8f 7b       	andi	r24, 0xBF	; 191
     5d2:	83 bf       	out	0x33, r24	; 51
	  		 	 	  	 	 	 TCCR0 |= (TIMER_MASK_BIT<<TCCR0_WGM01);
     5d4:	83 b7       	in	r24, 0x33	; 51
     5d6:	88 60       	ori	r24, 0x08	; 8
     5d8:	83 bf       	out	0x33, r24	; 51

	  		 	 	  	 	 	 //OCR0 =TIMER_OCR0_COUNTS_NUMBER;
	  		 	 	  	 	 	 OCR0= 250;
     5da:	8a ef       	ldi	r24, 0xFA	; 250
     5dc:	8c bf       	out	0x3c, r24	; 60
	  		 	 	  	  		 	 	 TCCR0 &=~ (TIMER_MASK_BIT<<TCCR0_COM00);
	  		 	 	  	  		 	 	 TCCR0 &=~ (TIMER_MASK_BIT<<TCCR0_COM01);
	  		  		 	 	  		 	Local_enuErrorState = ES_OK;

#elif  		 	 	  	  		TIMER0_COMP_MODE == TIMER_OC0_TOGGELE
	  		 	 	  	  		 	 	 TCCR0 |= (TIMER_MASK_BIT<<TCCR0_COM00);
     5de:	83 b7       	in	r24, 0x33	; 51
     5e0:	80 61       	ori	r24, 0x10	; 16
     5e2:	83 bf       	out	0x33, r24	; 51
	  		 	 	  	  		 	 	 TCCR0 &=~ (TIMER_MASK_BIT<<TCCR0_COM01);
     5e4:	83 b7       	in	r24, 0x33	; 51
     5e6:	8f 7d       	andi	r24, 0xDF	; 223
     5e8:	83 bf       	out	0x33, r24	; 51




	return Local_enuErrorState;
}
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	08 95       	ret

000005ee <TIMER0_enuInterruptDisable>:
	 Local_enuErrorState = ES_OK;

 	 TIMSK &= ~(TIMER_MASK_BIT<<TIMSK_TOIE0);
#elif TIMER0_MODE == TIMER0_CTC_MODE
	 //Enable the CTC Interrupt
	 TIMSK &= ~ (TIMER_MASK_BIT<<TIMSK_OCIE0);
     5ee:	89 b7       	in	r24, 0x39	; 57
     5f0:	8d 7f       	andi	r24, 0xFD	; 253
     5f2:	89 bf       	out	0x39, r24	; 57
	 Local_enuErrorState = ES_OK;
#endif
	 return Local_enuErrorState ;
}
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	08 95       	ret

000005f8 <TIMER0_enuStartTimer>:
				TCCR0 |= (TIMER_MASK_BIT<<TCCR0_CS01);
				TCCR0 &= ~(TIMER_MASK_BIT<<TCCR0_CS02);
		  		 	Local_enuErrorState = ES_OK;

	#elif TIMER0_PRESCALER == TIMER_CLOCK_64_PRESCHALER
				TCCR0 |= (TIMER_MASK_BIT<<TCCR0_CS00);
     5f8:	83 b7       	in	r24, 0x33	; 51
     5fa:	81 60       	ori	r24, 0x01	; 1
     5fc:	83 bf       	out	0x33, r24	; 51
				TCCR0 |= (TIMER_MASK_BIT<<TCCR0_CS01);
     5fe:	83 b7       	in	r24, 0x33	; 51
     600:	82 60       	ori	r24, 0x02	; 2
     602:	83 bf       	out	0x33, r24	; 51
				TCCR0 &= ~(TIMER_MASK_BIT<<TCCR0_CS02);
     604:	83 b7       	in	r24, 0x33	; 51
     606:	8b 7f       	andi	r24, 0xFB	; 251
     608:	83 bf       	out	0x33, r24	; 51


	Local_enuErrorState=ES_OK;

	return Local_enuErrorState;
}
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	08 95       	ret

0000060e <TIMER0_enuStopTimer>:
{
	ES_t Local_enuErrorState=ES_NOK;

/**----------------------- Selection TIMER0_PRESCALER -----------------------------------**/
/*----------------------------TIMER_CLOCK_NO_CLOCK-------------------------------------------*/
			    TCCR0 &= ~(TIMER_MASK_BIT<<TCCR0_CS00);
     60e:	83 b7       	in	r24, 0x33	; 51
     610:	8e 7f       	andi	r24, 0xFE	; 254
     612:	83 bf       	out	0x33, r24	; 51
				TCCR0 &= ~(TIMER_MASK_BIT<<TCCR0_CS01);
     614:	83 b7       	in	r24, 0x33	; 51
     616:	8d 7f       	andi	r24, 0xFD	; 253
     618:	83 bf       	out	0x33, r24	; 51
				TCCR0 &= ~(TIMER_MASK_BIT<<TCCR0_CS02);
     61a:	83 b7       	in	r24, 0x33	; 51
     61c:	8b 7f       	andi	r24, 0xFB	; 251
     61e:	83 bf       	out	0x33, r24	; 51
				Local_enuErrorState=ES_OK;
	return Local_enuErrorState;
}
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	08 95       	ret

00000624 <TIMER0_enuSetCallBackDelay>:

//ES_t Timer0_enuSetCallBack( void(*Copy_pfunISRFun)(void),u8_t Copy_u8_tTimerIntIndex, u8_t Copy_u8_tTimerDelay)
//ES_t Timer0_enuSetCallBack(volatile void( *Copy_pfunISRFun) (void))
ES_t TIMER0_enuSetCallBackDelay( void( *Copy_pfunISRFun) (void),u8_t Copy_u8_tTimer0IntIndex, u16_t Copy_u16_tTimer0Delay)

{
     624:	e6 2f       	mov	r30, r22
	ES_t Local_enuErrorState=ES_NOK;
	TIMER0_pfunISRFun[Copy_u8_tTimer0IntIndex]= Copy_pfunISRFun;
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	e8 54       	subi	r30, 0x48	; 72
     62e:	fd 4f       	sbci	r31, 0xFD	; 253
     630:	91 83       	std	Z+1, r25	; 0x01
     632:	80 83       	st	Z, r24
	//TIMER0_pfunISRFun= Copy_pfunISRFun;

	TIMER0_u16_tDELAY_MILEOSECOND = Copy_u16_tTimer0Delay;
     634:	50 93 c5 02 	sts	0x02C5, r21
     638:	40 93 c4 02 	sts	0x02C4, r20
	Local_enuErrorState =ES_OK;
	return Local_enuErrorState;
}
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	08 95       	ret

00000640 <__vector_11>:
*--------------------------------------Timer 0 ISR-----------------------------------------------*
**---------------------------------------------------------------------------------------*/


ISR (VECT_TIMER0_OVF)
{
     640:	1f 92       	push	r1
     642:	0f 92       	push	r0
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	0f 92       	push	r0
     648:	11 24       	eor	r1, r1
     64a:	2f 93       	push	r18
     64c:	3f 93       	push	r19
     64e:	4f 93       	push	r20
     650:	5f 93       	push	r21
     652:	6f 93       	push	r22
     654:	7f 93       	push	r23
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	af 93       	push	r26
     65c:	bf 93       	push	r27
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
	if (TIMER0_pfunISRFun[TIMER0_OVF_CALLBACK_INT_INDEX] != NULL)
     662:	e0 91 b8 02 	lds	r30, 0x02B8
     666:	f0 91 b9 02 	lds	r31, 0x02B9
     66a:	30 97       	sbiw	r30, 0x00	; 0
     66c:	09 f1       	breq	.+66     	; 0x6b0 <__vector_11+0x70>
	{
		Global_u32_tCounterOVF ++;
     66e:	80 91 c0 02 	lds	r24, 0x02C0
     672:	90 91 c1 02 	lds	r25, 0x02C1
     676:	a0 91 c2 02 	lds	r26, 0x02C2
     67a:	b0 91 c3 02 	lds	r27, 0x02C3
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	a1 1d       	adc	r26, r1
     682:	b1 1d       	adc	r27, r1
     684:	80 93 c0 02 	sts	0x02C0, r24
     688:	90 93 c1 02 	sts	0x02C1, r25
     68c:	a0 93 c2 02 	sts	0x02C2, r26
     690:	b0 93 c3 02 	sts	0x02C3, r27

		if (Global_u32_tCounterOVF == TIMER0_u32_tNUMBER_OF_OVERFLOW)
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	a1 05       	cpc	r26, r1
     698:	b1 05       	cpc	r27, r1
     69a:	51 f4       	brne	.+20     	; 0x6b0 <__vector_11+0x70>
		{
			TCCR0 = TIMER0_u8_tPRELOAD_VALUE;
     69c:	13 be       	out	0x33, r1	; 51
			TIMER0_pfunISRFun[TIMER0_OVF_CALLBACK_INT_INDEX]();
     69e:	09 95       	icall
			Global_u32_tCounterOVF =0;
     6a0:	10 92 c0 02 	sts	0x02C0, r1
     6a4:	10 92 c1 02 	sts	0x02C1, r1
     6a8:	10 92 c2 02 	sts	0x02C2, r1
     6ac:	10 92 c3 02 	sts	0x02C3, r1
		}
	}
}
     6b0:	ff 91       	pop	r31
     6b2:	ef 91       	pop	r30
     6b4:	bf 91       	pop	r27
     6b6:	af 91       	pop	r26
     6b8:	9f 91       	pop	r25
     6ba:	8f 91       	pop	r24
     6bc:	7f 91       	pop	r23
     6be:	6f 91       	pop	r22
     6c0:	5f 91       	pop	r21
     6c2:	4f 91       	pop	r20
     6c4:	3f 91       	pop	r19
     6c6:	2f 91       	pop	r18
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	0f 90       	pop	r0
     6ce:	1f 90       	pop	r1
     6d0:	18 95       	reti

000006d2 <__vector_10>:

ISR (VECT_TIMER0_CTC)
{
     6d2:	1f 92       	push	r1
     6d4:	0f 92       	push	r0
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	0f 92       	push	r0
     6da:	11 24       	eor	r1, r1
     6dc:	2f 93       	push	r18
     6de:	3f 93       	push	r19
     6e0:	4f 93       	push	r20
     6e2:	5f 93       	push	r21
     6e4:	6f 93       	push	r22
     6e6:	7f 93       	push	r23
     6e8:	8f 93       	push	r24
     6ea:	9f 93       	push	r25
     6ec:	af 93       	push	r26
     6ee:	bf 93       	push	r27
     6f0:	ef 93       	push	r30
     6f2:	ff 93       	push	r31

	if (TIMER0_pfunISRFun[TIMER_CTC0_INTERRUPT_INDEX] != NULL)
     6f4:	e0 91 ba 02 	lds	r30, 0x02BA
     6f8:	f0 91 bb 02 	lds	r31, 0x02BB
     6fc:	30 97       	sbiw	r30, 0x00	; 0
     6fe:	89 f1       	breq	.+98     	; 0x762 <__vector_10+0x90>
	{
	Global_u32_tCounterCTC ++;
     700:	20 91 bc 02 	lds	r18, 0x02BC
     704:	30 91 bd 02 	lds	r19, 0x02BD
     708:	40 91 be 02 	lds	r20, 0x02BE
     70c:	50 91 bf 02 	lds	r21, 0x02BF
     710:	2f 5f       	subi	r18, 0xFF	; 255
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	4f 4f       	sbci	r20, 0xFF	; 255
     716:	5f 4f       	sbci	r21, 0xFF	; 255
     718:	20 93 bc 02 	sts	0x02BC, r18
     71c:	30 93 bd 02 	sts	0x02BD, r19
     720:	40 93 be 02 	sts	0x02BE, r20
     724:	50 93 bf 02 	sts	0x02BF, r21

		if (Global_u32_tCounterCTC == TIMER0_u16_tDELAY_MILEOSECOND)
     728:	80 91 c4 02 	lds	r24, 0x02C4
     72c:	90 91 c5 02 	lds	r25, 0x02C5
     730:	a0 e0       	ldi	r26, 0x00	; 0
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	28 17       	cp	r18, r24
     736:	39 07       	cpc	r19, r25
     738:	4a 07       	cpc	r20, r26
     73a:	5b 07       	cpc	r21, r27
     73c:	91 f4       	brne	.+36     	; 0x762 <__vector_10+0x90>

		{
			TIMER0_pfunISRFun[TIMER_CTC0_INTERRUPT_INDEX]();
     73e:	09 95       	icall
			//TIMER0_pfunISRFun();
			Global_u16_tTimer0CTC_OneSecondCounter++;
     740:	80 91 9c 02 	lds	r24, 0x029C
     744:	90 91 9d 02 	lds	r25, 0x029D
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	90 93 9d 02 	sts	0x029D, r25
     74e:	80 93 9c 02 	sts	0x029C, r24
			Global_u32_tCounterCTC =0;
     752:	10 92 bc 02 	sts	0x02BC, r1
     756:	10 92 bd 02 	sts	0x02BD, r1
     75a:	10 92 be 02 	sts	0x02BE, r1
     75e:	10 92 bf 02 	sts	0x02BF, r1
		}
	}

}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <TIMER2_enuInit>:
#endif
/*----------------------------------------------------------------------------------------*/
/*----------------------------- TIMER2_CTC_MODE --------------------------*/

#elif TIMER2_MODE == TIMER2_CTC_MODE
	  		 	 	  			 TCCR2 &= ~(TIMER_MASK_BIT<<TCCR2_WGM20);
     784:	85 b5       	in	r24, 0x25	; 37
     786:	8f 7b       	andi	r24, 0xBF	; 191
     788:	85 bd       	out	0x25, r24	; 37
	  		 	 	  	 	 	 TCCR2 |=  (TIMER_MASK_BIT<<TCCR2_WGM21);
     78a:	85 b5       	in	r24, 0x25	; 37
     78c:	88 60       	ori	r24, 0x08	; 8
     78e:	85 bd       	out	0x25, r24	; 37
	  		 	 	  	 	ASSR &=~ (TIMER_MASK_BIT <<ASSR_AS2);
     790:	82 b5       	in	r24, 0x22	; 34
     792:	87 7f       	andi	r24, 0xF7	; 247
     794:	82 bd       	out	0x22, r24	; 34
	  		 	 	  	 	 	 //OCR0 =TIMER_OCR0_COUNTS_NUMBER;
	  		 	 	  	 	 	 OCR2= 250;
     796:	8a ef       	ldi	r24, 0xFA	; 250
     798:	83 bd       	out	0x23, r24	; 35
	  		 	 	  	  		 	 	 TCCR2 &=~ (TIMER_MASK_BIT<<TCCR2_COM20);
	  		 	 	  	  		 	 	 TCCR2 &=~ (TIMER_MASK_BIT<<TCCR2_COM21);
	  		  		 	 	  		 	Local_enuErrorState = ES_OK;

#elif  		 	 	  	  		TIMER2_COMP_MODE == TIMER_OC2_TOGGELE
	  		 	 	  	  		 	 	 TCCR2 |=  (TIMER_MASK_BIT<<TCCR2_COM20);
     79a:	85 b5       	in	r24, 0x25	; 37
     79c:	80 61       	ori	r24, 0x10	; 16
     79e:	85 bd       	out	0x25, r24	; 37
	  		 	 	  	  		 	 	 TCCR2 &=~ (TIMER_MASK_BIT<<TCCR2_COM21);
     7a0:	85 b5       	in	r24, 0x25	; 37
     7a2:	8f 7d       	andi	r24, 0xDF	; 223
     7a4:	85 bd       	out	0x25, r24	; 37




	return Local_enuErrorState;
}
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	08 95       	ret

000007aa <TIMER2_enuInterruptDisable>:
	 Local_enuErrorState = ES_OK;

 	 TIMSK &= ~(TIMER_MASK_BIT<<TIMSK_TOIE2);
#elif TIMER2_MODE == TIMER2_CTC_MODE
	 //Enable the CTC Interrupt
	 TIMSK &= ~ (TIMER_MASK_BIT<<TIMSK_OCIE2);
     7aa:	89 b7       	in	r24, 0x39	; 57
     7ac:	8f 77       	andi	r24, 0x7F	; 127
     7ae:	89 bf       	out	0x39, r24	; 57
	 Local_enuErrorState = ES_OK;
#endif
	 return Local_enuErrorState ;
}
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	08 95       	ret

000007b4 <TIMER2_enuStartTimer>:
				TCCR2  |= (TIMER_MASK_BIT<<TCCR2_CS21);
				TCCR2 &= ~(TIMER_MASK_BIT<<TCCR2_CS22);
		  		 	Local_enuErrorState = ES_OK;

	#elif TIMER2_PRESCALER == TIMER_CLOCK_64_PRESCHALER
				TCCR2 |= (TIMER_MASK_BIT<<TCCR2_CS20);
     7b4:	85 b5       	in	r24, 0x25	; 37
     7b6:	81 60       	ori	r24, 0x01	; 1
     7b8:	85 bd       	out	0x25, r24	; 37
				TCCR2 |= (TIMER_MASK_BIT<<TCCR2_CS21);
     7ba:	85 b5       	in	r24, 0x25	; 37
     7bc:	82 60       	ori	r24, 0x02	; 2
     7be:	85 bd       	out	0x25, r24	; 37
				TCCR2 &=~ (TIMER_MASK_BIT<<TCCR2_CS22);
     7c0:	85 b5       	in	r24, 0x25	; 37
     7c2:	8b 7f       	andi	r24, 0xFB	; 251
     7c4:	85 bd       	out	0x25, r24	; 37


	Local_enuErrorState=ES_OK;

	return Local_enuErrorState;
}
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	08 95       	ret

000007ca <TIMER2_enuStopTimer>:
{
	ES_t Local_enuErrorState=ES_NOK;

/**----------------------- Selection TIMER2_PRESCALER -----------------------------------**/
/*----------------------------TIMER_CLOCK_NO_CLOCK-------------------------------------------*/
			    TCCR2 &= ~(TIMER_MASK_BIT<<TCCR2_CS20);
     7ca:	85 b5       	in	r24, 0x25	; 37
     7cc:	8e 7f       	andi	r24, 0xFE	; 254
     7ce:	85 bd       	out	0x25, r24	; 37
				TCCR2 &= ~(TIMER_MASK_BIT<<TCCR2_CS21);
     7d0:	85 b5       	in	r24, 0x25	; 37
     7d2:	8d 7f       	andi	r24, 0xFD	; 253
     7d4:	85 bd       	out	0x25, r24	; 37
				TCCR2 &= ~(TIMER_MASK_BIT<<TCCR2_CS22);
     7d6:	85 b5       	in	r24, 0x25	; 37
     7d8:	8b 7f       	andi	r24, 0xFB	; 251
     7da:	85 bd       	out	0x25, r24	; 37
				Local_enuErrorState=ES_OK;
	return Local_enuErrorState;
}
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	08 95       	ret

000007e0 <TIMER2_enuSetCallBackDelay>:

//ES_t TIMER2_enuSetCallBack( void(*Copy_pfunISRFun)(void),u8_t Copy_u8_tTimerIntIndex, u8_t Copy_u8_tTimerDelay)
//ES_t TIMER2_enuSetCallBack(volatile void( *Copy_pfunISRFun) (void))
ES_t TIMER2_enuSetCallBackDelay( void( *Copy_pfunISRFun) (void),u8_t Copy_u8_tTimer2IntIndex, u16_t Copy_u16_tTimer2Delay)

{
     7e0:	e6 2f       	mov	r30, r22
	ES_t Local_enuErrorState=ES_NOK;
	TIMER2_pfunISRFun[Copy_u8_tTimer2IntIndex]= Copy_pfunISRFun;
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	e0 55       	subi	r30, 0x50	; 80
     7ea:	fd 4f       	sbci	r31, 0xFD	; 253
     7ec:	91 83       	std	Z+1, r25	; 0x01
     7ee:	80 83       	st	Z, r24
	//TIMER2_pfunISRFun= Copy_pfunISRFun;

	TIMER2_u16_tDELAY_MILEOSECOND = Copy_u16_tTimer2Delay;
     7f0:	50 93 c9 02 	sts	0x02C9, r21
     7f4:	40 93 c8 02 	sts	0x02C8, r20
	Local_enuErrorState =ES_OK;
	return Local_enuErrorState;
}
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	08 95       	ret

000007fc <__vector_5>:
*--------------------------------------TIMER 2 ISR-----------------------------------------------*
**---------------------------------------------------------------------------------------*/


ISR (VECT_TIMER2_OVF)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
	if (TIMER2_pfunISRFun[TIMER2_OVF_CALLBACK_INT_INDEX] != NULL)
     81e:	e0 91 b0 02 	lds	r30, 0x02B0
     822:	f0 91 b1 02 	lds	r31, 0x02B1
     826:	30 97       	sbiw	r30, 0x00	; 0
     828:	09 f1       	breq	.+66     	; 0x86c <__stack+0xd>
	{
		Global_u32_tCounterOVF2 ++;
     82a:	80 91 b4 02 	lds	r24, 0x02B4
     82e:	90 91 b5 02 	lds	r25, 0x02B5
     832:	a0 91 b6 02 	lds	r26, 0x02B6
     836:	b0 91 b7 02 	lds	r27, 0x02B7
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	a1 1d       	adc	r26, r1
     83e:	b1 1d       	adc	r27, r1
     840:	80 93 b4 02 	sts	0x02B4, r24
     844:	90 93 b5 02 	sts	0x02B5, r25
     848:	a0 93 b6 02 	sts	0x02B6, r26
     84c:	b0 93 b7 02 	sts	0x02B7, r27

		if (Global_u32_tCounterOVF2 == TIMER2_u32_tNUMBER_OF_OVERFLOW)
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	a1 05       	cpc	r26, r1
     854:	b1 05       	cpc	r27, r1
     856:	51 f4       	brne	.+20     	; 0x86c <__stack+0xd>
		{
			TCCR2 = TIMER2_u8_tPRELOAD_VALUE;
     858:	15 bc       	out	0x25, r1	; 37
			TIMER2_pfunISRFun[TIMER2_OVF_CALLBACK_INT_INDEX]();
     85a:	09 95       	icall
			Global_u32_tCounterOVF2 =0;
     85c:	10 92 b4 02 	sts	0x02B4, r1
     860:	10 92 b5 02 	sts	0x02B5, r1
     864:	10 92 b6 02 	sts	0x02B6, r1
     868:	10 92 b7 02 	sts	0x02B7, r1
		}
	}
}
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	bf 91       	pop	r27
     872:	af 91       	pop	r26
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	7f 91       	pop	r23
     87a:	6f 91       	pop	r22
     87c:	5f 91       	pop	r21
     87e:	4f 91       	pop	r20
     880:	3f 91       	pop	r19
     882:	2f 91       	pop	r18
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <TIMER1_enuInit>:
/*----------------------------- TIMER1_CTC_MODE --------------------------*/

#elif TIMER1_MODE == TIMER1_CTC_MODE_OCR1A


	  		 	 	  			 TCCR1A &= ~(TIMER_MASK_BIT<<TCCR1A_WGM10);
     88e:	8f b5       	in	r24, 0x2f	; 47
     890:	8e 7f       	andi	r24, 0xFE	; 254
     892:	8f bd       	out	0x2f, r24	; 47
	  		 	 	  	 	 	 TCCR1A  &= ~ (TIMER_MASK_BIT<<TCCR1A_WGM11);
     894:	8f b5       	in	r24, 0x2f	; 47
     896:	8d 7f       	andi	r24, 0xFD	; 253
     898:	8f bd       	out	0x2f, r24	; 47
	  		 	 	  	 	 	 TCCR1B |= (TIMER_MASK_BIT<<TCCR1B_WGM12);
     89a:	8e b5       	in	r24, 0x2e	; 46
     89c:	88 60       	ori	r24, 0x08	; 8
     89e:	8e bd       	out	0x2e, r24	; 46
	  		 	 	  	 	 	 TCCR1B  &= ~(TIMER_MASK_BIT<<TCCR1B_WGM13);
     8a0:	8e b5       	in	r24, 0x2e	; 46
     8a2:	8f 7e       	andi	r24, 0xEF	; 239
     8a4:	8e bd       	out	0x2e, r24	; 46

#elif TIMER1_CTC_MODE_CHANNEL	== CHANNEL_A_B

	  		  	  		 	 	  Local_u16OutCompareValue_A = TIMER1_CTCMODE_COUNTS_NUMBER;

	  		  	  		 	 	  	OCR1AH = (Local_u16OutCompareValue_A >> TIMER_MASK_EIGHT_BIT);
     8a6:	91 e6       	ldi	r25, 0x61	; 97
     8a8:	9b bd       	out	0x2b, r25	; 43
	  		  	  		 	 	  	OCR1AL =  Local_u16OutCompareValue_A;
     8aa:	88 ea       	ldi	r24, 0xA8	; 168
     8ac:	8a bd       	out	0x2a, r24	; 42
	  		  		 	 	  	Local_u16OutCompareValue_B = TIMER1_CTCMODE_COUNTS_NUMBER;
	  		  		 	 	  		OCR1BH = (Local_u16OutCompareValue_B >> TIMER_MASK_EIGHT_BIT);
     8ae:	99 bd       	out	0x29, r25	; 41
	  		  		 	 	  		OCR1BL =  Local_u16OutCompareValue_B;
     8b0:	88 bd       	out	0x28, r24	; 40
 		 	 	  	  		 	 	 TCCR1A &=~ (TIMER_MASK_BIT<<TCCR1A_COM1B0);
	  		 	 	  	  		 	 TCCR1A &=~ (TIMER_MASK_BIT<<TCCR1A_COM1B1);
	  		  		 	 	  		 	Local_enuErrorState = ES_OK;

#elif  		 	 	  	  		TIMER1_COMP_MODE == TIMER_OC1_TOGGELE
	  		 	 	  	  		 	 	 TCCR1A |= (TIMER_MASK_BIT<<TCCR1A_COM1A0);
     8b2:	8f b5       	in	r24, 0x2f	; 47
     8b4:	80 64       	ori	r24, 0x40	; 64
     8b6:	8f bd       	out	0x2f, r24	; 47
	  		 	 	  	  		 	 	 TCCR1A &=~ (TIMER_MASK_BIT<<TCCR1A_COM1A1);
     8b8:	8f b5       	in	r24, 0x2f	; 47
     8ba:	8f 77       	andi	r24, 0x7F	; 127
     8bc:	8f bd       	out	0x2f, r24	; 47
	  		 	 	  	  		 	 	 TCCR1A  |= (TIMER_MASK_BIT<<TCCR1A_COM1B0);
     8be:	8f b5       	in	r24, 0x2f	; 47
     8c0:	80 61       	ori	r24, 0x10	; 16
     8c2:	8f bd       	out	0x2f, r24	; 47
	  		 	 	  	  		 	 	 TCCR1A &=~ (TIMER_MASK_BIT<<TCCR1A_COM1B1);
     8c4:	8f b5       	in	r24, 0x2f	; 47
     8c6:	8f 7d       	andi	r24, 0xDF	; 223
     8c8:	8f bd       	out	0x2f, r24	; 47




	return Local_enuErrorState;
}
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 95       	ret

000008ce <TIMER1_enuInterruptDisable>:
 	 	 //Disable the CTC Interrupt
 	 		 TIMSK &= ~(TIMER_MASK_BIT<<TIMSK_OCIE1B);
 	 		 Local_enuErrorState = ES_OK;
#elif TIMER1_CTC_MODE_CHANNEL	== CHANNEL_A_B
 	 	 //Disable the CTC Interrupt
 	 		 TIMSK &= ~(TIMER_MASK_BIT<<TIMSK_OCIE1A);
     8ce:	89 b7       	in	r24, 0x39	; 57
     8d0:	8f 7e       	andi	r24, 0xEF	; 239
     8d2:	89 bf       	out	0x39, r24	; 57
 	 		 TIMSK &= ~(TIMER_MASK_BIT<<TIMSK_OCIE1B);
     8d4:	89 b7       	in	r24, 0x39	; 57
     8d6:	87 7f       	andi	r24, 0xF7	; 247
     8d8:	89 bf       	out	0x39, r24	; 57
#error "TIMER1_MODE SELECTION IS NOT CORRECT"
      	 	 Local_enuErrorState = ES_NOK;

#endif
	 return Local_enuErrorState ;
}
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	08 95       	ret

000008de <TIMER1_enuStartTimer>:
				TCCR1B  |= (TIMER_MASK_BIT<<TCCR1B_CS11);
				TCCR1B &= ~(TIMER_MASK_BIT<<TCCR1B_CS12);
		  		 	Local_enuErrorState = ES_OK;

	#elif TIMER1_PRESCALER == TIMER_CLOCK_64_PRESCHALER
				TCCR1B  |= (TIMER_MASK_BIT<<TCCR1B_CS10);
     8de:	8e b5       	in	r24, 0x2e	; 46
     8e0:	81 60       	ori	r24, 0x01	; 1
     8e2:	8e bd       	out	0x2e, r24	; 46
				TCCR1B  |= (TIMER_MASK_BIT<<TCCR1B_CS11);
     8e4:	8e b5       	in	r24, 0x2e	; 46
     8e6:	82 60       	ori	r24, 0x02	; 2
     8e8:	8e bd       	out	0x2e, r24	; 46
				TCCR1B &= ~(TIMER_MASK_BIT<<TCCR1B_CS12);
     8ea:	8e b5       	in	r24, 0x2e	; 46
     8ec:	8b 7f       	andi	r24, 0xFB	; 251
     8ee:	8e bd       	out	0x2e, r24	; 46
		      	 	 Local_enuErrorState = ES_NOK;

	#endif

	return Local_enuErrorState;
}
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 95       	ret

000008f4 <TIMER1_enuStopTimer>:
{
	ES_t Local_enuErrorState=ES_NOK;

/**----------------------- Selection TIMER1_PRESCALER -----------------------------------**/
/*----------------------------TIMER_CLOCK_NO_CLOCK-------------------------------------------*/
			    TCCR1B &= ~(TIMER_MASK_BIT<<TCCR1B_CS10);
     8f4:	8e b5       	in	r24, 0x2e	; 46
     8f6:	8e 7f       	andi	r24, 0xFE	; 254
     8f8:	8e bd       	out	0x2e, r24	; 46
				TCCR1B &= ~(TIMER_MASK_BIT<<TCCR1B_CS11);
     8fa:	8e b5       	in	r24, 0x2e	; 46
     8fc:	8d 7f       	andi	r24, 0xFD	; 253
     8fe:	8e bd       	out	0x2e, r24	; 46
				TCCR1B &= ~(TIMER_MASK_BIT<<TCCR1B_CS12);
     900:	8e b5       	in	r24, 0x2e	; 46
     902:	8b 7f       	andi	r24, 0xFB	; 251
     904:	8e bd       	out	0x2e, r24	; 46
				Local_enuErrorState=ES_OK;
	return Local_enuErrorState;
}
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	08 95       	ret

0000090a <TIMER1_enuSetCallBackDelay>:
**	Functionality   : .
**---------------------------------------------------------------------------------------*/

ES_t TIMER1_enuSetCallBackDelay( void( *Copy_pfunISRFun) (void),u8_t Copy_u8_tTimer1IntIndex, u16_t Copy_u16_tTimer1Delay)

{
     90a:	e6 2f       	mov	r30, r22
	ES_t Local_enuErrorState=ES_NOK;
	TIMER1_pfunISRFun[Copy_u8_tTimer1IntIndex]= Copy_pfunISRFun;
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	ee 55       	subi	r30, 0x5E	; 94
     914:	fd 4f       	sbci	r31, 0xFD	; 253
     916:	91 83       	std	Z+1, r25	; 0x01
     918:	80 83       	st	Z, r24
	//DDRD= 1;
	TIMER1_u16_tDELAY_MILEOSECOND = Copy_u16_tTimer1Delay;
     91a:	50 93 c7 02 	sts	0x02C7, r21
     91e:	40 93 c6 02 	sts	0x02C6, r20
	Local_enuErrorState =ES_OK;
	return Local_enuErrorState;
}
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	08 95       	ret

00000926 <__vector_9>:
*--------------------------------------Timer 0 ISR-----------------------------------------------*
**---------------------------------------------------------------------------------------*/


ISR (VECT_TIMER1_OVF)
{
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	0f 92       	push	r0
     92e:	11 24       	eor	r1, r1
     930:	2f 93       	push	r18
     932:	3f 93       	push	r19
     934:	4f 93       	push	r20
     936:	5f 93       	push	r21
     938:	6f 93       	push	r22
     93a:	7f 93       	push	r23
     93c:	8f 93       	push	r24
     93e:	9f 93       	push	r25
     940:	af 93       	push	r26
     942:	bf 93       	push	r27
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ef 93       	push	r30
     94a:	ff 93       	push	r31
	if (TIMER1_pfunISRFun[TIMER1_OVF_CALLBACK_INT_INDEX] != NULL)
     94c:	c0 91 a2 02 	lds	r28, 0x02A2
     950:	d0 91 a3 02 	lds	r29, 0x02A3
     954:	20 97       	sbiw	r28, 0x00	; 0
     956:	51 f1       	breq	.+84     	; 0x9ac <__vector_9+0x86>
	{
		Global_u32_tCounterOVF1 ++;
     958:	60 91 ac 02 	lds	r22, 0x02AC
     95c:	70 91 ad 02 	lds	r23, 0x02AD
     960:	80 91 ae 02 	lds	r24, 0x02AE
     964:	90 91 af 02 	lds	r25, 0x02AF
     968:	6f 5f       	subi	r22, 0xFF	; 255
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	8f 4f       	sbci	r24, 0xFF	; 255
     96e:	9f 4f       	sbci	r25, 0xFF	; 255
     970:	60 93 ac 02 	sts	0x02AC, r22
     974:	70 93 ad 02 	sts	0x02AD, r23
     978:	80 93 ae 02 	sts	0x02AE, r24
     97c:	90 93 af 02 	sts	0x02AF, r25

		if (Global_u32_tCounterOVF1 == TIMER1_u32_tNUMBER_OF_OVERFLOW)
     980:	0e 94 79 00 	call	0xf2	; 0xf2 <__floatunsisf>
     984:	25 e9       	ldi	r18, 0x95	; 149
     986:	3f eb       	ldi	r19, 0xBF	; 191
     988:	46 ed       	ldi	r20, 0xD6	; 214
     98a:	56 e3       	ldi	r21, 0x36	; 54
     98c:	0e 94 49 00 	call	0x92	; 0x92 <__eqsf2>
     990:	88 23       	and	r24, r24
     992:	61 f4       	brne	.+24     	; 0x9ac <__vector_9+0x86>
		{
			TCNT1H = (Global_u16_TIMER1_PreloadValue>>TIMER_MASK_EIGHT_BIT);
     994:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = Global_u16_TIMER1_PreloadValue;
     996:	1c bc       	out	0x2c, r1	; 44

			TIMER1_pfunISRFun[TIMER1_OVF_CALLBACK_INT_INDEX]();
     998:	fe 01       	movw	r30, r28
     99a:	09 95       	icall
			Global_u32_tCounterOVF1 =0;
     99c:	10 92 ac 02 	sts	0x02AC, r1
     9a0:	10 92 ad 02 	sts	0x02AD, r1
     9a4:	10 92 ae 02 	sts	0x02AE, r1
     9a8:	10 92 af 02 	sts	0x02AF, r1
		}
	}
}
     9ac:	ff 91       	pop	r31
     9ae:	ef 91       	pop	r30
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_7>:

ISR (VECT_TIMER1_CTCA)
{
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	2f 93       	push	r18
     9de:	3f 93       	push	r19
     9e0:	4f 93       	push	r20
     9e2:	5f 93       	push	r21
     9e4:	6f 93       	push	r22
     9e6:	7f 93       	push	r23
     9e8:	8f 93       	push	r24
     9ea:	9f 93       	push	r25
     9ec:	af 93       	push	r26
     9ee:	bf 93       	push	r27
     9f0:	ef 93       	push	r30
     9f2:	ff 93       	push	r31

	if (TIMER1_pfunISRFun[TIMER1_CTCA_CALLBACK_INT_INDEX] != NULL)
     9f4:	e0 91 a4 02 	lds	r30, 0x02A4
     9f8:	f0 91 a5 02 	lds	r31, 0x02A5
     9fc:	30 97       	sbiw	r30, 0x00	; 0
     9fe:	49 f1       	breq	.+82     	; 0xa52 <__vector_7+0x80>
	{
		Global_u32_tCounterCTC1A ++;
     a00:	80 91 aa 02 	lds	r24, 0x02AA
     a04:	90 91 ab 02 	lds	r25, 0x02AB
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	90 93 ab 02 	sts	0x02AB, r25
     a0e:	80 93 aa 02 	sts	0x02AA, r24
		Global_32_tTIMER1_CTCA_SecondsCounter=0;
     a12:	10 92 9e 02 	sts	0x029E, r1
     a16:	10 92 9f 02 	sts	0x029F, r1
     a1a:	10 92 a0 02 	sts	0x02A0, r1
     a1e:	10 92 a1 02 	sts	0x02A1, r1
		if (Global_u32_tCounterCTC1A == TIMER1_u16_tDELAY_MILEOSECOND)
     a22:	20 91 c6 02 	lds	r18, 0x02C6
     a26:	30 91 c7 02 	lds	r19, 0x02C7
     a2a:	82 17       	cp	r24, r18
     a2c:	93 07       	cpc	r25, r19
     a2e:	89 f4       	brne	.+34     	; 0xa52 <__vector_7+0x80>

		{
			TIMER1_pfunISRFun[TIMER1_CTCA_CALLBACK_INT_INDEX]();
     a30:	09 95       	icall
			Global_32_tTIMER1_CTCA_SecondsCounter = 1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	a0 e0       	ldi	r26, 0x00	; 0
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	80 93 9e 02 	sts	0x029E, r24
     a3e:	90 93 9f 02 	sts	0x029F, r25
     a42:	a0 93 a0 02 	sts	0x02A0, r26
     a46:	b0 93 a1 02 	sts	0x02A1, r27
			Global_u32_tCounterCTC1A =0;
     a4a:	10 92 ab 02 	sts	0x02AB, r1
     a4e:	10 92 aa 02 	sts	0x02AA, r1
		}
	}

}
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <__vector_8>:
/*USING CTC_B TO TRIGGER THE ADC, EVERY 100m second READ THE VALUE OF THE TEMP SENSOR AND
 *  GET THE READING OF THE ADC */
/*HERE THE INTERRUPT OF THE CTC_B OCCUR EACH 100m second*/
ISR (VECT_TIMER1_CTCB)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
////////////////////////////////////////////////////////////////////////
	if (TIMER1_pfunISRFun[TIMER1_CTCB_CALLBACK_INT_INDEX] != NULL)
     a96:	e0 91 a6 02 	lds	r30, 0x02A6
     a9a:	f0 91 a7 02 	lds	r31, 0x02A7
     a9e:	30 97       	sbiw	r30, 0x00	; 0
     aa0:	a9 f0       	breq	.+42     	; 0xacc <__vector_8+0x58>
	{
	Global_u32_tCounterCTC1B ++;
     aa2:	80 91 a8 02 	lds	r24, 0x02A8
     aa6:	90 91 a9 02 	lds	r25, 0x02A9
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	90 93 a9 02 	sts	0x02A9, r25
     ab0:	80 93 a8 02 	sts	0x02A8, r24

		if (Global_u32_tCounterCTC1B == TIMER1_u16_tDELAY_MILEOSECOND)
     ab4:	20 91 c6 02 	lds	r18, 0x02C6
     ab8:	30 91 c7 02 	lds	r19, 0x02C7
     abc:	82 17       	cp	r24, r18
     abe:	93 07       	cpc	r25, r19
     ac0:	29 f4       	brne	.+10     	; 0xacc <__vector_8+0x58>

		{
			TIMER1_pfunISRFun[TIMER1_CTCB_CALLBACK_INT_INDEX]();
     ac2:	09 95       	icall

			Global_u32_tCounterCTC1B =0;
     ac4:	10 92 a9 02 	sts	0x02A9, r1
     ac8:	10 92 a8 02 	sts	0x02A8, r1
		}
	}

}
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <TIMER1_enuInterruptEnable>:
 	 		 TIMSK |= (TIMER_MASK_BIT<<TIMSK_OCIE1B);
 	 		 GIE_enu_Enable();
 	 		 Local_enuErrorState = ES_OK;
#elif TIMER1_CTC_MODE_CHANNEL	== CHANNEL_A_B
 	 	//Enable the CTC_A & CTC_B Interrupt
 	 		 TIMSK |= (TIMER_MASK_BIT<<TIMSK_OCIE1A);
     aee:	89 b7       	in	r24, 0x39	; 57
     af0:	80 61       	ori	r24, 0x10	; 16
     af2:	89 bf       	out	0x39, r24	; 57
 	 		 TIMSK |= (TIMER_MASK_BIT<<TIMSK_OCIE1B);
     af4:	89 b7       	in	r24, 0x39	; 57
     af6:	88 60       	ori	r24, 0x08	; 8
     af8:	89 bf       	out	0x39, r24	; 57
 	 		 GIE_enu_Enable();
     afa:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <GIE_enu_Enable>
#endif
#else
#error "TIMER1_MODE SELECTION IS NOT CORRECT"
#endif
	 return Local_enuErrorState ;
}
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	08 95       	ret

00000b02 <TIMER2_enuInterruptEnable>:
	 Local_enuErrorState = ES_OK;

 	 TIMSK |= (TIMER_MASK_BIT<<TIMSK_TOIE2);
#elif TIMER2_MODE == TIMER2_CTC_MODE
	 //Enable the CTC Interrupt
	 TIMSK |= (TIMER_MASK_BIT<<TIMSK_OCIE2);
     b02:	89 b7       	in	r24, 0x39	; 57
     b04:	80 68       	ori	r24, 0x80	; 128
     b06:	89 bf       	out	0x39, r24	; 57
	 GIE_enu_Enable();
     b08:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <GIE_enu_Enable>
	 Local_enuErrorState = ES_OK;
#endif
	 return Local_enuErrorState ;
}
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	08 95       	ret

00000b10 <TIMER0_enuInterruptEnable>:
	 Local_enuErrorState = ES_OK;

 	 TIMSK |= (TIMER_MASK_BIT<<TIMSK_TOIE0);
#elif TIMER0_MODE == TIMER0_CTC_MODE
	 //Enable the CTC Interrupt
	 TIMSK |= (TIMER_MASK_BIT<<TIMSK_OCIE0);
     b10:	89 b7       	in	r24, 0x39	; 57
     b12:	82 60       	ori	r24, 0x02	; 2
     b14:	89 bf       	out	0x39, r24	; 57
	 GIE_enu_Enable();
     b16:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <GIE_enu_Enable>
	 Local_enuErrorState = ES_OK;
#endif
	 return Local_enuErrorState ;
}
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	08 95       	ret

00000b1e <EEPROM_enuReadByteFromAddress>:
#include "EEPROM_register.h"
#include "EEPROM_private.h"


ES_t EEPROM_enuReadByteFromAddress( const u16_t Copy_u16_tAddress ,  u8_t * Copy_u18_tData)
{
     b1e:	fb 01       	movw	r30, r22
	ES_t Local_enuErrorState = ES_NOK;
	/* Wait for completion of previous write */
	while (((EECR & (1 << EECR_EEWE))>>EECR_EEWE)==1);
     b20:	e1 99       	sbic	0x1c, 1	; 28
     b22:	fe cf       	rjmp	.-4      	; 0xb20 <EEPROM_enuReadByteFromAddress+0x2>
	/* Set up address register */
	EEAR = Copy_u16_tAddress;
     b24:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EECR_EERE);
     b26:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	(*Copy_u18_tData) = EEDR;
     b28:	8d b3       	in	r24, 0x1d	; 29
     b2a:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	08 95       	ret

00000b30 <EEPROM_enuReadBlockFromAddress>:

ES_t EEPROM_enuReadBlockFromAddress(const u16_t Copy_u16_tAddress, u8_t* Copy_u8_tDistnation,const u16_t Copy_u16_tSize)
{
     b30:	98 2f       	mov	r25, r24
	ES_t Local_enuErrorState = ES_NOK;
	/* Wait for completion of previous write */
	while (((EECR & (1 << EECR_EEWE))>>EECR_EEWE)==1)
     b32:	e1 99       	sbic	0x1c, 1	; 28
     b34:	fe cf       	rjmp	.-4      	; 0xb32 <EEPROM_enuReadBlockFromAddress+0x2>
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	0b c0       	rjmp	.+22     	; 0xb52 <EEPROM_enuReadBlockFromAddress+0x22>
     b3c:	82 2f       	mov	r24, r18
     b3e:	89 0f       	add	r24, r25
	u16_t Local_u16_tCounter = 0;//the Local_u16_tCounter of bytes that are read

	while (Local_u16_tCounter < Copy_u16_tSize) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = Copy_u16_tAddress + Local_u16_tCounter;
     b40:	8e bb       	out	0x1e, r24	; 30
		/* Start EEPROM read by writing EECR_EERE */
		EECR |= (1 << EECR_EERE);
     b42:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(Copy_u8_tDistnation + Local_u16_tCounter) = EEDR;
     b44:	8d b3       	in	r24, 0x1d	; 29
     b46:	fb 01       	movw	r30, r22
     b48:	e2 0f       	add	r30, r18
     b4a:	f3 1f       	adc	r31, r19
     b4c:	80 83       	st	Z, r24

		Local_u16_tCounter++;//increase the bytes Local_u16_tCounter
     b4e:	2f 5f       	subi	r18, 0xFF	; 255
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EECR_EEWE))>>EECR_EEWE)==1)
	;

	u16_t Local_u16_tCounter = 0;//the Local_u16_tCounter of bytes that are read

	while (Local_u16_tCounter < Copy_u16_tSize) //loop until move all bytes to the given array
     b52:	24 17       	cp	r18, r20
     b54:	35 07       	cpc	r19, r21
     b56:	90 f3       	brcs	.-28     	; 0xb3c <EEPROM_enuReadBlockFromAddress+0xc>
		Local_u16_tCounter++;//increase the bytes Local_u16_tCounter

	}
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	08 95       	ret

00000b5c <EEPROM_enuWriteByteToAddress>:

ES_t EEPROM_enuWriteByteToAddress(const u16_t Copy_u16_tAddress, const u8_t Copy_u8_tData)
{
	ES_t Local_enuErrorState = ES_NOK;
	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EECR_EEWE) ) >>EECR_EEWE ) == 1)
     b5c:	e1 99       	sbic	0x1c, 1	; 28
     b5e:	fe cf       	rjmp	.-4      	; 0xb5c <EEPROM_enuWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = Copy_u16_tAddress;
     b60:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EECR_EERE);
     b62:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != Copy_u8_tData)//compare the value read to the value to be written
     b64:	8d b3       	in	r24, 0x1d	; 29
     b66:	86 17       	cp	r24, r22
     b68:	19 f0       	breq	.+6      	; 0xb70 <EEPROM_enuWriteByteToAddress+0x14>
	{//if they are not equal then write the data 
		EEDR = Copy_u8_tData;//move the data to EEDR
     b6a:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EECR_EEMWE);
     b6c:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EECR_EEWE */
		EECR |= (1 << EECR_EEWE);
     b6e:	e1 9a       	sbi	0x1c, 1	; 28

	}
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;

}
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	08 95       	ret

00000b74 <EEPROM_enuWriteBlockToAddress>:

ES_t EEPROM_enuWriteBlockToAddress(const u16_t Copy_u16_tAddress, const u8_t* Copy_u8_tData,const u16_t Copy_u16_tSize)
{
     b74:	98 2f       	mov	r25, r24
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	12 c0       	rjmp	.+36     	; 0xba0 <EEPROM_enuWriteBlockToAddress+0x2c>
	ES_t Local_enuErrorState = ES_NOK;
	u16_t Local_u16_tCounter = 0;//Bytes write Local_u16_tCounter
	while (Local_u16_tCounter < Copy_u16_tSize)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EECR_EEWE) ) >>EECR_EEWE ) == 1)
     b7c:	e1 99       	sbic	0x1c, 1	; 28
     b7e:	fe cf       	rjmp	.-4      	; 0xb7c <EEPROM_enuWriteBlockToAddress+0x8>
     b80:	82 2f       	mov	r24, r18
     b82:	89 0f       	add	r24, r25
		;
		/* Set up address register */
		EEAR = Copy_u16_tAddress + Local_u16_tCounter;
     b84:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EECR_EERE);
     b86:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(Copy_u8_tData + Local_u16_tCounter)))//compare the value read to the value to be written
     b88:	8d b3       	in	r24, 0x1d	; 29
     b8a:	fb 01       	movw	r30, r22
     b8c:	e2 0f       	add	r30, r18
     b8e:	f3 1f       	adc	r31, r19
     b90:	e0 81       	ld	r30, Z
     b92:	8e 17       	cp	r24, r30
     b94:	19 f0       	breq	.+6      	; 0xb9c <EEPROM_enuWriteBlockToAddress+0x28>
		{//if they are not equal then write the data 
			EEDR = *(Copy_u8_tData + Local_u16_tCounter);//move the data to EEDR
     b96:	ed bb       	out	0x1d, r30	; 29

			/* Write logical one to EECR_EEMWE */
			EECR |= (1 << EECR_EEMWE);
     b98:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EECR_EEWE */
			EECR |= (1 << EECR_EEWE);
     b9a:	e1 9a       	sbi	0x1c, 1	; 28
		}
		else
		{

		}
		Local_u16_tCounter++;//increase bytes Local_u16_tCounter
     b9c:	2f 5f       	subi	r18, 0xFF	; 255
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255

ES_t EEPROM_enuWriteBlockToAddress(const u16_t Copy_u16_tAddress, const u8_t* Copy_u8_tData,const u16_t Copy_u16_tSize)
{
	ES_t Local_enuErrorState = ES_NOK;
	u16_t Local_u16_tCounter = 0;//Bytes write Local_u16_tCounter
	while (Local_u16_tCounter < Copy_u16_tSize)
     ba0:	24 17       	cp	r18, r20
     ba2:	35 07       	cpc	r19, r21
     ba4:	58 f3       	brcs	.-42     	; 0xb7c <EEPROM_enuWriteBlockToAddress+0x8>
		}
		Local_u16_tCounter++;//increase bytes Local_u16_tCounter
	}
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	08 95       	ret

00000baa <GIE_enu_Init>:
ES_t GIE_enu_Init(void)
{
	ES_t Local_enuErrorState =ES_NOK;

/****************CLEAR THE BIT I GIE***************/
	if(SREG &=~(BIT_MASKING<<GIE_BIT_I))
     baa:	8f b7       	in	r24, 0x3f	; 63
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	8f bf       	out	0x3f, r24	; 63
     bb0:	8f b7       	in	r24, 0x3f	; 63
     bb2:	81 11       	cpse	r24, r1
     bb4:	81 e0       	ldi	r24, 0x01	; 1
		{
			Local_enuErrorState=ES_OK;
		}

	return Local_enuErrorState;
}
     bb6:	08 95       	ret

00000bb8 <GIE_enu_Enable>:
ES_t GIE_enu_Enable(void)
{
	ES_t Local_enuErrorState =ES_NOK;
	/****************SET THE BIT I GIE***************/

	if(SREG |=(BIT_MASKING<<GIE_BIT_I))
     bb8:	8f b7       	in	r24, 0x3f	; 63
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8f bf       	out	0x3f, r24	; 63
		{
			Local_enuErrorState=ES_OK;
		}
	return Local_enuErrorState;
}
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	08 95       	ret

00000bc2 <GIE_enu_Disable>:
ES_t GIE_enu_Disable(void)
{
	ES_t Local_enuErrorState =ES_NOK;
	/****************CLEAR THE BIT I GIE***************/

	if(SREG &=~(BIT_MASKING<<GIE_BIT_I))
     bc2:	8f b7       	in	r24, 0x3f	; 63
     bc4:	8f 77       	andi	r24, 0x7F	; 127
     bc6:	8f bf       	out	0x3f, r24	; 63
     bc8:	8f b7       	in	r24, 0x3f	; 63
     bca:	81 11       	cpse	r24, r1
     bcc:	81 e0       	ldi	r24, 0x01	; 1
		{
			Local_enuErrorState=ES_OK;
		}

	return Local_enuErrorState;
}
     bce:	08 95       	ret

00000bd0 <EXTI_enuInit>:
static volatile void (* EXTI_pfunISRFun[3]) (void) = {NULL,NULL,NULL};



ES_t EXTI_enuInit(EXTI_t * Copy_pAstrEXTIConfig)
{
     bd0:	dc 01       	movw	r26, r24
		else if (Copy_pAstrEXTIConfig[INT0].Int_State == DISABLED)
		{
			GICR &=~(1<<6);
		}
	}*/
	if (Copy_pAstrEXTIConfig[INT0].Int_State == ENABLED)
     bd2:	8c 91       	ld	r24, X
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	19 f5       	brne	.+70     	; 0xc1e <EXTI_enuInit+0x4e>
	{
		GICR |= (1<<6);
     bd8:	8b b7       	in	r24, 0x3b	; 59
     bda:	80 64       	ori	r24, 0x40	; 64
     bdc:	8b bf       	out	0x3b, r24	; 59
		switch(Copy_pAstrEXTIConfig[INT0].Sence_level)
     bde:	11 96       	adiw	r26, 0x01	; 1
     be0:	8c 91       	ld	r24, X
     be2:	11 97       	sbiw	r26, 0x01	; 1
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	59 f0       	breq	.+22     	; 0xbfe <EXTI_enuInit+0x2e>
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	30 f0       	brcs	.+12     	; 0xbf8 <EXTI_enuInit+0x28>
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	69 f0       	breq	.+26     	; 0xc0a <EXTI_enuInit+0x3a>
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	91 f0       	breq	.+36     	; 0xc18 <EXTI_enuInit+0x48>
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	19 c0       	rjmp	.+50     	; 0xc2a <EXTI_enuInit+0x5a>
		{
		case LOW_LEVEL:
			MCUCR &= ~(3<<0);
     bf8:	85 b7       	in	r24, 0x35	; 53
     bfa:	8c 7f       	andi	r24, 0xFC	; 252
     bfc:	0b c0       	rjmp	.+22     	; 0xc14 <EXTI_enuInit+0x44>
			break;
		case ANY_LOGICAL:
			MCUCR |=  (1<<0);
     bfe:	85 b7       	in	r24, 0x35	; 53
     c00:	81 60       	ori	r24, 0x01	; 1
     c02:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1<<1);
     c04:	85 b7       	in	r24, 0x35	; 53
     c06:	8d 7f       	andi	r24, 0xFD	; 253
     c08:	05 c0       	rjmp	.+10     	; 0xc14 <EXTI_enuInit+0x44>
			break;
		case FALLING:
			MCUCR &= ~(1<<0);
     c0a:	85 b7       	in	r24, 0x35	; 53
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	85 bf       	out	0x35, r24	; 53
			MCUCR |=  (1<<1);
     c10:	85 b7       	in	r24, 0x35	; 53
     c12:	82 60       	ori	r24, 0x02	; 2
     c14:	85 bf       	out	0x35, r24	; 53
     c16:	08 c0       	rjmp	.+16     	; 0xc28 <EXTI_enuInit+0x58>
			break;
		case RISING:
			MCUCR |=  (3<<0);
     c18:	85 b7       	in	r24, 0x35	; 53
     c1a:	83 60       	ori	r24, 0x03	; 3
     c1c:	fb cf       	rjmp	.-10     	; 0xc14 <EXTI_enuInit+0x44>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANG;
		}
	}
	else if (Copy_pAstrEXTIConfig[INT0].Int_State == DISABLED)
     c1e:	88 23       	and	r24, r24
     c20:	19 f4       	brne	.+6      	; 0xc28 <EXTI_enuInit+0x58>
	{
		GICR &=~(1<<6);
     c22:	8b b7       	in	r24, 0x3b	; 59
     c24:	8f 7b       	andi	r24, 0xBF	; 191
     c26:	8b bf       	out	0x3b, r24	; 59
     c28:	90 e0       	ldi	r25, 0x00	; 0
	}

	if (Copy_pAstrEXTIConfig[INT1].Int_State == ENABLED)
     c2a:	fd 01       	movw	r30, r26
     c2c:	32 96       	adiw	r30, 0x02	; 2
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	8c 91       	ld	r24, X
     c32:	12 97       	sbiw	r26, 0x02	; 2
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	09 f5       	brne	.+66     	; 0xc7a <EXTI_enuInit+0xaa>
	{
		GICR |= (1<<7);
     c38:	8b b7       	in	r24, 0x3b	; 59
     c3a:	80 68       	ori	r24, 0x80	; 128
     c3c:	8b bf       	out	0x3b, r24	; 59
		switch(Copy_pAstrEXTIConfig[INT1].Sence_level)
     c3e:	81 81       	ldd	r24, Z+1	; 0x01
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	59 f0       	breq	.+22     	; 0xc5a <EXTI_enuInit+0x8a>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	30 f0       	brcs	.+12     	; 0xc54 <EXTI_enuInit+0x84>
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	71 f0       	breq	.+28     	; 0xc68 <EXTI_enuInit+0x98>
     c4c:	83 30       	cpi	r24, 0x03	; 3
     c4e:	91 f0       	breq	.+36     	; 0xc74 <EXTI_enuInit+0xa4>
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	18 c0       	rjmp	.+48     	; 0xc84 <EXTI_enuInit+0xb4>
		{
		case LOW_LEVEL:
			MCUCR &= ~(3<<2);
     c54:	85 b7       	in	r24, 0x35	; 53
     c56:	83 7f       	andi	r24, 0xF3	; 243
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <EXTI_enuInit+0x94>
			break;
		case ANY_LOGICAL:
			MCUCR |=  (1<<2);
     c5a:	85 b7       	in	r24, 0x35	; 53
     c5c:	84 60       	ori	r24, 0x04	; 4
     c5e:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1<<3);
     c60:	85 b7       	in	r24, 0x35	; 53
     c62:	87 7f       	andi	r24, 0xF7	; 247
     c64:	85 bf       	out	0x35, r24	; 53
     c66:	0e c0       	rjmp	.+28     	; 0xc84 <EXTI_enuInit+0xb4>
			break;
		case FALLING:
			MCUCR &= ~(1<<2);
     c68:	85 b7       	in	r24, 0x35	; 53
     c6a:	8b 7f       	andi	r24, 0xFB	; 251
     c6c:	85 bf       	out	0x35, r24	; 53
			MCUCR |=  (1<<3);
     c6e:	85 b7       	in	r24, 0x35	; 53
     c70:	88 60       	ori	r24, 0x08	; 8
     c72:	f8 cf       	rjmp	.-16     	; 0xc64 <EXTI_enuInit+0x94>
			break;
		case RISING:
			MCUCR |=  (3<<2);
     c74:	85 b7       	in	r24, 0x35	; 53
     c76:	8c 60       	ori	r24, 0x0C	; 12
     c78:	f5 cf       	rjmp	.-22     	; 0xc64 <EXTI_enuInit+0x94>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANG;
		}
	}
	else if (Copy_pAstrEXTIConfig[INT1].Int_State == DISABLED)
     c7a:	88 23       	and	r24, r24
     c7c:	19 f4       	brne	.+6      	; 0xc84 <EXTI_enuInit+0xb4>
	{
		GICR &=~(1<<7);
     c7e:	8b b7       	in	r24, 0x3b	; 59
     c80:	8f 77       	andi	r24, 0x7F	; 127
     c82:	8b bf       	out	0x3b, r24	; 59
	}

	if (Copy_pAstrEXTIConfig[INT2].Int_State == ENABLED)
     c84:	fd 01       	movw	r30, r26
     c86:	34 96       	adiw	r30, 0x04	; 4
     c88:	14 96       	adiw	r26, 0x04	; 4
     c8a:	8c 91       	ld	r24, X
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	89 f4       	brne	.+34     	; 0xcb2 <EXTI_enuInit+0xe2>
	{
		GICR |= (1<<5);
     c90:	8b b7       	in	r24, 0x3b	; 59
     c92:	80 62       	ori	r24, 0x20	; 32
     c94:	8b bf       	out	0x3b, r24	; 59
		switch(Copy_pAstrEXTIConfig[INT2].Sence_level)
     c96:	81 81       	ldd	r24, Z+1	; 0x01
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	21 f0       	breq	.+8      	; 0xca4 <EXTI_enuInit+0xd4>
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	29 f0       	breq	.+10     	; 0xcaa <EXTI_enuInit+0xda>
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	0c c0       	rjmp	.+24     	; 0xcbc <EXTI_enuInit+0xec>
		{
		case FALLING:
			MCUCSR &= ~(1<<6);
     ca4:	84 b7       	in	r24, 0x34	; 52
     ca6:	8f 7b       	andi	r24, 0xBF	; 191
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <EXTI_enuInit+0xde>
			break;
		case RISING:
			MCUCSR |=  (1<<6);
     caa:	84 b7       	in	r24, 0x34	; 52
     cac:	80 64       	ori	r24, 0x40	; 64
     cae:	84 bf       	out	0x34, r24	; 52
     cb0:	05 c0       	rjmp	.+10     	; 0xcbc <EXTI_enuInit+0xec>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANG;
		}
	}
	else if (Copy_pAstrEXTIConfig[INT2].Int_State == DISABLED)
     cb2:	88 23       	and	r24, r24
     cb4:	19 f4       	brne	.+6      	; 0xcbc <EXTI_enuInit+0xec>
	{
		GICR &=~(1<<5);
     cb6:	8b b7       	in	r24, 0x3b	; 59
     cb8:	8f 7d       	andi	r24, 0xDF	; 223
     cba:	8b bf       	out	0x3b, r24	; 59
	}
	return Local_enuErrorState;
}
     cbc:	89 2f       	mov	r24, r25
     cbe:	08 95       	ret

00000cc0 <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel(u8_t Copy_u8IntNum, u8_t Copy_u8SenceLevel)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_u8IntNum == INT0)
     cc0:	88 23       	and	r24, r24
     cc2:	e1 f4       	brne	.+56     	; 0xcfc <EXTI_enuSetSenseLevel+0x3c>
	{
		switch(Copy_u8SenceLevel)
     cc4:	61 30       	cpi	r22, 0x01	; 1
     cc6:	59 f0       	breq	.+22     	; 0xcde <EXTI_enuSetSenseLevel+0x1e>
     cc8:	61 30       	cpi	r22, 0x01	; 1
     cca:	30 f0       	brcs	.+12     	; 0xcd8 <EXTI_enuSetSenseLevel+0x18>
     ccc:	62 30       	cpi	r22, 0x02	; 2
     cce:	69 f0       	breq	.+26     	; 0xcea <EXTI_enuSetSenseLevel+0x2a>
     cd0:	63 30       	cpi	r22, 0x03	; 3
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <EXTI_enuSetSenseLevel+0x16>
     cd4:	40 c0       	rjmp	.+128    	; 0xd56 <EXTI_enuSetSenseLevel+0x96>
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <EXTI_enuSetSenseLevel+0x36>
		{
		case LOW_LEVEL:
			MCUCR &= ~(3<<0);
     cd8:	85 b7       	in	r24, 0x35	; 53
     cda:	8c 7f       	andi	r24, 0xFC	; 252
     cdc:	22 c0       	rjmp	.+68     	; 0xd22 <EXTI_enuSetSenseLevel+0x62>
			break;
		case ANY_LOGICAL:
			MCUCR |=  (1<<0);
     cde:	85 b7       	in	r24, 0x35	; 53
     ce0:	81 60       	ori	r24, 0x01	; 1
     ce2:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1<<1);
     ce4:	85 b7       	in	r24, 0x35	; 53
     ce6:	8d 7f       	andi	r24, 0xFD	; 253
     ce8:	1c c0       	rjmp	.+56     	; 0xd22 <EXTI_enuSetSenseLevel+0x62>
			break;
		case FALLING:
			MCUCR &= ~(1<<0);
     cea:	85 b7       	in	r24, 0x35	; 53
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	85 bf       	out	0x35, r24	; 53
			MCUCR |=  (1<<1);
     cf0:	85 b7       	in	r24, 0x35	; 53
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	16 c0       	rjmp	.+44     	; 0xd22 <EXTI_enuSetSenseLevel+0x62>
			break;
		case RISING:
			MCUCR |=  (3<<0);
     cf6:	85 b7       	in	r24, 0x35	; 53
     cf8:	83 60       	ori	r24, 0x03	; 3
     cfa:	13 c0       	rjmp	.+38     	; 0xd22 <EXTI_enuSetSenseLevel+0x62>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANG;
		}
	}
	else if (Copy_u8IntNum == INT1)
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	e1 f4       	brne	.+56     	; 0xd38 <EXTI_enuSetSenseLevel+0x78>
	{
		switch(Copy_u8SenceLevel)
     d00:	61 30       	cpi	r22, 0x01	; 1
     d02:	51 f0       	breq	.+20     	; 0xd18 <EXTI_enuSetSenseLevel+0x58>
     d04:	61 30       	cpi	r22, 0x01	; 1
     d06:	28 f0       	brcs	.+10     	; 0xd12 <EXTI_enuSetSenseLevel+0x52>
     d08:	62 30       	cpi	r22, 0x02	; 2
     d0a:	69 f0       	breq	.+26     	; 0xd26 <EXTI_enuSetSenseLevel+0x66>
     d0c:	63 30       	cpi	r22, 0x03	; 3
     d0e:	19 f5       	brne	.+70     	; 0xd56 <EXTI_enuSetSenseLevel+0x96>
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <EXTI_enuSetSenseLevel+0x72>
		{
		case LOW_LEVEL:
			MCUCR &= ~(3<<2);
     d12:	85 b7       	in	r24, 0x35	; 53
     d14:	83 7f       	andi	r24, 0xF3	; 243
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <EXTI_enuSetSenseLevel+0x62>
			break;
		case ANY_LOGICAL:
			MCUCR |=  (1<<2);
     d18:	85 b7       	in	r24, 0x35	; 53
     d1a:	84 60       	ori	r24, 0x04	; 4
     d1c:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1<<3);
     d1e:	85 b7       	in	r24, 0x35	; 53
     d20:	87 7f       	andi	r24, 0xF7	; 247
     d22:	85 bf       	out	0x35, r24	; 53
     d24:	16 c0       	rjmp	.+44     	; 0xd52 <EXTI_enuSetSenseLevel+0x92>
			break;
		case FALLING:
			MCUCR &= ~(1<<2);
     d26:	85 b7       	in	r24, 0x35	; 53
     d28:	8b 7f       	andi	r24, 0xFB	; 251
     d2a:	85 bf       	out	0x35, r24	; 53
			MCUCR |=  (1<<3);
     d2c:	85 b7       	in	r24, 0x35	; 53
     d2e:	88 60       	ori	r24, 0x08	; 8
     d30:	f8 cf       	rjmp	.-16     	; 0xd22 <EXTI_enuSetSenseLevel+0x62>
			break;
		case RISING:
			MCUCR |=  (3<<2);
     d32:	85 b7       	in	r24, 0x35	; 53
     d34:	8c 60       	ori	r24, 0x0C	; 12
     d36:	f5 cf       	rjmp	.-22     	; 0xd22 <EXTI_enuSetSenseLevel+0x62>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANG;
		}
	}
	else if (Copy_u8IntNum == INT2)
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	59 f4       	brne	.+22     	; 0xd52 <EXTI_enuSetSenseLevel+0x92>
	{
		switch(Copy_u8SenceLevel)
     d3c:	62 30       	cpi	r22, 0x02	; 2
     d3e:	19 f0       	breq	.+6      	; 0xd46 <EXTI_enuSetSenseLevel+0x86>
     d40:	63 30       	cpi	r22, 0x03	; 3
     d42:	49 f4       	brne	.+18     	; 0xd56 <EXTI_enuSetSenseLevel+0x96>
     d44:	03 c0       	rjmp	.+6      	; 0xd4c <EXTI_enuSetSenseLevel+0x8c>
		{
		case FALLING:
			MCUCSR &= ~(1<<6);
     d46:	84 b7       	in	r24, 0x34	; 52
     d48:	8f 7b       	andi	r24, 0xBF	; 191
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <EXTI_enuSetSenseLevel+0x90>
			break;
		case RISING:
			MCUCSR |=  (1<<6);
     d4c:	84 b7       	in	r24, 0x34	; 52
     d4e:	80 64       	ori	r24, 0x40	; 64
     d50:	84 bf       	out	0x34, r24	; 52
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	08 95       	ret
			break;
     d56:	82 e0       	ldi	r24, 0x02	; 2
		}
	}


	return Local_enuErrorState;
}
     d58:	08 95       	ret

00000d5a <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt(u8_t Copy_u8IntNum)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_u8IntNum == INT0)
     d5a:	88 23       	and	r24, r24
     d5c:	19 f4       	brne	.+6      	; 0xd64 <EXTI_enuEnableInterrupt+0xa>
	{
		GICR |= (1<<6);
     d5e:	8b b7       	in	r24, 0x3b	; 59
     d60:	80 64       	ori	r24, 0x40	; 64
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <EXTI_enuEnableInterrupt+0x12>
	}
	else if (Copy_u8IntNum == INT1)
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	29 f4       	brne	.+10     	; 0xd72 <EXTI_enuEnableInterrupt+0x18>
	{
		GICR |= (1<<7);
     d68:	8b b7       	in	r24, 0x3b	; 59
     d6a:	80 68       	ori	r24, 0x80	; 128
     d6c:	8b bf       	out	0x3b, r24	; 59
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	08 95       	ret
	}
	else if (Copy_u8IntNum == INT2)
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	11 f0       	breq	.+4      	; 0xd7a <EXTI_enuEnableInterrupt+0x20>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	08 95       	ret
	{
		GICR |= (1<<5);
     d7a:	8b b7       	in	r24, 0x3b	; 59
     d7c:	80 62       	ori	r24, 0x20	; 32
     d7e:	8b bf       	out	0x3b, r24	; 59
     d80:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANG;
	}

	return Local_enuErrorState;
}
     d82:	08 95       	ret

00000d84 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt(u8_t Copy_u8IntNum)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_u8IntNum == INT0)
     d84:	88 23       	and	r24, r24
     d86:	19 f4       	brne	.+6      	; 0xd8e <EXTI_enuDisableInterrupt+0xa>
	{
		GICR &=~(1<<6);
     d88:	8b b7       	in	r24, 0x3b	; 59
     d8a:	8f 7b       	andi	r24, 0xBF	; 191
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <EXTI_enuDisableInterrupt+0x12>
	}
	else if (Copy_u8IntNum == INT1)
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	29 f4       	brne	.+10     	; 0xd9c <EXTI_enuDisableInterrupt+0x18>
	{
		GICR &=~(1<<7);
     d92:	8b b7       	in	r24, 0x3b	; 59
     d94:	8f 77       	andi	r24, 0x7F	; 127
     d96:	8b bf       	out	0x3b, r24	; 59
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	08 95       	ret
	}
	else if (Copy_u8IntNum == INT2)
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	11 f0       	breq	.+4      	; 0xda4 <EXTI_enuDisableInterrupt+0x20>
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	08 95       	ret
	{
		GICR &=~(1<<5);
     da4:	8b b7       	in	r24, 0x3b	; 59
     da6:	8f 7d       	andi	r24, 0xDF	; 223
     da8:	8b bf       	out	0x3b, r24	; 59
     daa:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANG;
	}

	return Local_enuErrorState;
}
     dac:	08 95       	ret

00000dae <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void (* Copy_pfunAppFun)(void), u8_t Copy_u8IntNum)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pfunAppFun != NULL)
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	11 f4       	brne	.+4      	; 0xdb6 <EXTI_enuCallBack+0x8>
     db2:	83 e0       	ldi	r24, 0x03	; 3
     db4:	08 95       	ret
	{
		if (Copy_u8IntNum <=2 )
     db6:	63 30       	cpi	r22, 0x03	; 3
     db8:	10 f0       	brcs	.+4      	; 0xdbe <EXTI_enuCallBack+0x10>
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	08 95       	ret
		{
				EXTI_pfunISRFun[Copy_u8IntNum] = Copy_pfunAppFun;
     dbe:	e6 2f       	mov	r30, r22
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	e6 53       	subi	r30, 0x36	; 54
     dc8:	fd 4f       	sbci	r31, 0xFD	; 253
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	80 83       	st	Z, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}

	return Local_enuErrorState;
}
     dd0:	08 95       	ret

00000dd2 <DIO_enuInit>:

ES_t DIO_enuInit(void)
{
ES_t Local_enuErrorState = ES_NOK;

DDRA=INIT_DDR_DIRECTION;
     dd2:	87 eb       	ldi	r24, 0xB7	; 183
     dd4:	8a bb       	out	0x1a, r24	; 26
PORTA=  INIT_PORT_VALUE;
     dd6:	84 e1       	ldi	r24, 0x14	; 20
     dd8:	8b bb       	out	0x1b, r24	; 27

return Local_enuErrorState;
}
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	08 95       	ret

00000dde <DIO_enuSetPinDirection>:
/*2-SetPinDirection[input/output]*/
ES_t DIO_enuSetPinDirection(u8_t Copy_u8_tPortID, u8_t Copy_u8_tPinID, u8_t Copy_u8_tDirection)
{
	ES_t Local_enuErrorState = ES_NOK;
if(Copy_u8_tPortID<=DIO_u8_tPORT_D&&Copy_u8_tPinID<=DIO_u8_tPIN7&&Copy_u8_tDirection<=DIO_u8_tOUTPUT)
     dde:	84 30       	cpi	r24, 0x04	; 4
     de0:	08 f0       	brcs	.+2      	; 0xde4 <DIO_enuSetPinDirection+0x6>
     de2:	6d c0       	rjmp	.+218    	; 0xebe <DIO_enuSetPinDirection+0xe0>
     de4:	68 30       	cpi	r22, 0x08	; 8
     de6:	08 f0       	brcs	.+2      	; 0xdea <DIO_enuSetPinDirection+0xc>
     de8:	6a c0       	rjmp	.+212    	; 0xebe <DIO_enuSetPinDirection+0xe0>
     dea:	42 30       	cpi	r20, 0x02	; 2
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <DIO_enuSetPinDirection+0x12>
     dee:	67 c0       	rjmp	.+206    	; 0xebe <DIO_enuSetPinDirection+0xe0>
	{
		switch(Copy_u8_tPortID)
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	f9 f0       	breq	.+62     	; 0xe32 <DIO_enuSetPinDirection+0x54>
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	30 f0       	brcs	.+12     	; 0xe04 <DIO_enuSetPinDirection+0x26>
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	91 f1       	breq	.+100    	; 0xe60 <DIO_enuSetPinDirection+0x82>
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	09 f0       	breq	.+2      	; 0xe02 <DIO_enuSetPinDirection+0x24>
     e00:	5c c0       	rjmp	.+184    	; 0xeba <DIO_enuSetPinDirection+0xdc>
     e02:	45 c0       	rjmp	.+138    	; 0xe8e <DIO_enuSetPinDirection+0xb0>
		{
		case DIO_u8_tPORT_A:
			DDRA &=~(DIO_MASK_BIT<<Copy_u8_tPinID);
     e04:	2a b3       	in	r18, 0x1a	; 26
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	06 2e       	mov	r0, r22
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_enuSetPinDirection+0x34>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_enuSetPinDirection+0x30>
     e16:	80 95       	com	r24
     e18:	82 23       	and	r24, r18
     e1a:	8a bb       	out	0x1a, r24	; 26
			DDRA |= (Copy_u8_tDirection<<Copy_u8_tPinID);
     e1c:	2a b3       	in	r18, 0x1a	; 26
     e1e:	84 2f       	mov	r24, r20
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_enuSetPinDirection+0x4a>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	6a 95       	dec	r22
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_enuSetPinDirection+0x46>
     e2c:	28 2b       	or	r18, r24
     e2e:	2a bb       	out	0x1a, r18	; 26
     e30:	44 c0       	rjmp	.+136    	; 0xeba <DIO_enuSetPinDirection+0xdc>
			break;
		case DIO_u8_tPORT_B:
					DDRB &=~(DIO_MASK_BIT<<Copy_u8_tPinID);
     e32:	27 b3       	in	r18, 0x17	; 23
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	06 2e       	mov	r0, r22
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_enuSetPinDirection+0x62>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_enuSetPinDirection+0x5e>
     e44:	80 95       	com	r24
     e46:	82 23       	and	r24, r18
     e48:	87 bb       	out	0x17, r24	; 23
					DDRB |= (Copy_u8_tDirection<<Copy_u8_tPinID);
     e4a:	27 b3       	in	r18, 0x17	; 23
     e4c:	84 2f       	mov	r24, r20
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_enuSetPinDirection+0x78>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	6a 95       	dec	r22
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_enuSetPinDirection+0x74>
     e5a:	28 2b       	or	r18, r24
     e5c:	27 bb       	out	0x17, r18	; 23
     e5e:	2d c0       	rjmp	.+90     	; 0xeba <DIO_enuSetPinDirection+0xdc>
					break;
		case DIO_u8_tPORT_C:
					DDRC &=~(DIO_MASK_BIT<<Copy_u8_tPinID);
     e60:	24 b3       	in	r18, 0x14	; 20
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	06 2e       	mov	r0, r22
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_enuSetPinDirection+0x90>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_enuSetPinDirection+0x8c>
     e72:	80 95       	com	r24
     e74:	82 23       	and	r24, r18
     e76:	84 bb       	out	0x14, r24	; 20
					DDRC |= (Copy_u8_tDirection<<Copy_u8_tPinID);
     e78:	24 b3       	in	r18, 0x14	; 20
     e7a:	84 2f       	mov	r24, r20
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_enuSetPinDirection+0xa6>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	6a 95       	dec	r22
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_enuSetPinDirection+0xa2>
     e88:	28 2b       	or	r18, r24
     e8a:	24 bb       	out	0x14, r18	; 20
     e8c:	16 c0       	rjmp	.+44     	; 0xeba <DIO_enuSetPinDirection+0xdc>
					break;
		case DIO_u8_tPORT_D:
					DDRD &=~(DIO_MASK_BIT<<Copy_u8_tPinID);
     e8e:	21 b3       	in	r18, 0x11	; 17
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	06 2e       	mov	r0, r22
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_enuSetPinDirection+0xbe>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_enuSetPinDirection+0xba>
     ea0:	80 95       	com	r24
     ea2:	82 23       	and	r24, r18
     ea4:	81 bb       	out	0x11, r24	; 17
					DDRD |= (Copy_u8_tDirection<<Copy_u8_tPinID);
     ea6:	21 b3       	in	r18, 0x11	; 17
     ea8:	84 2f       	mov	r24, r20
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_enuSetPinDirection+0xd4>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	6a 95       	dec	r22
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <DIO_enuSetPinDirection+0xd0>
     eb6:	28 2b       	or	r18, r24
     eb8:	21 bb       	out	0x11, r18	; 17
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	08 95       	ret
     ebe:	82 e0       	ldi	r24, 0x02	; 2
		else
		{
		Local_enuErrorState = ES_OUT_OF_RANG;
		}
	return  Local_enuErrorState;
}
     ec0:	08 95       	ret

00000ec2 <DIO_enuSetPinValue>:
/*3-SetPinValue*/
ES_t DIO_enuSetPinValue(u8_t Copy_u8_tPortID, u8_t Copy_u8_tPinID, u8_t Copy_u8_tValue)
{
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_u8_tPortID<=DIO_u8_tPORT_D	&&Copy_u8_tPinID<=DIO_u8_tPIN7&&(Copy_u8_tValue<=DIO_u8_tHIGH ||Copy_u8_tValue<=DIO_u8_tPULL_UP))
     ec2:	84 30       	cpi	r24, 0x04	; 4
     ec4:	08 f0       	brcs	.+2      	; 0xec8 <DIO_enuSetPinValue+0x6>
     ec6:	6d c0       	rjmp	.+218    	; 0xfa2 <DIO_enuSetPinValue+0xe0>
     ec8:	68 30       	cpi	r22, 0x08	; 8
     eca:	08 f0       	brcs	.+2      	; 0xece <DIO_enuSetPinValue+0xc>
     ecc:	6a c0       	rjmp	.+212    	; 0xfa2 <DIO_enuSetPinValue+0xe0>
     ece:	42 30       	cpi	r20, 0x02	; 2
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <DIO_enuSetPinValue+0x12>
     ed2:	67 c0       	rjmp	.+206    	; 0xfa2 <DIO_enuSetPinValue+0xe0>
		{
			switch(Copy_u8_tPortID)
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	f9 f0       	breq	.+62     	; 0xf16 <DIO_enuSetPinValue+0x54>
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	30 f0       	brcs	.+12     	; 0xee8 <DIO_enuSetPinValue+0x26>
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	91 f1       	breq	.+100    	; 0xf44 <DIO_enuSetPinValue+0x82>
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	09 f0       	breq	.+2      	; 0xee6 <DIO_enuSetPinValue+0x24>
     ee4:	5c c0       	rjmp	.+184    	; 0xf9e <DIO_enuSetPinValue+0xdc>
     ee6:	45 c0       	rjmp	.+138    	; 0xf72 <DIO_enuSetPinValue+0xb0>
			{
			case DIO_u8_tPORT_A:
						PORTA &=~(DIO_MASK_BIT<<Copy_u8_tPinID);
     ee8:	2b b3       	in	r18, 0x1b	; 27
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	06 2e       	mov	r0, r22
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_enuSetPinValue+0x34>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_enuSetPinValue+0x30>
     efa:	80 95       	com	r24
     efc:	82 23       	and	r24, r18
     efe:	8b bb       	out	0x1b, r24	; 27
						PORTA |= (Copy_u8_tValue<<Copy_u8_tPinID);
     f00:	2b b3       	in	r18, 0x1b	; 27
     f02:	84 2f       	mov	r24, r20
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_enuSetPinValue+0x4a>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	6a 95       	dec	r22
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_enuSetPinValue+0x46>
     f10:	28 2b       	or	r18, r24
     f12:	2b bb       	out	0x1b, r18	; 27
     f14:	44 c0       	rjmp	.+136    	; 0xf9e <DIO_enuSetPinValue+0xdc>
						break;
			case DIO_u8_tPORT_B:
						PORTB &=~(DIO_MASK_BIT<<Copy_u8_tPinID);
     f16:	28 b3       	in	r18, 0x18	; 24
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	06 2e       	mov	r0, r22
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_enuSetPinValue+0x62>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_enuSetPinValue+0x5e>
     f28:	80 95       	com	r24
     f2a:	82 23       	and	r24, r18
     f2c:	88 bb       	out	0x18, r24	; 24
						PORTB |= (Copy_u8_tValue<<Copy_u8_tPinID);
     f2e:	28 b3       	in	r18, 0x18	; 24
     f30:	84 2f       	mov	r24, r20
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_enuSetPinValue+0x78>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	6a 95       	dec	r22
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_enuSetPinValue+0x74>
     f3e:	28 2b       	or	r18, r24
     f40:	28 bb       	out	0x18, r18	; 24
     f42:	2d c0       	rjmp	.+90     	; 0xf9e <DIO_enuSetPinValue+0xdc>
						break;
			case DIO_u8_tPORT_C:
						PORTC &=~(DIO_MASK_BIT<<Copy_u8_tPinID);
     f44:	25 b3       	in	r18, 0x15	; 21
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	06 2e       	mov	r0, r22
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_enuSetPinValue+0x90>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_enuSetPinValue+0x8c>
     f56:	80 95       	com	r24
     f58:	82 23       	and	r24, r18
     f5a:	85 bb       	out	0x15, r24	; 21
						PORTC |= (Copy_u8_tValue<<Copy_u8_tPinID);
     f5c:	25 b3       	in	r18, 0x15	; 21
     f5e:	84 2f       	mov	r24, r20
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_enuSetPinValue+0xa6>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	6a 95       	dec	r22
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_enuSetPinValue+0xa2>
     f6c:	28 2b       	or	r18, r24
     f6e:	25 bb       	out	0x15, r18	; 21
     f70:	16 c0       	rjmp	.+44     	; 0xf9e <DIO_enuSetPinValue+0xdc>
						break;
			case DIO_u8_tPORT_D:
						PORTD &=~(DIO_MASK_BIT<<Copy_u8_tPinID);
     f72:	22 b3       	in	r18, 0x12	; 18
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	06 2e       	mov	r0, r22
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_enuSetPinValue+0xbe>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_enuSetPinValue+0xba>
     f84:	80 95       	com	r24
     f86:	82 23       	and	r24, r18
     f88:	82 bb       	out	0x12, r24	; 18
						PORTD |= (Copy_u8_tValue<<Copy_u8_tPinID);
     f8a:	22 b3       	in	r18, 0x12	; 18
     f8c:	84 2f       	mov	r24, r20
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_enuSetPinValue+0xd4>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	6a 95       	dec	r22
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_enuSetPinValue+0xd0>
     f9a:	28 2b       	or	r18, r24
     f9c:	22 bb       	out	0x12, r18	; 18
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	08 95       	ret
     fa2:	82 e0       	ldi	r24, 0x02	; 2
			else
			{
				 Local_enuErrorState = ES_OUT_OF_RANG;
			}
		return  Local_enuErrorState;
}
     fa4:	08 95       	ret

00000fa6 <DIO_enuGetPinValue>:

/*4-GetPin*/
ES_t DIO_enuGetPinValue(u8_t Copy_u8_tPortID, u8_t Copy_u8_tPinID,u8_t *Copy_pu8_tValue)
{
     fa6:	fa 01       	movw	r30, r20

	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pu8_tValue!= NULL)
     fa8:	41 15       	cp	r20, r1
     faa:	51 05       	cpc	r21, r1
     fac:	11 f4       	brne	.+4      	; 0xfb2 <DIO_enuGetPinValue+0xc>
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	08 95       	ret
	{
		if(Copy_u8_tPortID<=DIO_u8_tPORT_D	&&Copy_u8_tPinID<=DIO_u8_tPIN7)
     fb2:	84 30       	cpi	r24, 0x04	; 4
     fb4:	e0 f4       	brcc	.+56     	; 0xfee <DIO_enuGetPinValue+0x48>
     fb6:	68 30       	cpi	r22, 0x08	; 8
     fb8:	d0 f4       	brcc	.+52     	; 0xfee <DIO_enuGetPinValue+0x48>
		{
			switch(Copy_u8_tPortID)
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	49 f0       	breq	.+18     	; 0xfd0 <DIO_enuGetPinValue+0x2a>
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	28 f0       	brcs	.+10     	; 0xfcc <DIO_enuGetPinValue+0x26>
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <DIO_enuGetPinValue+0x2e>
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	81 f4       	brne	.+32     	; 0xfea <DIO_enuGetPinValue+0x44>
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <DIO_enuGetPinValue+0x32>
					{
					case DIO_u8_tPORT_A:
								*Copy_pu8_tValue=((PINA>>Copy_u8_tPinID) &DIO_MASK_BIT);
     fcc:	89 b3       	in	r24, 0x19	; 25
     fce:	05 c0       	rjmp	.+10     	; 0xfda <DIO_enuGetPinValue+0x34>

								break;
					case DIO_u8_tPORT_B:
						*Copy_pu8_tValue=(PINB>>Copy_u8_tPinID) &DIO_MASK_BIT;
     fd0:	86 b3       	in	r24, 0x16	; 22
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <DIO_enuGetPinValue+0x34>

								break;
					case DIO_u8_tPORT_C:
						*Copy_pu8_tValue=(PINC>>Copy_u8_tPinID) &DIO_MASK_BIT;
     fd4:	83 b3       	in	r24, 0x13	; 19
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <DIO_enuGetPinValue+0x34>

								break;
					case DIO_u8_tPORT_D:
						*Copy_pu8_tValue=(PIND>>Copy_u8_tPinID) &DIO_MASK_BIT;
     fd8:	80 b3       	in	r24, 0x10	; 16
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_enuGetPinValue+0x3c>
     fde:	95 95       	asr	r25
     fe0:	87 95       	ror	r24
     fe2:	6a 95       	dec	r22
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_enuGetPinValue+0x38>
     fe6:	81 70       	andi	r24, 0x01	; 1
     fe8:	80 83       	st	Z, r24
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	08 95       	ret
     fee:	82 e0       	ldi	r24, 0x02	; 2
		{
		Local_enuErrorState = ES_NULL_POINTER;
		}

	return Local_enuErrorState;
}
     ff0:	08 95       	ret

00000ff2 <DIO_enuTogPinValue>:
ES_t DIO_enuTogPinValue(u8_t Copy_u8_tPortID, u8_t Copy_u8_tPinID)
{

	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_u8_tPortID<=DIO_u8_tPORT_D	&&Copy_u8_tPinID<=DIO_u8_tPIN7)
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	c0 f5       	brcc	.+112    	; 0x1066 <DIO_enuTogPinValue+0x74>
     ff6:	68 30       	cpi	r22, 0x08	; 8
     ff8:	b0 f5       	brcc	.+108    	; 0x1066 <DIO_enuTogPinValue+0x74>
		{
			switch(Copy_u8_tPortID)
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 f0       	breq	.+36     	; 0x1022 <DIO_enuTogPinValue+0x30>
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	28 f0       	brcs	.+10     	; 0x100c <DIO_enuTogPinValue+0x1a>
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	c9 f0       	breq	.+50     	; 0x1038 <DIO_enuTogPinValue+0x46>
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	61 f5       	brne	.+88     	; 0x1062 <DIO_enuTogPinValue+0x70>
    100a:	21 c0       	rjmp	.+66     	; 0x104e <DIO_enuTogPinValue+0x5c>
			{
			case DIO_u8_tPORT_A:
						PORTA ^=(DIO_MASK_BIT<<Copy_u8_tPinID);
    100c:	2b b3       	in	r18, 0x1b	; 27
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_enuTogPinValue+0x26>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	6a 95       	dec	r22
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_enuTogPinValue+0x22>
    101c:	28 27       	eor	r18, r24
    101e:	2b bb       	out	0x1b, r18	; 27
    1020:	20 c0       	rjmp	.+64     	; 0x1062 <DIO_enuTogPinValue+0x70>
						break;
			case DIO_u8_tPORT_B:
						PORTB ^=(DIO_MASK_BIT<<Copy_u8_tPinID);
    1022:	28 b3       	in	r18, 0x18	; 24
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_enuTogPinValue+0x3c>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	6a 95       	dec	r22
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_enuTogPinValue+0x38>
    1032:	28 27       	eor	r18, r24
    1034:	28 bb       	out	0x18, r18	; 24
    1036:	15 c0       	rjmp	.+42     	; 0x1062 <DIO_enuTogPinValue+0x70>
						break;
			case DIO_u8_tPORT_C:
						PORTC ^=(DIO_MASK_BIT<<Copy_u8_tPinID);
    1038:	25 b3       	in	r18, 0x15	; 21
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_enuTogPinValue+0x52>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	6a 95       	dec	r22
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_enuTogPinValue+0x4e>
    1048:	28 27       	eor	r18, r24
    104a:	25 bb       	out	0x15, r18	; 21
    104c:	0a c0       	rjmp	.+20     	; 0x1062 <DIO_enuTogPinValue+0x70>
						break;
			case DIO_u8_tPORT_D:
						PORTD ^=(DIO_MASK_BIT<<Copy_u8_tPinID);
    104e:	22 b3       	in	r18, 0x12	; 18
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_enuTogPinValue+0x68>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	6a 95       	dec	r22
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_enuTogPinValue+0x64>
    105e:	28 27       	eor	r18, r24
    1060:	22 bb       	out	0x12, r18	; 18
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	08 95       	ret
    1066:	82 e0       	ldi	r24, 0x02	; 2
				 Local_enuErrorState = ES_OUT_OF_RANG;
			}

	return Local_enuErrorState;

}
    1068:	08 95       	ret

0000106a <ADC_enuInit>:


	/* ADC_PRESCALER : PRESCALER_64 ADCSRA: ADPS2 = 1, ADPS1 = 1, ADPS0 = 0 */
#elif   ADC_PRESCALER ==   PRESCALER_64

	ADCSRA |= (ADC_MASK_BIT<<ADCSRA_ADPS2);
    106a:	32 9a       	sbi	0x06, 2	; 6
	ADCSRA |= (ADC_MASK_BIT<<ADCSRA_ADPS1);
    106c:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA &= ~(ADC_MASK_BIT<<ADCSRA_ADPS0);
    106e:	30 98       	cbi	0x06, 0	; 6


	/*AVCC_REFERENCE ADMUX: REFS1 = 0, REFS0 =1*/
#elif ADC_VREFERNCE		== 	 	AVCC_REFERENCE

		ADMUX |= (ADC_MASK_BIT<<ADMUX_REFS0);
    1070:	3e 9a       	sbi	0x07, 6	; 7
		ADMUX &=~ (ADC_MASK_BIT<<ADMUX_REFS1);
    1072:	3f 98       	cbi	0x07, 7	; 7
#endif

/* ADC ADJUSMENT Selection is done by Bit 5- ADLAR in ADMUX Register*/
		/*LEFT_ADJUSMENT ADMUX: ADLAR = 1*/
#if ADC_ADJUSMENT	 	==	LEFT_ADJUSMENT
		ADMUX |= (ADC_MASK_BIT<<ADMUX_ADLAR);
    1074:	3d 9a       	sbi	0x07, 5	; 7

#endif
		Local_enuErrorState =ES_OK;
	return Local_enuErrorState;

}
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	08 95       	ret

0000107a <ADC_enuEnableADC>:
 *----------------------------------------------------------------------------------------------------*/

ES_t ADC_enuEnableADC(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	ADCSRA|= (ADC_MASK_BIT<<ADCSRA_ADEN);
    107a:	37 9a       	sbi	0x06, 7	; 6
	Local_enuErrorState =ES_OK;
	return Local_enuErrorState;
}
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	08 95       	ret

00001080 <ADC_enuDisableADC>:

ES_t ADC_enuDisableADC(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	ADCSRA&= ~(ADC_MASK_BIT<<ADCSRA_ADEN);
    1080:	37 98       	cbi	0x06, 7	; 6
	Local_enuErrorState =ES_OK;
	return Local_enuErrorState;
}
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	08 95       	ret

00001086 <ADC_enuEnableADC_Intrrupt>:

ES_t ADC_enuEnableADC_Intrrupt(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	ADCSRA|= (ADC_MASK_BIT<<ADCSRA_ADIE);
    1086:	33 9a       	sbi	0x06, 3	; 6
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	08 95       	ret

0000108c <ADC_enuDisableADC_Intrrupt>:

ES_t ADC_enuDisableADC_Intrrupt(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	ADCSRA&= ~(ADC_MASK_BIT<<ADCSRA_ADIE);
    108c:	33 98       	cbi	0x06, 3	; 6
	Local_enuErrorState =ES_OK;
	return Local_enuErrorState;
}
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	08 95       	ret

00001092 <ADC_enuStartConversion>:
 *----------------------------------------------------------------------------------------------------*/
ES_t ADC_enuStartConversion(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	ADCSRA |= (ADC_MASK_BIT<<ADCSRA_ADSC);
    1092:	36 9a       	sbi	0x06, 6	; 6
	Local_enuErrorState =ES_OK;
	return Local_enuErrorState;

}
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	08 95       	ret

00001098 <ADC_enuChannelSelect>:

ES_t ADC_enuChannelSelect(u8_t Copy_u8_tChannelID)
{
    1098:	98 2f       	mov	r25, r24

	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_u8_tChannelID <=CHANNEL_MAXNUMBER)
    109a:	80 32       	cpi	r24, 0x20	; 32
    109c:	10 f0       	brcs	.+4      	; 0x10a2 <ADC_enuChannelSelect+0xa>
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	08 95       	ret
	{
/*--------------------------------------------------------------------------------------------------------------------------------
 * Clearing the ADMUX - Bits 4:0: MUX4:0. Before assenting the new channel ID
 *-------------------------------------------------------------------------------------------------------------------------------- */
		ADMUX&= CHANNEL_MASKING_ZERO;
    10a2:	87 b1       	in	r24, 0x07	; 7
    10a4:	80 7e       	andi	r24, 0xE0	; 224
    10a6:	87 b9       	out	0x07, r24	; 7
		ADMUX|=(Copy_u8_tChannelID);
    10a8:	87 b1       	in	r24, 0x07	; 7
    10aa:	89 2b       	or	r24, r25
    10ac:	87 b9       	out	0x07, r24	; 7
    10ae:	81 e0       	ldi	r24, 0x01	; 1
	}


	return Local_enuErrorState;

}
    10b0:	08 95       	ret

000010b2 <ADC_enuAutoTriggerSource>:

ES_t ADC_enuAutoTriggerSource(u8_t Copy_u8_tInterruptSource)
{
    10b2:	28 2f       	mov	r18, r24
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_u8_tInterruptSource <= TRIGGER_SOURCE_MAXNUMBER)
    10b4:	88 30       	cpi	r24, 0x08	; 8
    10b6:	10 f0       	brcs	.+4      	; 0x10bc <ADC_enuAutoTriggerSource+0xa>
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	08 95       	ret
	{
/* -------------------------------------------------------------------------------------------------------------------------------
	*  Disable ADC Auto trigger source.
*  --------------------------------------------------------------------------------------------------------------------------------*/
		ADCSRA&= ~ (ADC_MASK_BIT<< ADCSRA_ADATE);
    10bc:	35 98       	cbi	0x06, 5	; 6

/* -------------------------------------------------------------------------------------------------------------------------------
	*  Mask ADC Auto trigger source  by zero, to ensure no incorrectness accrues.
*  --------------------------------------------------------------------------------------------------------------------------------*/
		SFIOR &= AUTO_TRIGGER_MASKING_ZERO;
    10be:	80 b7       	in	r24, 0x30	; 48
    10c0:	8f 71       	andi	r24, 0x1F	; 31
    10c2:	80 bf       	out	0x30, r24	; 48

/* -------------------------------------------------------------------------------------------------------------------------------
	*  ADC Auto trigger source selection
*  --------------------------------------------------------------------------------------------------------------------------------*/
		SFIOR|= Copy_u8_tInterruptSource << SFIOR_ADTS0;
    10c4:	90 b7       	in	r25, 0x30	; 48
    10c6:	82 2f       	mov	r24, r18
    10c8:	82 95       	swap	r24
    10ca:	88 0f       	add	r24, r24
    10cc:	80 7e       	andi	r24, 0xE0	; 224
    10ce:	89 2b       	or	r24, r25
    10d0:	80 bf       	out	0x30, r24	; 48

/*----------------------------------------------------------------------------------------------------------------------------------
 	  * In Case of Free running Mode,
 *  ----------------------------------------------------------------------------------------------------------------------------------*/
		if (Copy_u8_tInterruptSource == 0)
    10d2:	22 23       	and	r18, r18
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <ADC_enuAutoTriggerSource+0x26>
		{
			ADCSRA |= (ADC_MASK_BIT<<ADCSRA_ADSC);
    10d6:	36 9a       	sbi	0x06, 6	; 6
		}
/* -------------------------------------------------------------------------------------------------------------------------------
 	 *  ADC Auto triggering Enable
 *  -------------------------------------------------------------------------------------------------------------------------------*/
		ADCSRA|= (ADC_MASK_BIT<< ADCSRA_ADATE);
    10d8:	35 9a       	sbi	0x06, 5	; 6
    10da:	81 e0       	ldi	r24, 0x01	; 1
		Local_enuErrorState = ES_OUT_OF_RANG;
	}

	return Local_enuErrorState;

}
    10dc:	08 95       	ret

000010de <ADC_enuAutoTriggerDisable>:
{
	ES_t Local_enuErrorState = ES_NOK;
/* -------------------------------------------------------------------------------------------------------------------------------
	*  Disable ADC Auto trigger source.
*  --------------------------------------------------------------------------------------------------------------------------------*/
		ADCSRA&= ~ (ADC_MASK_BIT<< ADCSRA_ADATE);
    10de:	35 98       	cbi	0x06, 5	; 6
		Local_enuErrorState =ES_OK;
		return Local_enuErrorState;
	}
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	08 95       	ret

000010e4 <ADC_enuReadDataRegister>:

ES_t ADC_enuReadDataRegister(u16_t * Copy_pu16_tConversionResult)
{
    10e4:	fc 01       	movw	r30, r24

	ES_t Local_enuErrorState = ES_NOK;

#if ADC_ADJUSMENT == LEFT_ADJUSMENT
	*Copy_pu16_tConversionResult= (ADCL>>ADCL_LEFT);
    10e6:	24 b1       	in	r18, 0x04	; 4
	*Copy_pu16_tConversionResult |= ((u16_t)ADCH<<ADCH_LEFT);
    10e8:	85 b1       	in	r24, 0x05	; 5
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	22 95       	swap	r18
    10f6:	26 95       	lsr	r18
    10f8:	26 95       	lsr	r18
    10fa:	23 70       	andi	r18, 0x03	; 3
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	82 2b       	or	r24, r18
    1100:	93 2b       	or	r25, r19
    1102:	91 83       	std	Z+1, r25	; 0x01
    1104:	80 83       	st	Z, r24
#else
#error "ADC ADJUSTMENT SELECTION IS NO CORRECT"
#endif
	return Local_enuErrorState;

}
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	08 95       	ret

0000110a <ADC_enuCallBack>:
ES_t ADC_enuCallBack(volatile void( *Copy_pfunAppFun) (void))
{

	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pfunAppFun != NULL)
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	11 f4       	brne	.+4      	; 0x1112 <ADC_enuCallBack+0x8>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	08 95       	ret
	{
		ADC_pfunISRFun = Copy_pfunAppFun;
    1112:	90 93 d1 02 	sts	0x02D1, r25
    1116:	80 93 d0 02 	sts	0x02D0, r24
    111a:	81 e0       	ldi	r24, 0x01	; 1
		Local_enuErrorState =ES_OK;
	}
	return Local_enuErrorState;

}
    111c:	08 95       	ret

0000111e <ADC_enuPolling>:

ES_t ADC_enuPolling(void)
{

	ES_t Local_enuErrorState = ES_NOK;
	while (!((ADCSRA>>ADCSRA_ADIF)&ADC_MASK_BIT));
    111e:	34 9b       	sbis	0x06, 4	; 6
    1120:	fe cf       	rjmp	.-4      	; 0x111e <ADC_enuPolling>
	{
	ADCSRA |= (ADC_MASK_BIT<<ADCSRA_ADIF); /*Clearing the FLAG by writing logical one*/
    1122:	34 9a       	sbi	0x06, 4	; 6
	Local_enuErrorState =ES_OK;
	}
	return Local_enuErrorState;

}
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	08 95       	ret

00001128 <__vector_16>:

ISR(VECT_ADC)
{
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	2f 93       	push	r18
    1134:	3f 93       	push	r19
    1136:	4f 93       	push	r20
    1138:	5f 93       	push	r21
    113a:	6f 93       	push	r22
    113c:	7f 93       	push	r23
    113e:	8f 93       	push	r24
    1140:	9f 93       	push	r25
    1142:	af 93       	push	r26
    1144:	bf 93       	push	r27
    1146:	ef 93       	push	r30
    1148:	ff 93       	push	r31
	if (ADC_pfunISRFun != NULL)
    114a:	e0 91 d0 02 	lds	r30, 0x02D0
    114e:	f0 91 d1 02 	lds	r31, 0x02D1
    1152:	30 97       	sbiw	r30, 0x00	; 0
    1154:	09 f0       	breq	.+2      	; 0x1158 <__vector_16+0x30>
	{
		ADC_pfunISRFun();
    1156:	09 95       	icall
	}
}
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <TempSensor_RiseFlag>:
 * Local Function:
 * Responsible for rising a local static flag.
 * --------------------------------------------------------------------------------------------------------------------------------------------------------*/
void TempSensor_RiseFlag (void)
{
	TempSensor_u8_tFlag =TEMP_SENSOR_FLAG_RISED;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 d2 02 	sts	0x02D2, r24
}
    1180:	08 95       	ret

00001182 <TempSensor_enuGetTempReading>:
 * --------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------- HERE I WANT THE SYSTEM TO SUM TEN TERMPERATURE READING THEN GET THE AVRADGE TO DISPLAY ----------*/

ES_t TempSensor_enuGetTempReading(u16_t * Copy_pu16_tTempReading)
{
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	1f 93       	push	r17
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <TempSensor_enuGetTempReading+0xc>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	7c 01       	movw	r14, r24
#if  ADC_AUTO_TRIGGERING_SOURCE	== ADC_u8_tSingleConversion
	Local_u8_tErrorState = ADC_enuStartConversion();

#endif

	if (TempSensor_u8_tFlag == TEMP_SENSOR_FLAG_RISED )
    1194:	80 91 d2 02 	lds	r24, 0x02D2
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	11 f0       	breq	.+4      	; 0x11a0 <TempSensor_enuGetTempReading+0x1e>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	1e c0       	rjmp	.+60     	; 0x11dc <TempSensor_enuGetTempReading+0x5a>
	{
		Local_u8_tErrorState = ADC_enuReadDataRegister(&Local_u16_tADC_Reading);
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <ADC_enuReadDataRegister>
    11a8:	18 2f       	mov	r17, r24
		/*----------------------------------- ADC READING CALCULATION -------------------------------*/
		Local_u32_tADC_Voltage = Local_u16_tADC_Reading * ADC_VOLTAGE_EQUATION_STEP;
//		*Copy_pu16_tTempReading = Local_u32_tADC_Voltage/ ADC_READING_DIVISION_FACTOR;
		Local_u16_tOneTempReading = Local_u32_tADC_Voltage/ ADC_READING_DIVISION_FACTOR;
		* Copy_pu16_tTempReading= Local_u16_tOneTempReading;
    11aa:	69 81       	ldd	r22, Y+1	; 0x01
    11ac:	7a 81       	ldd	r23, Y+2	; 0x02
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	22 e1       	ldi	r18, 0x12	; 18
    11b4:	33 e1       	ldi	r19, 0x13	; 19
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__mulsi3>
    11be:	20 e1       	ldi	r18, 0x10	; 16
    11c0:	37 e2       	ldi	r19, 0x27	; 39
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodsi4>
    11ca:	f7 01       	movw	r30, r14
    11cc:	31 83       	std	Z+1, r19	; 0x01
    11ce:	20 83       	st	Z, r18
		TempSensor_u8_tFlag =TEMP_SENSOR_FLAG_NOT_RISED;
    11d0:	10 92 d2 02 	sts	0x02D2, r1
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	11 30       	cpi	r17, 0x01	; 1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <TempSensor_enuGetTempReading+0x5a>
    11da:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_OK;
		//*((volatile u8_t*)(0x34))=Local_u8_tErrorState;
	}
	return Local_enuErrorState;
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	1f 91       	pop	r17
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	08 95       	ret

000011ec <TempSensor_enuInit>:
 * --------------------------------------------------------------------------------------------------------------------------------------------------------*/

/* ------ADDING THE TIMER1 COMPARE MATCH INTERRUPT ON CHANNEL B TO TRIGGER THE ADC 21/3 ------------- */

ES_t TempSensor_enuInit(void)
{
    11ec:	2f 92       	push	r2
    11ee:	3f 92       	push	r3
    11f0:	4f 92       	push	r4
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <TempSensor_enuInit+0x26>
    1212:	0f 92       	push	r0
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
		/*--------------------------------------------------------------------------------------------------------------------------------------------------------
		 *Identify the Temperature sensor pin Direction and value Among the ADC CHANNELS PORT A from PIN 0 to PIN 7
		 *
		 * --------------------------------------------------------------------------------------------------------------------------------------------------------*/

		Local_u32_tErrorState  = DIO_enuSetPinDirection(TEMP_SENSOR_PORT,TEMP_SENSOR_PIN,TEMP_SENSOR_DIRECTION);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
    1222:	28 2e       	mov	r2, r24
    1224:	33 24       	eor	r3, r3
    1226:	44 24       	eor	r4, r4
    1228:	55 24       	eor	r5, r5
		/*There was a bug in the next line. that was solved on 26/2/2022*/
		Local_u32_tErrorState |= (DIO_enuSetPinValue(TEMP_SENSOR_PORT,TEMP_SENSOR_PIN,TEMP_SENSOR_STATE)<<TWO_BITS_SHIFT);
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1234:	e8 2e       	mov	r14, r24

		Local_u32_tErrorState |= (ADC_enuChannelSelect(ADC_CHANNEL_SELECTION)<<FOUR_BITS_SHIFT);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 4c 08 	call	0x1098	; 0x1098 <ADC_enuChannelSelect>
    123c:	68 2e       	mov	r6, r24

		Local_u32_tErrorState |= (		ADC_enuAutoTriggerSource(ADC_AUTO_TRIGGERING_SOURCE)<<SIX_BITS_SHIFT);
	#elif  ADC_AUTO_TRIGGERING_SOURCE== ADC_u8_tTimerInterrupt_CompareMatchB
		/*AS PD4 OC1B is connected to the SSD, then it will be disconnected */
		//DIO_enuSetPinDirection(DIO_u8_tPORT_D, DIO_u8_tPIN4, DIO_u8_tOUTPUT);
		TIMER1_enuInit();
    123e:	0e 94 47 04 	call	0x88e	; 0x88e <TIMER1_enuInit>
		//DIO_enuSetPinDirection(DIO_u8_tPORT_D,DIO_u8_tPIN4,DIO_u8_tOUTPUT);
		TIMER1_enuInterruptEnable();
    1242:	0e 94 77 05 	call	0xaee	; 0xaee <TIMER1_enuInterruptEnable>
		TIMER1_enuStartTimer();
    1246:	0e 94 6f 04 	call	0x8de	; 0x8de <TIMER1_enuStartTimer>
		Local_u32_tErrorState |= (		ADC_enuAutoTriggerSource(ADC_AUTO_TRIGGERING_SOURCE)<<SIX_BITS_SHIFT);
    124a:	85 e0       	ldi	r24, 0x05	; 5
    124c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <ADC_enuAutoTriggerSource>
    1250:	a8 2e       	mov	r10, r24
	#else
		Local_u32_tErrorState |= (		ADC_enuAutoTriggerSource(ADC_AUTO_TRIGGERING_SOURCE)<<TWENTY_BITS_SHIFT);
	#endif
	}

	Local_u32_tErrorState |= (ADC_enuEnableADC_Intrrupt()<<EIGHT_BITS_SHIFT);
    1252:	0e 94 43 08 	call	0x1086	; 0x1086 <ADC_enuEnableADC_Intrrupt>
    1256:	8b 83       	std	Y+3, r24	; 0x03
	Local_u32_tErrorState |= (TIMER1_enuSetCallBackDelay((volatile void (*) (void) ) ADC_enuEnableADC,TIMER_CTC1B_INTERRUPT_INDEX,TIMER1_100_MILE_SECOND) /*ADC_enuEnableADC()*/<<TEN_BITS_SHIFT);
    1258:	8d e3       	ldi	r24, 0x3D	; 61
    125a:	98 e0       	ldi	r25, 0x08	; 8
    125c:	62 e0       	ldi	r22, 0x02	; 2
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	0e 94 85 04 	call	0x90a	; 0x90a <TIMER1_enuSetCallBackDelay>
    1266:	8a 83       	std	Y+2, r24	; 0x02
	Local_u32_tErrorState |= (ADC_enuCallBack( (volatile void (*) (void) ) TempSensor_RiseFlag)<<TWELVE_BITS_SHIFT);
    1268:	8d eb       	ldi	r24, 0xBD	; 189
    126a:	98 e0       	ldi	r25, 0x08	; 8
    126c:	0e 94 85 08 	call	0x110a	; 0x110a <ADC_enuCallBack>
    1270:	89 83       	std	Y+1, r24	; 0x01
	Local_u32_tErrorState |= (ADC_enuInit()<<FOURTEEN_BITS_SHIFT);
    1272:	0e 94 35 08 	call	0x106a	; 0x106a <ADC_enuInit>
		 *
		 * --------------------------------------------------------------------------------------------------------------------------------------------------------*/

		Local_u32_tErrorState  = DIO_enuSetPinDirection(TEMP_SENSOR_PORT,TEMP_SENSOR_PIN,TEMP_SENSOR_DIRECTION);
		/*There was a bug in the next line. that was solved on 26/2/2022*/
		Local_u32_tErrorState |= (DIO_enuSetPinValue(TEMP_SENSOR_PORT,TEMP_SENSOR_PIN,TEMP_SENSOR_STATE)<<TWO_BITS_SHIFT);
    1276:	ff 24       	eor	r15, r15
    1278:	ee 0c       	add	r14, r14
    127a:	ff 1c       	adc	r15, r15
    127c:	ee 0c       	add	r14, r14
    127e:	ff 1c       	adc	r15, r15
    1280:	00 27       	eor	r16, r16
    1282:	f7 fc       	sbrc	r15, 7
    1284:	00 95       	com	r16
    1286:	10 2f       	mov	r17, r16
    1288:	77 24       	eor	r7, r7
    128a:	24 e0       	ldi	r18, 0x04	; 4
    128c:	66 0c       	add	r6, r6
    128e:	77 1c       	adc	r7, r7
    1290:	2a 95       	dec	r18
    1292:	e1 f7       	brne	.-8      	; 0x128c <TempSensor_enuInit+0xa0>
    1294:	88 24       	eor	r8, r8
    1296:	77 fc       	sbrc	r7, 7
    1298:	80 94       	com	r8
    129a:	98 2c       	mov	r9, r8
    129c:	e6 28       	or	r14, r6
    129e:	f7 28       	or	r15, r7
    12a0:	08 29       	or	r16, r8
    12a2:	19 29       	or	r17, r9

		Local_u32_tErrorState |= (ADC_enuChannelSelect(ADC_CHANNEL_SELECTION)<<FOUR_BITS_SHIFT);
    12a4:	e2 28       	or	r14, r2
    12a6:	f3 28       	or	r15, r3
    12a8:	04 29       	or	r16, r4
    12aa:	15 29       	or	r17, r5
		//DIO_enuSetPinDirection(DIO_u8_tPORT_D, DIO_u8_tPIN4, DIO_u8_tOUTPUT);
		TIMER1_enuInit();
		//DIO_enuSetPinDirection(DIO_u8_tPORT_D,DIO_u8_tPIN4,DIO_u8_tOUTPUT);
		TIMER1_enuInterruptEnable();
		TIMER1_enuStartTimer();
		Local_u32_tErrorState |= (		ADC_enuAutoTriggerSource(ADC_AUTO_TRIGGERING_SOURCE)<<SIX_BITS_SHIFT);
    12ac:	bb 24       	eor	r11, r11
    12ae:	96 e0       	ldi	r25, 0x06	; 6
    12b0:	aa 0c       	add	r10, r10
    12b2:	bb 1c       	adc	r11, r11
    12b4:	9a 95       	dec	r25
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <TempSensor_enuInit+0xc4>
    12b8:	cc 24       	eor	r12, r12
    12ba:	b7 fc       	sbrc	r11, 7
    12bc:	c0 94       	com	r12
    12be:	dc 2c       	mov	r13, r12
    12c0:	ea 28       	or	r14, r10
    12c2:	fb 28       	or	r15, r11
    12c4:	0c 29       	or	r16, r12
    12c6:	1d 29       	or	r17, r13
	#else
		Local_u32_tErrorState |= (		ADC_enuAutoTriggerSource(ADC_AUTO_TRIGGERING_SOURCE)<<TWENTY_BITS_SHIFT);
	#endif
	}

	Local_u32_tErrorState |= (ADC_enuEnableADC_Intrrupt()<<EIGHT_BITS_SHIFT);
    12c8:	3b 81       	ldd	r19, Y+3	; 0x03
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	44 27       	eor	r20, r20
    12ce:	37 fd       	sbrc	r19, 7
    12d0:	40 95       	com	r20
    12d2:	54 2f       	mov	r21, r20
    12d4:	e2 2a       	or	r14, r18
    12d6:	f3 2a       	or	r15, r19
    12d8:	04 2b       	or	r16, r20
    12da:	15 2b       	or	r17, r21
	Local_u32_tErrorState |= (TIMER1_enuSetCallBackDelay((volatile void (*) (void) ) ADC_enuEnableADC,TIMER_CTC1B_INTERRUPT_INDEX,TIMER1_100_MILE_SECOND) /*ADC_enuEnableADC()*/<<TEN_BITS_SHIFT);
    12dc:	3a 81       	ldd	r19, Y+2	; 0x02
    12de:	33 0f       	add	r19, r19
    12e0:	33 0f       	add	r19, r19
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	44 27       	eor	r20, r20
    12e6:	37 fd       	sbrc	r19, 7
    12e8:	40 95       	com	r20
    12ea:	54 2f       	mov	r21, r20
    12ec:	e2 2a       	or	r14, r18
    12ee:	f3 2a       	or	r15, r19
    12f0:	04 2b       	or	r16, r20
    12f2:	15 2b       	or	r17, r21
	Local_u32_tErrorState |= (ADC_enuCallBack( (volatile void (*) (void) ) TempSensor_RiseFlag)<<TWELVE_BITS_SHIFT);
    12f4:	39 81       	ldd	r19, Y+1	; 0x01
    12f6:	32 95       	swap	r19
    12f8:	30 7f       	andi	r19, 0xF0	; 240
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	44 27       	eor	r20, r20
    12fe:	37 fd       	sbrc	r19, 7
    1300:	40 95       	com	r20
    1302:	54 2f       	mov	r21, r20
    1304:	e2 2a       	or	r14, r18
    1306:	f3 2a       	or	r15, r19
    1308:	04 2b       	or	r16, r20
    130a:	15 2b       	or	r17, r21
	Local_u32_tErrorState |= (ADC_enuInit()<<FOURTEEN_BITS_SHIFT);
    130c:	38 2f       	mov	r19, r24
    130e:	32 95       	swap	r19
    1310:	33 0f       	add	r19, r19
    1312:	33 0f       	add	r19, r19
    1314:	30 7c       	andi	r19, 0xC0	; 192
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	44 27       	eor	r20, r20
    131a:	37 fd       	sbrc	r19, 7
    131c:	40 95       	com	r20
    131e:	54 2f       	mov	r21, r20
    1320:	e2 2a       	or	r14, r18
    1322:	f3 2a       	or	r15, r19
    1324:	04 2b       	or	r16, r20
    1326:	15 2b       	or	r17, r21
	GIE_enu_Enable();
    1328:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <GIE_enu_Enable>
	//0b00000001;

//	*((volatile u8_t*)(0x31)) = 0b011000000;
	//*((volatile u8_t*)(0x34))=0b11;

	if(Local_u32_tErrorState == TEMPSENSOR_CEACKVALUE_SIXTEEN || Local_u32_tErrorState == TEMPSENSOR_CEACKVALUE_FOURTEEN || Local_u32_tErrorState == TEMPSENSOR_CEACKVALUE_TWENTY)
    132c:	85 e5       	ldi	r24, 0x55	; 85
    132e:	e8 16       	cp	r14, r24
    1330:	85 e5       	ldi	r24, 0x55	; 85
    1332:	f8 06       	cpc	r15, r24
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 07       	cpc	r16, r24
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	18 07       	cpc	r17, r24
    133c:	11 f0       	breq	.+4      	; 0x1342 <TempSensor_enuInit+0x156>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <TempSensor_enuInit+0x158>
    1342:	81 e0       	ldi	r24, 0x01	; 1
		Local_enuErrorState = ES_OK;
//		*((volatile u8_t*)(0x34))=0b01;
	}

	return Local_enuErrorState;
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	af 90       	pop	r10
    135e:	9f 90       	pop	r9
    1360:	8f 90       	pop	r8
    1362:	7f 90       	pop	r7
    1364:	6f 90       	pop	r6
    1366:	5f 90       	pop	r5
    1368:	4f 90       	pop	r4
    136a:	3f 90       	pop	r3
    136c:	2f 90       	pop	r2
    136e:	08 95       	ret

00001370 <SWITCH_enuGetState>:
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}

extern ES_t SWITCH_enuGetState(SW_t * Copy_pAstrSwitchInfo,u8_t * Copy_pu8_tValue)
{
    1370:	fc 01       	movw	r30, r24
    1372:	ab 01       	movw	r20, r22
	ES_t Local_enu_ErrorState = ES_NOK;

	Local_enu_ErrorState = DIO_enuGetPinValue(Copy_pAstrSwitchInfo->SW_Port,Copy_pAstrSwitchInfo->SW_Pin, Copy_pu8_tValue);
    1374:	80 81       	ld	r24, Z
    1376:	61 81       	ldd	r22, Z+1	; 0x01
    1378:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_enuGetPinValue>

	return Local_enu_ErrorState;

}
    137c:	08 95       	ret

0000137e <SWITCH_enuIniti>:
#include"SWITCH_config.h"
#include"SWITCH_private.h"


extern ES_t SWITCH_enuIniti(SW_t * Copy_pAstrSwitchConfig)
{
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	8c 01       	movw	r16, r24
	ES_t Local_enu_ErrorState = ES_NOK;
	u8_t Local_u8_tIterator;
	for(Local_u8_tIterator=0;Local_u8_tIterator<SW_NUM;Local_u8_tIterator++)
	{
		/*Direction*/ DIO_enuSetPinDirection(Copy_pAstrSwitchConfig[Local_u8_tIterator].SW_Port,Copy_pAstrSwitchConfig[Local_u8_tIterator].SW_Pin, DIO_u8_tINPUT);
    1388:	fc 01       	movw	r30, r24
    138a:	80 81       	ld	r24, Z
    138c:	61 81       	ldd	r22, Z+1	; 0x01
    138e:	40 e0       	ldi	r20, 0x00	; 0
    1390:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
		/*SETPIN*/ DIO_enuSetPinValue((Copy_pAstrSwitchConfig+Local_u8_tIterator)->SW_Port,(Copy_pAstrSwitchConfig+Local_u8_tIterator)->SW_Pin,(Copy_pAstrSwitchConfig+Local_u8_tIterator)->SW_State);
    1394:	f8 01       	movw	r30, r16
    1396:	80 81       	ld	r24, Z
    1398:	61 81       	ldd	r22, Z+1	; 0x01
    139a:	42 81       	ldd	r20, Z+2	; 0x02
    139c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
{
	ES_t Local_enu_ErrorState = ES_NOK;
	u8_t Local_u8_tIterator;
	for(Local_u8_tIterator=0;Local_u8_tIterator<SW_NUM;Local_u8_tIterator++)
	{
		/*Direction*/ DIO_enuSetPinDirection(Copy_pAstrSwitchConfig[Local_u8_tIterator].SW_Port,Copy_pAstrSwitchConfig[Local_u8_tIterator].SW_Pin, DIO_u8_tINPUT);
    13a0:	93 e0       	ldi	r25, 0x03	; 3
    13a2:	e9 2e       	mov	r14, r25
    13a4:	f1 2c       	mov	r15, r1
    13a6:	e0 0e       	add	r14, r16
    13a8:	f1 1e       	adc	r15, r17
    13aa:	f8 01       	movw	r30, r16
    13ac:	83 81       	ldd	r24, Z+3	; 0x03
    13ae:	f7 01       	movw	r30, r14
    13b0:	61 81       	ldd	r22, Z+1	; 0x01
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
		/*SETPIN*/ DIO_enuSetPinValue((Copy_pAstrSwitchConfig+Local_u8_tIterator)->SW_Port,(Copy_pAstrSwitchConfig+Local_u8_tIterator)->SW_Pin,(Copy_pAstrSwitchConfig+Local_u8_tIterator)->SW_State);
    13b8:	f8 01       	movw	r30, r16
    13ba:	83 81       	ldd	r24, Z+3	; 0x03
    13bc:	f7 01       	movw	r30, r14
    13be:	61 81       	ldd	r22, Z+1	; 0x01
    13c0:	42 81       	ldd	r20, Z+2	; 0x02
    13c2:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
{
	ES_t Local_enu_ErrorState = ES_NOK;
	u8_t Local_u8_tIterator;
	for(Local_u8_tIterator=0;Local_u8_tIterator<SW_NUM;Local_u8_tIterator++)
	{
		/*Direction*/ DIO_enuSetPinDirection(Copy_pAstrSwitchConfig[Local_u8_tIterator].SW_Port,Copy_pAstrSwitchConfig[Local_u8_tIterator].SW_Pin, DIO_u8_tINPUT);
    13c6:	86 e0       	ldi	r24, 0x06	; 6
    13c8:	e8 2e       	mov	r14, r24
    13ca:	f1 2c       	mov	r15, r1
    13cc:	e0 0e       	add	r14, r16
    13ce:	f1 1e       	adc	r15, r17
    13d0:	f8 01       	movw	r30, r16
    13d2:	86 81       	ldd	r24, Z+6	; 0x06
    13d4:	f7 01       	movw	r30, r14
    13d6:	61 81       	ldd	r22, Z+1	; 0x01
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
		/*SETPIN*/ DIO_enuSetPinValue((Copy_pAstrSwitchConfig+Local_u8_tIterator)->SW_Port,(Copy_pAstrSwitchConfig+Local_u8_tIterator)->SW_Pin,(Copy_pAstrSwitchConfig+Local_u8_tIterator)->SW_State);
    13de:	f8 01       	movw	r30, r16
    13e0:	86 81       	ldd	r24, Z+6	; 0x06
    13e2:	f7 01       	movw	r30, r14
    13e4:	61 81       	ldd	r22, Z+1	; 0x01
    13e6:	42 81       	ldd	r20, Z+2	; 0x02
    13e8:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	}
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	08 95       	ret

000013f8 <SevenSegment_enuStopDisplay>:
	return Local_enuErrorState;
}

/*Will disable it pin by pin*/
ES_t SevenSegment_enuStopDisplay(SSG_t * Copy_pstrSevenSegmentInfo) /*stop display the common on GIO*/
{
    13f8:	2f 92       	push	r2
    13fa:	3f 92       	push	r3
    13fc:	4f 92       	push	r4
    13fe:	5f 92       	push	r5
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <SevenSegment_enuStopDisplay+0x26>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	6c 01       	movw	r12, r24
	ES_t Local_enuErrorState	=ES_NOK;
	u8_t Local_u8_tStopValue=ZeroValue;
	u32_t Local_u32_tErrorState;
	if(Copy_pstrSevenSegmentInfo->SSG_Type == COMMON_CATHOND)
    1424:	fc 01       	movw	r30, r24
    1426:	82 89       	ldd	r24, Z+18	; 0x12
    1428:	8a 30       	cpi	r24, 0x0A	; 10
    142a:	11 f4       	brne	.+4      	; 0x1430 <SevenSegment_enuStopDisplay+0x38>
    142c:	1f ef       	ldi	r17, 0xFF	; 255
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <SevenSegment_enuStopDisplay+0x3a>
    1430:	10 e0       	ldi	r17, 0x00	; 0
	{
		Local_u8_tStopValue= ~Local_u8_tStopValue; //255
	}

	Local_u32_tErrorState = DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinA_Port, Copy_pstrSevenSegmentInfo->SSG_PinA_Pin,((Local_u8_tStopValue>>0)&1));
    1432:	41 2f       	mov	r20, r17
    1434:	41 70       	andi	r20, 0x01	; 1
    1436:	f6 01       	movw	r30, r12
    1438:	80 81       	ld	r24, Z
    143a:	61 81       	ldd	r22, Z+1	; 0x01
    143c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1440:	28 2e       	mov	r2, r24
    1442:	33 24       	eor	r3, r3
    1444:	44 24       	eor	r4, r4
    1446:	55 24       	eor	r5, r5
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinB_Port, Copy_pstrSevenSegmentInfo->SSG_PinB_Pin,((Local_u8_tStopValue>>1)&1))<< TWO_BITS_SHIFT;
    1448:	41 2f       	mov	r20, r17
    144a:	41 95       	neg	r20
    144c:	f6 01       	movw	r30, r12
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	63 81       	ldd	r22, Z+3	; 0x03
    1452:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1456:	e8 2e       	mov	r14, r24
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinC_Port, Copy_pstrSevenSegmentInfo->SSG_PinC_Pin,((Local_u8_tStopValue>>2)&1))<< FOUR_BITS_SHIFT;
    1458:	41 2f       	mov	r20, r17
    145a:	41 95       	neg	r20
    145c:	f6 01       	movw	r30, r12
    145e:	84 81       	ldd	r24, Z+4	; 0x04
    1460:	65 81       	ldd	r22, Z+5	; 0x05
    1462:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1466:	68 2e       	mov	r6, r24
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinD_Port, Copy_pstrSevenSegmentInfo->SSG_PinD_Pin,((Local_u8_tStopValue>>3)&1))<< SIX_BITS_SHIFT;
    1468:	41 2f       	mov	r20, r17
    146a:	41 95       	neg	r20
    146c:	f6 01       	movw	r30, r12
    146e:	86 81       	ldd	r24, Z+6	; 0x06
    1470:	67 81       	ldd	r22, Z+7	; 0x07
    1472:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1476:	a8 2e       	mov	r10, r24
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinE_Port, Copy_pstrSevenSegmentInfo->SSG_PinE_Pin,((Local_u8_tStopValue>>4)&1))<< EIGHT_BITS_SHIFT;
    1478:	41 2f       	mov	r20, r17
    147a:	41 95       	neg	r20
    147c:	f6 01       	movw	r30, r12
    147e:	80 85       	ldd	r24, Z+8	; 0x08
    1480:	61 85       	ldd	r22, Z+9	; 0x09
    1482:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1486:	8a 83       	std	Y+2, r24	; 0x02
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinF_Port, Copy_pstrSevenSegmentInfo->SSG_PinF_Pin,((Local_u8_tStopValue>>5)&1))<< TEN_BITS_SHIFT;
    1488:	41 2f       	mov	r20, r17
    148a:	41 95       	neg	r20
    148c:	f6 01       	movw	r30, r12
    148e:	82 85       	ldd	r24, Z+10	; 0x0a
    1490:	63 85       	ldd	r22, Z+11	; 0x0b
    1492:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1496:	89 83       	std	Y+1, r24	; 0x01
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinG_Port, Copy_pstrSevenSegmentInfo->SSG_PinG_Pin,((Local_u8_tStopValue>>6)&1))<< TWELVE_BITS_SHIFT;
    1498:	11 95       	neg	r17
    149a:	f6 01       	movw	r30, r12
    149c:	84 85       	ldd	r24, Z+12	; 0x0c
    149e:	65 85       	ldd	r22, Z+13	; 0x0d
    14a0:	41 2f       	mov	r20, r17
    14a2:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	{
		Local_u8_tStopValue= ~Local_u8_tStopValue; //255
	}

	Local_u32_tErrorState = DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinA_Port, Copy_pstrSevenSegmentInfo->SSG_PinA_Pin,((Local_u8_tStopValue>>0)&1));
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinB_Port, Copy_pstrSevenSegmentInfo->SSG_PinB_Pin,((Local_u8_tStopValue>>1)&1))<< TWO_BITS_SHIFT;
    14a6:	ff 24       	eor	r15, r15
    14a8:	ee 0c       	add	r14, r14
    14aa:	ff 1c       	adc	r15, r15
    14ac:	ee 0c       	add	r14, r14
    14ae:	ff 1c       	adc	r15, r15
    14b0:	00 27       	eor	r16, r16
    14b2:	f7 fc       	sbrc	r15, 7
    14b4:	00 95       	com	r16
    14b6:	10 2f       	mov	r17, r16
    14b8:	77 24       	eor	r7, r7
    14ba:	24 e0       	ldi	r18, 0x04	; 4
    14bc:	66 0c       	add	r6, r6
    14be:	77 1c       	adc	r7, r7
    14c0:	2a 95       	dec	r18
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <SevenSegment_enuStopDisplay+0xc4>
    14c4:	88 24       	eor	r8, r8
    14c6:	77 fc       	sbrc	r7, 7
    14c8:	80 94       	com	r8
    14ca:	98 2c       	mov	r9, r8
    14cc:	e6 28       	or	r14, r6
    14ce:	f7 28       	or	r15, r7
    14d0:	08 29       	or	r16, r8
    14d2:	19 29       	or	r17, r9
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinC_Port, Copy_pstrSevenSegmentInfo->SSG_PinC_Pin,((Local_u8_tStopValue>>2)&1))<< FOUR_BITS_SHIFT;
    14d4:	e2 28       	or	r14, r2
    14d6:	f3 28       	or	r15, r3
    14d8:	04 29       	or	r16, r4
    14da:	15 29       	or	r17, r5
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinD_Port, Copy_pstrSevenSegmentInfo->SSG_PinD_Pin,((Local_u8_tStopValue>>3)&1))<< SIX_BITS_SHIFT;
    14dc:	bb 24       	eor	r11, r11
    14de:	96 e0       	ldi	r25, 0x06	; 6
    14e0:	aa 0c       	add	r10, r10
    14e2:	bb 1c       	adc	r11, r11
    14e4:	9a 95       	dec	r25
    14e6:	e1 f7       	brne	.-8      	; 0x14e0 <SevenSegment_enuStopDisplay+0xe8>
    14e8:	cc 24       	eor	r12, r12
    14ea:	b7 fc       	sbrc	r11, 7
    14ec:	c0 94       	com	r12
    14ee:	dc 2c       	mov	r13, r12
    14f0:	ea 28       	or	r14, r10
    14f2:	fb 28       	or	r15, r11
    14f4:	0c 29       	or	r16, r12
    14f6:	1d 29       	or	r17, r13
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinE_Port, Copy_pstrSevenSegmentInfo->SSG_PinE_Pin,((Local_u8_tStopValue>>4)&1))<< EIGHT_BITS_SHIFT;
    14f8:	3a 81       	ldd	r19, Y+2	; 0x02
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	44 27       	eor	r20, r20
    14fe:	37 fd       	sbrc	r19, 7
    1500:	40 95       	com	r20
    1502:	54 2f       	mov	r21, r20
    1504:	e2 2a       	or	r14, r18
    1506:	f3 2a       	or	r15, r19
    1508:	04 2b       	or	r16, r20
    150a:	15 2b       	or	r17, r21
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinF_Port, Copy_pstrSevenSegmentInfo->SSG_PinF_Pin,((Local_u8_tStopValue>>5)&1))<< TEN_BITS_SHIFT;
    150c:	39 81       	ldd	r19, Y+1	; 0x01
    150e:	33 0f       	add	r19, r19
    1510:	33 0f       	add	r19, r19
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	44 27       	eor	r20, r20
    1516:	37 fd       	sbrc	r19, 7
    1518:	40 95       	com	r20
    151a:	54 2f       	mov	r21, r20
    151c:	e2 2a       	or	r14, r18
    151e:	f3 2a       	or	r15, r19
    1520:	04 2b       	or	r16, r20
    1522:	15 2b       	or	r17, r21
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	38 2f       	mov	r19, r24
    1528:	32 95       	swap	r19
    152a:	30 7f       	andi	r19, 0xF0	; 240
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	44 27       	eor	r20, r20
    1530:	37 fd       	sbrc	r19, 7
    1532:	40 95       	com	r20
    1534:	54 2f       	mov	r21, r20
    1536:	e2 2a       	or	r14, r18
    1538:	f3 2a       	or	r15, r19
    153a:	04 2b       	or	r16, r20
    153c:	15 2b       	or	r17, r21
    153e:	f5 e5       	ldi	r31, 0x55	; 85
    1540:	ef 16       	cp	r14, r31
    1542:	f5 e1       	ldi	r31, 0x15	; 21
    1544:	ff 06       	cpc	r15, r31
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	0f 07       	cpc	r16, r31
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	1f 07       	cpc	r17, r31
    154e:	09 f4       	brne	.+2      	; 0x1552 <SevenSegment_enuStopDisplay+0x15a>
    1550:	91 e0       	ldi	r25, 0x01	; 1
	{
	Local_enuErrorState=ES_OK;
	}

	return Local_enuErrorState;
}
    1552:	89 2f       	mov	r24, r25
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	5f 90       	pop	r5
    1576:	4f 90       	pop	r4
    1578:	3f 90       	pop	r3
    157a:	2f 90       	pop	r2
    157c:	08 95       	ret

0000157e <SevenSegment_enuDisableDot>:


	return Local_enuErrorState;
}
ES_t SevenSegment_enuDisableDot(SSG_t * Copy_pstrSevenSegmentInfo)
{
    157e:	fc 01       	movw	r30, r24
	ES_t Local_enuErrorState	=ES_NOK;

	if(Copy_pstrSevenSegmentInfo->SSG_Dot_Port != NOT_CONNECTED
    1580:	90 89       	ldd	r25, Z+16	; 0x10
    1582:	9e 31       	cpi	r25, 0x1E	; 30
    1584:	89 f0       	breq	.+34     	; 0x15a8 <SevenSegment_enuDisableDot+0x2a>
    1586:	61 89       	ldd	r22, Z+17	; 0x11
    1588:	6e 31       	cpi	r22, 0x1E	; 30
    158a:	71 f0       	breq	.+28     	; 0x15a8 <SevenSegment_enuDisableDot+0x2a>
			&& Copy_pstrSevenSegmentInfo->SSG_Dot_Pin !=NOT_CONNECTED)
	{
		if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_ANODE)
    158c:	82 89       	ldd	r24, Z+18	; 0x12
    158e:	84 31       	cpi	r24, 0x14	; 20
    1590:	19 f4       	brne	.+6      	; 0x1598 <SevenSegment_enuDisableDot+0x1a>
		{
			DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_Dot_Port, Copy_pstrSevenSegmentInfo->SSG_Dot_Pin,DIO_u8_tHIGH);
    1592:	89 2f       	mov	r24, r25
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <SevenSegment_enuDisableDot+0x22>
		}
		else if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_CATHOND)
    1598:	8a 30       	cpi	r24, 0x0A	; 10
    159a:	21 f4       	brne	.+8      	; 0x15a4 <SevenSegment_enuDisableDot+0x26>
		{
			DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_Dot_Port, Copy_pstrSevenSegmentInfo->SSG_Dot_Pin,DIO_u8_tLOW);
    159c:	89 2f       	mov	r24, r25
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	08 95       	ret
    15a8:	80 e0       	ldi	r24, 0x00	; 0
	}



	return Local_enuErrorState;
}
    15aa:	08 95       	ret

000015ac <SevenSegment_enuEnableDot>:

	return Local_enuErrorState;
}

ES_t SevenSegment_enuEnableDot(SSG_t * Copy_pstrSevenSegmentInfo)
{
    15ac:	fc 01       	movw	r30, r24
	ES_t Local_enuErrorState	=ES_NOK;

	if(Copy_pstrSevenSegmentInfo->SSG_Dot_Port != NOT_CONNECTED
    15ae:	90 89       	ldd	r25, Z+16	; 0x10
    15b0:	9e 31       	cpi	r25, 0x1E	; 30
    15b2:	89 f0       	breq	.+34     	; 0x15d6 <SevenSegment_enuEnableDot+0x2a>
    15b4:	61 89       	ldd	r22, Z+17	; 0x11
    15b6:	6e 31       	cpi	r22, 0x1E	; 30
    15b8:	71 f0       	breq	.+28     	; 0x15d6 <SevenSegment_enuEnableDot+0x2a>
			&& Copy_pstrSevenSegmentInfo->SSG_Dot_Pin !=NOT_CONNECTED)
	{
		if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_ANODE)
    15ba:	82 89       	ldd	r24, Z+18	; 0x12
    15bc:	84 31       	cpi	r24, 0x14	; 20
    15be:	19 f4       	brne	.+6      	; 0x15c6 <SevenSegment_enuEnableDot+0x1a>
		{
			DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_Dot_Port, Copy_pstrSevenSegmentInfo->SSG_Dot_Pin,DIO_u8_tLOW);
    15c0:	89 2f       	mov	r24, r25
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <SevenSegment_enuEnableDot+0x22>
		}
		else if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_CATHOND)
    15c6:	8a 30       	cpi	r24, 0x0A	; 10
    15c8:	21 f4       	brne	.+8      	; 0x15d2 <SevenSegment_enuEnableDot+0x26>
		{
			DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_Dot_Port, Copy_pstrSevenSegmentInfo->SSG_Dot_Pin,DIO_u8_tHIGH);
    15ca:	89 2f       	mov	r24, r25
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	08 95       	ret
    15d6:	80 e0       	ldi	r24, 0x00	; 0
		Local_enuErrorState=ES_OK;
	}


	return Local_enuErrorState;
}
    15d8:	08 95       	ret

000015da <SevenSegment_enuDisableCommon>:

	return Local_enuErrorState;
}

ES_t SevenSegment_enuDisableCommon(SSG_t * Copy_pstrSevenSegmentInfo)
{
    15da:	fc 01       	movw	r30, r24
	ES_t Local_enuErrorState	=ES_NOK;

	if(Copy_pstrSevenSegmentInfo->SSG_Common_Port != NOT_CONNECTED
    15dc:	96 85       	ldd	r25, Z+14	; 0x0e
    15de:	9e 31       	cpi	r25, 0x1E	; 30
    15e0:	89 f0       	breq	.+34     	; 0x1604 <SevenSegment_enuDisableCommon+0x2a>
    15e2:	67 85       	ldd	r22, Z+15	; 0x0f
    15e4:	6e 31       	cpi	r22, 0x1E	; 30
    15e6:	71 f0       	breq	.+28     	; 0x1604 <SevenSegment_enuDisableCommon+0x2a>
			&& Copy_pstrSevenSegmentInfo->SSG_Common_Pin !=NOT_CONNECTED)
	{
		if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_ANODE)
    15e8:	82 89       	ldd	r24, Z+18	; 0x12
    15ea:	84 31       	cpi	r24, 0x14	; 20
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <SevenSegment_enuDisableCommon+0x1a>
		{
			DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_Common_Port, Copy_pstrSevenSegmentInfo->SSG_Common_Pin,DIO_u8_tLOW);
    15ee:	89 2f       	mov	r24, r25
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <SevenSegment_enuDisableCommon+0x22>
		}
		else if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_CATHOND)
    15f4:	8a 30       	cpi	r24, 0x0A	; 10
    15f6:	21 f4       	brne	.+8      	; 0x1600 <SevenSegment_enuDisableCommon+0x26>
		{
			DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_Common_Port, Copy_pstrSevenSegmentInfo->SSG_Common_Pin,DIO_u8_tHIGH);
    15f8:	89 2f       	mov	r24, r25
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	08 95       	ret
    1604:	80 e0       	ldi	r24, 0x00	; 0
		Local_enuErrorState=ES_OK;
	}


	return Local_enuErrorState;
}
    1606:	08 95       	ret

00001608 <SevenSegment_enuEnableCommon>:

	return Local_enuErrorState;
}

ES_t SevenSegment_enuEnableCommon(SSG_t * Copy_pstrSevenSegmentInfo)
{
    1608:	fc 01       	movw	r30, r24
	ES_t Local_enuErrorState	=ES_NOK;
if(Copy_pstrSevenSegmentInfo->SSG_Common_Port != NOT_CONNECTED
    160a:	96 85       	ldd	r25, Z+14	; 0x0e
    160c:	9e 31       	cpi	r25, 0x1E	; 30
    160e:	89 f0       	breq	.+34     	; 0x1632 <SevenSegment_enuEnableCommon+0x2a>
    1610:	67 85       	ldd	r22, Z+15	; 0x0f
    1612:	6e 31       	cpi	r22, 0x1E	; 30
    1614:	71 f0       	breq	.+28     	; 0x1632 <SevenSegment_enuEnableCommon+0x2a>
		&& Copy_pstrSevenSegmentInfo->SSG_Common_Pin !=NOT_CONNECTED)
{
	if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_ANODE)
    1616:	82 89       	ldd	r24, Z+18	; 0x12
    1618:	84 31       	cpi	r24, 0x14	; 20
    161a:	19 f4       	brne	.+6      	; 0x1622 <SevenSegment_enuEnableCommon+0x1a>
	{
		DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_Common_Port, Copy_pstrSevenSegmentInfo->SSG_Common_Pin,DIO_u8_tHIGH);
    161c:	89 2f       	mov	r24, r25
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	04 c0       	rjmp	.+8      	; 0x162a <SevenSegment_enuEnableCommon+0x22>
	}
	else if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_CATHOND)
    1622:	8a 30       	cpi	r24, 0x0A	; 10
    1624:	21 f4       	brne	.+8      	; 0x162e <SevenSegment_enuEnableCommon+0x26>
	{
		DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_Common_Port, Copy_pstrSevenSegmentInfo->SSG_Common_Pin,DIO_u8_tLOW);
    1626:	89 2f       	mov	r24, r25
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	08 95       	ret
    1632:	80 e0       	ldi	r24, 0x00	; 0




	return Local_enuErrorState;
}
    1634:	08 95       	ret

00001636 <SevenSegment_enuDisplayNumber>:
return Local_enuErrorState;

}//end of initialization

ES_t SevenSegment_enuDisplayNumber(SSG_t * Copy_pstrSevenSegmentInfo ,u8_t Copy_u8_tNumber)
{
    1636:	2f 92       	push	r2
    1638:	3f 92       	push	r3
    163a:	4f 92       	push	r4
    163c:	5f 92       	push	r5
    163e:	6f 92       	push	r6
    1640:	7f 92       	push	r7
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <SevenSegment_enuDisplayNumber+0x26>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	6c 01       	movw	r12, r24
    1662:	16 2f       	mov	r17, r22
	ES_t Local_enuErrorState	=ES_NOK;
	u32_t Local_u32_tErrorState;

		/*Boundary check*/

	if(Copy_pstrSevenSegmentInfo->SSG_Type == COMMON_ANODE)
    1664:	fc 01       	movw	r30, r24
    1666:	82 89       	ldd	r24, Z+18	; 0x12
    1668:	84 31       	cpi	r24, 0x14	; 20
    166a:	39 f4       	brne	.+14     	; 0x167a <SevenSegment_enuDisplayNumber+0x44>
	{
		/*Representation of the sent number*/
		Copy_u8_tNumber= ~ SEVENSEGMENT_Au8_tCOMMON_CATHODE_VALUES[Copy_u8_tNumber];
    166c:	e6 2f       	mov	r30, r22
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	e4 57       	subi	r30, 0x74	; 116
    1672:	fd 4f       	sbci	r31, 0xFD	; 253
    1674:	10 81       	ld	r17, Z
    1676:	10 95       	com	r17
    1678:	07 c0       	rjmp	.+14     	; 0x1688 <SevenSegment_enuDisplayNumber+0x52>
	}
	else if (Copy_pstrSevenSegmentInfo->SSG_Type == COMMON_CATHOND)
    167a:	8a 30       	cpi	r24, 0x0A	; 10
    167c:	29 f4       	brne	.+10     	; 0x1688 <SevenSegment_enuDisplayNumber+0x52>
	{
		/*Representation of the sent number*/
			Copy_u8_tNumber=  SEVENSEGMENT_Au8_tCOMMON_CATHODE_VALUES[Copy_u8_tNumber];
    167e:	e6 2f       	mov	r30, r22
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	e4 57       	subi	r30, 0x74	; 116
    1684:	fd 4f       	sbci	r31, 0xFD	; 253
    1686:	10 81       	ld	r17, Z
	}

	Local_u32_tErrorState = DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinA_Port, Copy_pstrSevenSegmentInfo->SSG_PinA_Pin, (( Copy_u8_tNumber>>0)&1) );
    1688:	41 2f       	mov	r20, r17
    168a:	41 70       	andi	r20, 0x01	; 1
    168c:	f6 01       	movw	r30, r12
    168e:	80 81       	ld	r24, Z
    1690:	61 81       	ldd	r22, Z+1	; 0x01
    1692:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1696:	28 2e       	mov	r2, r24
    1698:	33 24       	eor	r3, r3
    169a:	44 24       	eor	r4, r4
    169c:	55 24       	eor	r5, r5
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinB_Port, Copy_pstrSevenSegmentInfo->SSG_PinB_Pin,((Copy_u8_tNumber>>1)&1))<< TWO_BITS_SHIFT;
    169e:	41 2f       	mov	r20, r17
    16a0:	46 95       	lsr	r20
    16a2:	41 70       	andi	r20, 0x01	; 1
    16a4:	f6 01       	movw	r30, r12
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	63 81       	ldd	r22, Z+3	; 0x03
    16aa:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    16ae:	e8 2e       	mov	r14, r24
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinC_Port, Copy_pstrSevenSegmentInfo->SSG_PinC_Pin,((Copy_u8_tNumber>>2)&1))<< FOUR_BITS_SHIFT;
    16b0:	41 2f       	mov	r20, r17
    16b2:	46 95       	lsr	r20
    16b4:	46 95       	lsr	r20
    16b6:	41 70       	andi	r20, 0x01	; 1
    16b8:	f6 01       	movw	r30, r12
    16ba:	84 81       	ldd	r24, Z+4	; 0x04
    16bc:	65 81       	ldd	r22, Z+5	; 0x05
    16be:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    16c2:	68 2e       	mov	r6, r24
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinD_Port, Copy_pstrSevenSegmentInfo->SSG_PinD_Pin,((Copy_u8_tNumber>>3)&1))<< SIX_BITS_SHIFT;
    16c4:	41 2f       	mov	r20, r17
    16c6:	46 95       	lsr	r20
    16c8:	46 95       	lsr	r20
    16ca:	46 95       	lsr	r20
    16cc:	41 70       	andi	r20, 0x01	; 1
    16ce:	f6 01       	movw	r30, r12
    16d0:	86 81       	ldd	r24, Z+6	; 0x06
    16d2:	67 81       	ldd	r22, Z+7	; 0x07
    16d4:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    16d8:	a8 2e       	mov	r10, r24
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinE_Port, Copy_pstrSevenSegmentInfo->SSG_PinE_Pin,((Copy_u8_tNumber>>4)&1))<< EIGHT_BITS_SHIFT;
    16da:	41 2f       	mov	r20, r17
    16dc:	42 95       	swap	r20
    16de:	41 70       	andi	r20, 0x01	; 1
    16e0:	f6 01       	movw	r30, r12
    16e2:	80 85       	ldd	r24, Z+8	; 0x08
    16e4:	61 85       	ldd	r22, Z+9	; 0x09
    16e6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    16ea:	8a 83       	std	Y+2, r24	; 0x02
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinF_Port, Copy_pstrSevenSegmentInfo->SSG_PinF_Pin,((Copy_u8_tNumber>>5)&1))<< TEN_BITS_SHIFT;
    16ec:	12 95       	swap	r17
    16ee:	16 95       	lsr	r17
    16f0:	17 70       	andi	r17, 0x07	; 7
    16f2:	41 2f       	mov	r20, r17
    16f4:	41 70       	andi	r20, 0x01	; 1
    16f6:	f6 01       	movw	r30, r12
    16f8:	82 85       	ldd	r24, Z+10	; 0x0a
    16fa:	63 85       	ldd	r22, Z+11	; 0x0b
    16fc:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1700:	89 83       	std	Y+1, r24	; 0x01
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinG_Port, Copy_pstrSevenSegmentInfo->SSG_PinG_Pin,((Copy_u8_tNumber>>6)&1))<< TWELVE_BITS_SHIFT;
    1702:	16 95       	lsr	r17
    1704:	11 70       	andi	r17, 0x01	; 1
    1706:	f6 01       	movw	r30, r12
    1708:	84 85       	ldd	r24, Z+12	; 0x0c
    170a:	65 85       	ldd	r22, Z+13	; 0x0d
    170c:	41 2f       	mov	r20, r17
    170e:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
		/*Representation of the sent number*/
			Copy_u8_tNumber=  SEVENSEGMENT_Au8_tCOMMON_CATHODE_VALUES[Copy_u8_tNumber];
	}

	Local_u32_tErrorState = DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinA_Port, Copy_pstrSevenSegmentInfo->SSG_PinA_Pin, (( Copy_u8_tNumber>>0)&1) );
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinB_Port, Copy_pstrSevenSegmentInfo->SSG_PinB_Pin,((Copy_u8_tNumber>>1)&1))<< TWO_BITS_SHIFT;
    1712:	ff 24       	eor	r15, r15
    1714:	ee 0c       	add	r14, r14
    1716:	ff 1c       	adc	r15, r15
    1718:	ee 0c       	add	r14, r14
    171a:	ff 1c       	adc	r15, r15
    171c:	00 27       	eor	r16, r16
    171e:	f7 fc       	sbrc	r15, 7
    1720:	00 95       	com	r16
    1722:	10 2f       	mov	r17, r16
    1724:	77 24       	eor	r7, r7
    1726:	54 e0       	ldi	r21, 0x04	; 4
    1728:	66 0c       	add	r6, r6
    172a:	77 1c       	adc	r7, r7
    172c:	5a 95       	dec	r21
    172e:	e1 f7       	brne	.-8      	; 0x1728 <SevenSegment_enuDisplayNumber+0xf2>
    1730:	88 24       	eor	r8, r8
    1732:	77 fc       	sbrc	r7, 7
    1734:	80 94       	com	r8
    1736:	98 2c       	mov	r9, r8
    1738:	e6 28       	or	r14, r6
    173a:	f7 28       	or	r15, r7
    173c:	08 29       	or	r16, r8
    173e:	19 29       	or	r17, r9
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinC_Port, Copy_pstrSevenSegmentInfo->SSG_PinC_Pin,((Copy_u8_tNumber>>2)&1))<< FOUR_BITS_SHIFT;
    1740:	e2 28       	or	r14, r2
    1742:	f3 28       	or	r15, r3
    1744:	04 29       	or	r16, r4
    1746:	15 29       	or	r17, r5
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinD_Port, Copy_pstrSevenSegmentInfo->SSG_PinD_Pin,((Copy_u8_tNumber>>3)&1))<< SIX_BITS_SHIFT;
    1748:	bb 24       	eor	r11, r11
    174a:	46 e0       	ldi	r20, 0x06	; 6
    174c:	aa 0c       	add	r10, r10
    174e:	bb 1c       	adc	r11, r11
    1750:	4a 95       	dec	r20
    1752:	e1 f7       	brne	.-8      	; 0x174c <SevenSegment_enuDisplayNumber+0x116>
    1754:	cc 24       	eor	r12, r12
    1756:	b7 fc       	sbrc	r11, 7
    1758:	c0 94       	com	r12
    175a:	dc 2c       	mov	r13, r12
    175c:	ea 28       	or	r14, r10
    175e:	fb 28       	or	r15, r11
    1760:	0c 29       	or	r16, r12
    1762:	1d 29       	or	r17, r13
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinE_Port, Copy_pstrSevenSegmentInfo->SSG_PinE_Pin,((Copy_u8_tNumber>>4)&1))<< EIGHT_BITS_SHIFT;
    1764:	3a 81       	ldd	r19, Y+2	; 0x02
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	44 27       	eor	r20, r20
    176a:	37 fd       	sbrc	r19, 7
    176c:	40 95       	com	r20
    176e:	54 2f       	mov	r21, r20
    1770:	e2 2a       	or	r14, r18
    1772:	f3 2a       	or	r15, r19
    1774:	04 2b       	or	r16, r20
    1776:	15 2b       	or	r17, r21
	Local_u32_tErrorState|= DIO_enuSetPinValue(Copy_pstrSevenSegmentInfo->SSG_PinF_Port, Copy_pstrSevenSegmentInfo->SSG_PinF_Pin,((Copy_u8_tNumber>>5)&1))<< TEN_BITS_SHIFT;
    1778:	39 81       	ldd	r19, Y+1	; 0x01
    177a:	33 0f       	add	r19, r19
    177c:	33 0f       	add	r19, r19
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	44 27       	eor	r20, r20
    1782:	37 fd       	sbrc	r19, 7
    1784:	40 95       	com	r20
    1786:	54 2f       	mov	r21, r20
    1788:	e2 2a       	or	r14, r18
    178a:	f3 2a       	or	r15, r19
    178c:	04 2b       	or	r16, r20
    178e:	15 2b       	or	r17, r21
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	38 2f       	mov	r19, r24
    1794:	32 95       	swap	r19
    1796:	30 7f       	andi	r19, 0xF0	; 240
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	44 27       	eor	r20, r20
    179c:	37 fd       	sbrc	r19, 7
    179e:	40 95       	com	r20
    17a0:	54 2f       	mov	r21, r20
    17a2:	e2 2a       	or	r14, r18
    17a4:	f3 2a       	or	r15, r19
    17a6:	04 2b       	or	r16, r20
    17a8:	15 2b       	or	r17, r21
    17aa:	f5 e5       	ldi	r31, 0x55	; 85
    17ac:	ef 16       	cp	r14, r31
    17ae:	f5 e1       	ldi	r31, 0x15	; 21
    17b0:	ff 06       	cpc	r15, r31
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	0f 07       	cpc	r16, r31
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	1f 07       	cpc	r17, r31
    17ba:	09 f4       	brne	.+2      	; 0x17be <SevenSegment_enuDisplayNumber+0x188>
    17bc:	91 e0       	ldi	r25, 0x01	; 1
	{
	Local_enuErrorState=ES_OK;
	}

	return Local_enuErrorState;
}
    17be:	89 2f       	mov	r24, r25
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	9f 90       	pop	r9
    17da:	8f 90       	pop	r8
    17dc:	7f 90       	pop	r7
    17de:	6f 90       	pop	r6
    17e0:	5f 90       	pop	r5
    17e2:	4f 90       	pop	r4
    17e4:	3f 90       	pop	r3
    17e6:	2f 90       	pop	r2
    17e8:	08 95       	ret

000017ea <SevenSegment_Write>:




void SevenSegment_Write(u8_t Copy_u8_tNumber)
{
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	d8 2e       	mov	r13, r24
	u8_t units,tens;
					units = Copy_u8_tNumber % 10;
					tens = (int) Copy_u8_tNumber / 10;

					SevenSegment_enuDisableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[0]);
    17f6:	76 e6       	ldi	r23, 0x66	; 102
    17f8:	e7 2e       	mov	r14, r23
    17fa:	72 e0       	ldi	r23, 0x02	; 2
    17fc:	f7 2e       	mov	r15, r23
    17fe:	c7 01       	movw	r24, r14
    1800:	0e 94 ed 0a 	call	0x15da	; 0x15da <SevenSegment_enuDisableCommon>
					SevenSegment_enuDisplayNumber(&SEVENSEGMENT_AstrSevenSegmentConfig[1],units);
    1804:	87 01       	movw	r16, r14
    1806:	0d 5e       	subi	r16, 0xED	; 237
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	8d 2d       	mov	r24, r13
    180c:	6a e0       	ldi	r22, 0x0A	; 10
    180e:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodqi4>
    1812:	69 2f       	mov	r22, r25
    1814:	c8 01       	movw	r24, r16
    1816:	0e 94 1b 0b 	call	0x1636	; 0x1636 <SevenSegment_enuDisplayNumber>
					SevenSegment_enuEnableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[1]);
    181a:	c8 01       	movw	r24, r16
    181c:	0e 94 04 0b 	call	0x1608	; 0x1608 <SevenSegment_enuEnableCommon>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1820:	80 e7       	ldi	r24, 0x70	; 112
    1822:	90 e3       	ldi	r25, 0x30	; 48
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <SevenSegment_Write+0x3a>


					_delay_ms(3.1);

					SevenSegment_enuDisableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[1]);
    1828:	c8 01       	movw	r24, r16
    182a:	0e 94 ed 0a 	call	0x15da	; 0x15da <SevenSegment_enuDisableCommon>
					SevenSegment_enuDisplayNumber(&SEVENSEGMENT_AstrSevenSegmentConfig[0],tens);
    182e:	8d 2d       	mov	r24, r13
    1830:	6a e0       	ldi	r22, 0x0A	; 10
    1832:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodqi4>
    1836:	68 2f       	mov	r22, r24
    1838:	c7 01       	movw	r24, r14
    183a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <SevenSegment_enuDisplayNumber>
					SevenSegment_enuEnableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[0]);
    183e:	c7 01       	movw	r24, r14
    1840:	0e 94 04 0b 	call	0x1608	; 0x1608 <SevenSegment_enuEnableCommon>
    1844:	80 e3       	ldi	r24, 0x30	; 48
    1846:	91 e1       	ldi	r25, 0x11	; 17
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <SevenSegment_Write+0x5e>
					_delay_ms(1.1);
}
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	08 95       	ret

00001858 <SevenSegment_enuToggleDisplay>:
	}

	return Local_enuErrorState;
}
ES_t SevenSegment_enuToggleDisplay(SSG_t * Copy_pstrSevenSegmentInfo)
{
    1858:	fc 01       	movw	r30, r24
	ES_t Local_enuErrorState	=ES_NOK;
if(Copy_pstrSevenSegmentInfo->SSG_Common_Port != NOT_CONNECTED
    185a:	96 85       	ldd	r25, Z+14	; 0x0e
    185c:	9e 31       	cpi	r25, 0x1E	; 30
    185e:	69 f0       	breq	.+26     	; 0x187a <SevenSegment_enuToggleDisplay+0x22>
    1860:	67 85       	ldd	r22, Z+15	; 0x0f
    1862:	6e 31       	cpi	r22, 0x1E	; 30
    1864:	51 f0       	breq	.+20     	; 0x187a <SevenSegment_enuToggleDisplay+0x22>
		&& Copy_pstrSevenSegmentInfo->SSG_Common_Pin !=NOT_CONNECTED)
{
	if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_ANODE)
    1866:	82 89       	ldd	r24, Z+18	; 0x12
    1868:	84 31       	cpi	r24, 0x14	; 20
    186a:	11 f0       	breq	.+4      	; 0x1870 <SevenSegment_enuToggleDisplay+0x18>
	{

		DIO_enuTogPinValue(Copy_pstrSevenSegmentInfo->SSG_Common_Port, Copy_pstrSevenSegmentInfo->SSG_Common_Pin);
	}
	else if(Copy_pstrSevenSegmentInfo->SSG_Type ==COMMON_CATHOND)
    186c:	8a 30       	cpi	r24, 0x0A	; 10
    186e:	19 f4       	brne	.+6      	; 0x1876 <SevenSegment_enuToggleDisplay+0x1e>
	{
		DIO_enuTogPinValue(Copy_pstrSevenSegmentInfo->SSG_Common_Port, Copy_pstrSevenSegmentInfo->SSG_Common_Pin);
    1870:	89 2f       	mov	r24, r25
    1872:	0e 94 f9 07 	call	0xff2	; 0xff2 <DIO_enuTogPinValue>
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	08 95       	ret
    187a:	80 e0       	ldi	r24, 0x00	; 0




	return Local_enuErrorState;
}
    187c:	08 95       	ret

0000187e <SevenSegment_enuInit>:

extern SSG_t SEVENSEGMENT_AstrSevenSegmentConfig [SSG_NUMBER];


ES_t SevenSegment_enuInit(SSG_t * Copy_pAstrSevenSegmentConf)
{
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	ec 01       	movw	r28, r24
    188c:	ff 24       	eor	r15, r15

u8_t Local_u8_tIterator;
u32_t Local_u32_tErrorState;
for(Local_u8_tIterator=0;Local_u8_tIterator<SSG_NUMBER;Local_u8_tIterator++)
{
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinA_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinA_Pin,DIO_u8_tOUTPUT);
    188e:	88 81       	ld	r24, Y
    1890:	69 81       	ldd	r22, Y+1	; 0x01
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinB_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinB_Pin,DIO_u8_tOUTPUT)<< TWO_BITS_SHIFT;
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	6b 81       	ldd	r22, Y+3	; 0x03
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinC_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinC_Pin,DIO_u8_tOUTPUT)<< FOUR_BITS_SHIFT;
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	6d 81       	ldd	r22, Y+5	; 0x05
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinD_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinD_Pin,DIO_u8_tOUTPUT)<< SIX_BITS_SHIFT;
    18ac:	8e 81       	ldd	r24, Y+6	; 0x06
    18ae:	6f 81       	ldd	r22, Y+7	; 0x07
    18b0:	41 e0       	ldi	r20, 0x01	; 1
    18b2:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinE_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinE_Pin,DIO_u8_tOUTPUT)<< EIGHT_BITS_SHIFT;
    18b6:	88 85       	ldd	r24, Y+8	; 0x08
    18b8:	69 85       	ldd	r22, Y+9	; 0x09
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinF_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinF_Pin,DIO_u8_tOUTPUT)<< TEN_BITS_SHIFT;
    18c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c4:	41 e0       	ldi	r20, 0x01	; 1
    18c6:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinG_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinG_Pin,DIO_u8_tOUTPUT)<< TWELVE_BITS_SHIFT;
    18ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    18cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
    18d4:	e8 2e       	mov	r14, r24

	//COMMENT AND DOT PIN IF CONNECTED set direction output

	if(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_Common_Port != NOT_CONNECTED &&Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_Common_Pin != NOT_CONNECTED )
    18d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    18d8:	8e 31       	cpi	r24, 0x1E	; 30
    18da:	31 f0       	breq	.+12     	; 0x18e8 <SevenSegment_enuInit+0x6a>
    18dc:	6f 85       	ldd	r22, Y+15	; 0x0f
    18de:	6e 31       	cpi	r22, 0x1E	; 30
    18e0:	19 f0       	breq	.+6      	; 0x18e8 <SevenSegment_enuInit+0x6a>
	{
		DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_Common_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_Common_Pin,DIO_u8_tOUTPUT);
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>

	}

	if(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_Dot_Port != NOT_CONNECTED &&Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_Dot_Pin != NOT_CONNECTED )
    18e8:	88 89       	ldd	r24, Y+16	; 0x10
    18ea:	8e 31       	cpi	r24, 0x1E	; 30
    18ec:	31 f0       	breq	.+12     	; 0x18fa <SevenSegment_enuInit+0x7c>
    18ee:	69 89       	ldd	r22, Y+17	; 0x11
    18f0:	6e 31       	cpi	r22, 0x1E	; 30
    18f2:	19 f0       	breq	.+6      	; 0x18fa <SevenSegment_enuInit+0x7c>
		{
			DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_Dot_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_Dot_Pin,DIO_u8_tOUTPUT);
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinB_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinB_Pin,DIO_u8_tOUTPUT)<< TWO_BITS_SHIFT;
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinC_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinC_Pin,DIO_u8_tOUTPUT)<< FOUR_BITS_SHIFT;
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinD_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinD_Pin,DIO_u8_tOUTPUT)<< SIX_BITS_SHIFT;
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinE_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinE_Pin,DIO_u8_tOUTPUT)<< EIGHT_BITS_SHIFT;
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinF_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinF_Pin,DIO_u8_tOUTPUT)<< TEN_BITS_SHIFT;
	Local_u32_tErrorState=	DIO_enuSetPinDirection(Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinG_Port,Copy_pAstrSevenSegmentConf[Local_u8_tIterator].SSG_PinG_Pin,DIO_u8_tOUTPUT)<< TWELVE_BITS_SHIFT;
    18fa:	1e 2d       	mov	r17, r14
    18fc:	12 95       	swap	r17
    18fe:	10 7f       	andi	r17, 0xF0	; 240
    1900:	00 e0       	ldi	r16, 0x00	; 0
    1902:	98 01       	movw	r18, r16
    1904:	44 27       	eor	r20, r20
    1906:	37 fd       	sbrc	r19, 7
    1908:	40 95       	com	r20
    190a:	54 2f       	mov	r21, r20
{
ES_t Local_enuErrorState	=ES_NOK;

u8_t Local_u8_tIterator;
u32_t Local_u32_tErrorState;
for(Local_u8_tIterator=0;Local_u8_tIterator<SSG_NUMBER;Local_u8_tIterator++)
    190c:	f3 94       	inc	r15
    190e:	63 96       	adiw	r28, 0x13	; 19
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	f8 16       	cp	r15, r24
    1914:	09 f0       	breq	.+2      	; 0x1918 <SevenSegment_enuInit+0x9a>
    1916:	bb cf       	rjmp	.-138    	; 0x188e <SevenSegment_enuInit+0x10>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	25 55       	subi	r18, 0x55	; 85
    191c:	35 41       	sbci	r19, 0x15	; 21
    191e:	40 40       	sbci	r20, 0x00	; 0
    1920:	50 40       	sbci	r21, 0x00	; 0
    1922:	09 f4       	brne	.+2      	; 0x1926 <SevenSegment_enuInit+0xa8>
    1924:	81 e0       	ldi	r24, 0x01	; 1
{
Local_enuErrorState=ES_OK;
}
return Local_enuErrorState;

}//end of initialization
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	08 95       	ret

00001934 <LED_SYSTEM_enuLedStop>:
ES_t LED_SYSTEM_enuLedStop(void)

{
	ES_t Local_enu_ErrorState = ES_NOK;
	/* SETPIN */
	DIO_enuSetPinValue(LED_SYSTEM_PORT,LED_SYSTEM_PIN,DIO_u8_tLOW);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	Local_enu_ErrorState = ES_OK;
return Local_enu_ErrorState;
}
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	08 95       	ret

00001942 <LED_SYSTEM_enuLedStart>:
}
ES_t LED_SYSTEM_enuLedStart(void)
{
	ES_t Local_enu_ErrorState = ES_NOK;
	/* SETPIN */
	DIO_enuSetPinValue(LED_SYSTEM_PORT,LED_SYSTEM_PIN,DIO_u8_tHIGH);
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	08 95       	ret

00001950 <LED_SYSTEM_enuLedToggle>:
ES_t LED_SYSTEM_enuLedToggle(void)
{
	ES_t Local_enu_ErrorState = ES_NOK;
	/* SETPIN */
	DIO_enuTogPinValue(LED_SYSTEM_PORT,LED_SYSTEM_PIN);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	0e 94 f9 07 	call	0xff2	; 0xff2 <DIO_enuTogPinValue>
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;

}
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	08 95       	ret

0000195c <LED_SYSTEM_enuIniti>:
{
	ES_t Local_enu_ErrorState = ES_NOK;

		/* LED SYSTEM */
		/* Direction */
	DIO_enuSetPinDirection(LED_SYSTEM_PORT,LED_SYSTEM_PIN, DIO_u8_tOUTPUT);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
		/* SETPIN */
	DIO_enuSetPinValue(LED_SYSTEM_PORT,LED_SYSTEM_PIN,DIO_u8_tLOW);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>


	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	08 95       	ret

00001974 <LCD_enuWriteNLatch>:
	return Local_enu_ErrorState;
}


static ES_t LCD_enuWriteNLatch(u8_t Copy_u8_tData) /*Static local function to make falling edge high then low*/
{
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	0f 92       	push	r0
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	08 2f       	mov	r16, r24
	ES_t Local_enu_ErrorState = ES_NOK;


DIO_enuSetPinValue(RW_PORT,RW_PIN, DIO_u8_tLOW ); /*Write data*/
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	62 e0       	ldi	r22, 0x02	; 2
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8_tLOW);/*Enable is low*/
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

/***********************DATA WRITE******************/
/*******************Condition for function set step*********/
if (Copy_u8_tData == FUNCTION_SET_FOUR_BIT)
    199a:	08 32       	cpi	r16, 0x28	; 40
    199c:	79 f5       	brne	.+94     	; 0x19fc <LCD_enuWriteNLatch+0x88>
{
	u8_t Local_u8_tRS_Value;
	DIO_enuGetPinValue(RS_PORT,RS_PIN,&Local_u8_tRS_Value);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	63 e0       	ldi	r22, 0x03	; 3
    19a2:	ae 01       	movw	r20, r28
    19a4:	4f 5f       	subi	r20, 0xFF	; 255
    19a6:	5f 4f       	sbci	r21, 0xFF	; 255
    19a8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_enuGetPinValue>

if(Local_u8_tRS_Value==DIO_u8_tLOW)
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	88 23       	and	r24, r24
    19b0:	29 f5       	brne	.+74     	; 0x19fc <LCD_enuWriteNLatch+0x88>
{
	/*******************************Pins from 7 to 4*********************/

	DIO_enuSetPinValue(DB7_PORT, DB7_PIN,((Copy_u8_tData>>BIT_NUMBER_7)&BIT_MASK_MOVE));
    19b2:	67 e0       	ldi	r22, 0x07	; 7
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(DB6_PORT, DB6_PIN,((Copy_u8_tData>>BIT_NUMBER_6)&BIT_MASK_MOVE));
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	66 e0       	ldi	r22, 0x06	; 6
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(DB5_PORT, DB5_PIN,((Copy_u8_tData>>BIT_NUMBER_5)&BIT_MASK_MOVE));
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	65 e0       	ldi	r22, 0x05	; 5
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(DB4_PORT, DB4_PIN,((Copy_u8_tData>>BIT_NUMBER_4)&BIT_MASK_MOVE));
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	64 e0       	ldi	r22, 0x04	; 4
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

	/*******************************LATCH *************************/
	DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8_tHIGH);/*Enable is HIGH*/
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    19e2:	80 e2       	ldi	r24, 0x20	; 32
    19e4:	9e e4       	ldi	r25, 0x4E	; 78
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_enuWriteNLatch+0x72>
	_delay_ms(LATCH_DELAY);
	//_delay_us();
	DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8_tLOW);/*Enable is low*/
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    19f4:	80 e2       	ldi	r24, 0x20	; 32
    19f6:	9e e4       	ldi	r25, 0x4E	; 78
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_enuWriteNLatch+0x84>
#if LCD_MODE == FOUR_BIT
/***************************************************************/

/*******************************Pins from 7 to 4*********************/

DIO_enuSetPinValue(DB7_PORT, DB7_PIN, ((Copy_u8_tData>>BIT_NUMBER_7)&BIT_MASK_MOVE));
    19fc:	40 2f       	mov	r20, r16
    19fe:	44 1f       	adc	r20, r20
    1a00:	44 27       	eor	r20, r20
    1a02:	44 1f       	adc	r20, r20
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	67 e0       	ldi	r22, 0x07	; 7
    1a08:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
DIO_enuSetPinValue(DB6_PORT, DB6_PIN, ((Copy_u8_tData>>BIT_NUMBER_6)&BIT_MASK_MOVE));
    1a0c:	40 2f       	mov	r20, r16
    1a0e:	42 95       	swap	r20
    1a10:	46 95       	lsr	r20
    1a12:	46 95       	lsr	r20
    1a14:	41 70       	andi	r20, 0x01	; 1
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	66 e0       	ldi	r22, 0x06	; 6
    1a1a:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
DIO_enuSetPinValue(DB5_PORT, DB5_PIN, ((Copy_u8_tData>>BIT_NUMBER_5)&BIT_MASK_MOVE));
    1a1e:	40 2f       	mov	r20, r16
    1a20:	42 95       	swap	r20
    1a22:	46 95       	lsr	r20
    1a24:	41 70       	andi	r20, 0x01	; 1
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	65 e0       	ldi	r22, 0x05	; 5
    1a2a:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
DIO_enuSetPinValue(DB4_PORT, DB4_PIN, ((Copy_u8_tData>>BIT_NUMBER_4)&BIT_MASK_MOVE));
    1a2e:	40 2f       	mov	r20, r16
    1a30:	42 95       	swap	r20
    1a32:	41 70       	andi	r20, 0x01	; 1
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	64 e0       	ldi	r22, 0x04	; 4
    1a38:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

/*******************************LATCH *************************/
DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8_tHIGH);/*Enable is HIGH*/
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1a46:	80 e2       	ldi	r24, 0x20	; 32
    1a48:	e8 2e       	mov	r14, r24
    1a4a:	8e e4       	ldi	r24, 0x4E	; 78
    1a4c:	f8 2e       	mov	r15, r24
    1a4e:	c7 01       	movw	r24, r14
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_enuWriteNLatch+0xdc>
_delay_ms(LATCH_DELAY);
//_delay_us();
DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8_tLOW);/*Enable is low*/
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1a5e:	c7 01       	movw	r24, r14
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <LCD_enuWriteNLatch+0xec>
_delay_ms(LATCH_DELAY);

/*******************************LATCH  END*********************/
/*******************************Pins from 3 to 0*********************/

DIO_enuSetPinValue(DB7_PORT, DB7_PIN,((Copy_u8_tData>>BIT_NUMBER_3)&BIT_MASK_MOVE));
    1a64:	40 2f       	mov	r20, r16
    1a66:	46 95       	lsr	r20
    1a68:	46 95       	lsr	r20
    1a6a:	46 95       	lsr	r20
    1a6c:	41 70       	andi	r20, 0x01	; 1
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	67 e0       	ldi	r22, 0x07	; 7
    1a72:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
DIO_enuSetPinValue(DB6_PORT, DB6_PIN,((Copy_u8_tData>>BIT_NUMBER_2)&BIT_MASK_MOVE));
    1a76:	40 2f       	mov	r20, r16
    1a78:	46 95       	lsr	r20
    1a7a:	46 95       	lsr	r20
    1a7c:	41 70       	andi	r20, 0x01	; 1
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	66 e0       	ldi	r22, 0x06	; 6
    1a82:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
DIO_enuSetPinValue(DB5_PORT, DB5_PIN,((Copy_u8_tData>>BIT_NUMBER_1)&BIT_MASK_MOVE));
    1a86:	40 2f       	mov	r20, r16
    1a88:	46 95       	lsr	r20
    1a8a:	41 70       	andi	r20, 0x01	; 1
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	65 e0       	ldi	r22, 0x05	; 5
    1a90:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
DIO_enuSetPinValue(DB4_PORT, DB4_PIN,((Copy_u8_tData>>BIT_NUMBER_0)&BIT_MASK_MOVE));
    1a94:	01 70       	andi	r16, 0x01	; 1
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	64 e0       	ldi	r22, 0x04	; 4
    1a9a:	40 2f       	mov	r20, r16
    1a9c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

/*******************************LATCH *************************/
DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8_tHIGH);/*Enable is HIGH*/
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1aaa:	c7 01       	movw	r24, r14
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_enuWriteNLatch+0x138>
_delay_ms(LATCH_DELAY);
//_delay_us();
DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8_tLOW);/*Enable is low*/
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1aba:	c7 01       	movw	r24, r14
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <LCD_enuWriteNLatch+0x148>
#error "LCD_MODE you have entered is wrong, please correct it."
#endif


return Local_enu_ErrorState;
}
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	0f 91       	pop	r16
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	08 95       	ret

00001ad0 <LCD_enuClearDisplay>:
	}

	return Local_enuErrorState;
}
ES_t LCD_enuClearDisplay( void )
{
    1ad0:	1f 93       	push	r17

	ES_t Local_enuerrorStates = ES_NOK;

		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8_tLOW);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	63 e0       	ldi	r22, 0x03	; 3
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
    1adc:	18 2f       	mov	r17, r24
		LCD_enuWriteNLatch(0x01);
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>

	return Local_enuerrorStates;

}
    1ae4:	81 2f       	mov	r24, r17
    1ae6:	1f 91       	pop	r17
    1ae8:	08 95       	ret

00001aea <LCD_enuDisplayIntegerNum>:

return Local_enu_ErrorState;
}

ES_t LCD_enuDisplayIntegerNum(s32_t Copy_s32Num)
{
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	7b 01       	movw	r14, r22
    1afe:	8c 01       	movw	r16, r24
	ES_t Local_enuErrorState = ES_NOK;

	s32_t Local_s32Reverse=0;
	u8_t Local_u8Remainder=0 , Local_u8NumDigit=0;

	if(Copy_s32Num <0)
    1b00:	97 ff       	sbrs	r25, 7
    1b02:	10 c0       	rjmp	.+32     	; 0x1b24 <LCD_enuDisplayIntegerNum+0x3a>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8_tHIGH);
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	63 e0       	ldi	r22, 0x03	; 3
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch('-');
    1b0e:	8d e2       	ldi	r24, 0x2D	; 45
    1b10:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
		Copy_s32Num *= -1 ;
    1b14:	10 95       	com	r17
    1b16:	00 95       	com	r16
    1b18:	f0 94       	com	r15
    1b1a:	e0 94       	com	r14
    1b1c:	e1 1c       	adc	r14, r1
    1b1e:	f1 1c       	adc	r15, r1
    1b20:	01 1d       	adc	r16, r1
    1b22:	11 1d       	adc	r17, r1
    1b24:	99 24       	eor	r9, r9
    1b26:	aa 24       	eor	r10, r10
    1b28:	bb 24       	eor	r11, r11
    1b2a:	65 01       	movw	r12, r10
    1b2c:	1f c0       	rjmp	.+62     	; 0x1b6c <LCD_enuDisplayIntegerNum+0x82>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    1b2e:	c6 01       	movw	r24, r12
    1b30:	b5 01       	movw	r22, r10
    1b32:	2a e0       	ldi	r18, 0x0A	; 10
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__mulsi3>
    1b3e:	5b 01       	movw	r10, r22
    1b40:	6c 01       	movw	r12, r24
    1b42:	c8 01       	movw	r24, r16
    1b44:	b7 01       	movw	r22, r14
    1b46:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodsi4>
    1b4a:	a6 0e       	add	r10, r22
    1b4c:	b1 1c       	adc	r11, r1
    1b4e:	c1 1c       	adc	r12, r1
    1b50:	d1 1c       	adc	r13, r1
		Copy_s32Num /=10;
    1b52:	c8 01       	movw	r24, r16
    1b54:	b7 01       	movw	r22, r14
    1b56:	2a e0       	ldi	r18, 0x0A	; 10
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodsi4>
    1b62:	c9 01       	movw	r24, r18
    1b64:	da 01       	movw	r26, r20
    1b66:	7c 01       	movw	r14, r24
    1b68:	8d 01       	movw	r16, r26
		Local_u8NumDigit ++;
    1b6a:	93 94       	inc	r9
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8_tHIGH);
		LCD_enuWriteNLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    1b6c:	e1 14       	cp	r14, r1
    1b6e:	f1 04       	cpc	r15, r1
    1b70:	01 05       	cpc	r16, r1
    1b72:	11 05       	cpc	r17, r1
    1b74:	e1 f6       	brne	.-72     	; 0x1b2e <LCD_enuDisplayIntegerNum+0x44>
    1b76:	1e c0       	rjmp	.+60     	; 0x1bb4 <LCD_enuDisplayIntegerNum+0xca>
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8_tHIGH);
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	63 e0       	ldi	r22, 0x03	; 3
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(Local_u8Remainder + '0');
    1b82:	c6 01       	movw	r24, r12
    1b84:	b5 01       	movw	r22, r10
    1b86:	2a e0       	ldi	r18, 0x0A	; 10
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodsi4>
    1b92:	86 2f       	mov	r24, r22
    1b94:	80 5d       	subi	r24, 0xD0	; 208
    1b96:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
		Local_s32Reverse /= 10;
    1b9a:	c6 01       	movw	r24, r12
    1b9c:	b5 01       	movw	r22, r10
    1b9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodsi4>
    1baa:	c9 01       	movw	r24, r18
    1bac:	da 01       	movw	r26, r20
    1bae:	5c 01       	movw	r10, r24
    1bb0:	6d 01       	movw	r12, r26
		Local_u8NumDigit --;
    1bb2:	9a 94       	dec	r9
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    1bb4:	99 20       	and	r9, r9
    1bb6:	01 f7       	brne	.-64     	; 0x1b78 <LCD_enuDisplayIntegerNum+0x8e>
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
}
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	bf 90       	pop	r11
    1bc8:	af 90       	pop	r10
    1bca:	9f 90       	pop	r9
    1bcc:	08 95       	ret

00001bce <LCD_enuSendpcString>:


}

ES_t LCD_enuSendpcString(const char * Copy_pcString)
{
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	ec 01       	movw	r28, r24
    1bd4:	08 c0       	rjmp	.+16     	; 0x1be6 <LCD_enuSendpcString+0x18>
	ES_t Local_enu_ErrorState = ES_NOK;
	while(*Copy_pcString) //true value as false =0 =='/0' Null character.
	{
		DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tHIGH ); /*Send String data*/
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	63 e0       	ldi	r22, 0x03	; 3
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(* Copy_pcString++); //Adding incrementing operation.
    1be0:	89 91       	ld	r24, Y+
    1be2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
}

ES_t LCD_enuSendpcString(const char * Copy_pcString)
{
	ES_t Local_enu_ErrorState = ES_NOK;
	while(*Copy_pcString) //true value as false =0 =='/0' Null character.
    1be6:	88 81       	ld	r24, Y
    1be8:	88 23       	and	r24, r24
    1bea:	a9 f7       	brne	.-22     	; 0x1bd6 <LCD_enuSendpcString+0x8>
	{
		DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tHIGH ); /*Send String data*/
		LCD_enuWriteNLatch(* Copy_pcString++); //Adding incrementing operation.
	}
	return Local_enu_ErrorState;
}
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	08 95       	ret

00001bf2 <LCD_enuSendCustomCharacter>:
}



ES_t LCD_enuSendCustomCharacter(u8_t * Copy_u8_tPArrCustomCharacter, u8_t Copy_u8_tPatternsNumber,u8_t Copy_u8_tXPosition,u8_t Copy_u8_tYPosition,u8_t Copy_u8_tDirection)
{
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	6c 01       	movw	r12, r24
    1c04:	e6 2e       	mov	r14, r22
    1c06:	14 2f       	mov	r17, r20
    1c08:	f2 2e       	mov	r15, r18
	ES_t Local_enu_ErrorState = ES_NOK;

	/****************DRAW THE CUSTOM CHARACTOR ON CGRAM*****************/

	u8_t Local_u8_tIterator;
	DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tLOW); /*Send command*/
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	63 e0       	ldi	r22, 0x03	; 3
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

	LCD_enuWriteNLatch(FIRST_CGRAM_PATTERN); //First Pattern location in CGRAM
    1c14:	80 e4       	ldi	r24, 0x40	; 64
    1c16:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
    1c1a:	c0 e0       	ldi	r28, 0x00	; 0
    1c1c:	d0 e0       	ldi	r29, 0x00	; 0

			//LCD_enuWriteNLatch((*Copy_u8_tPArrCustomCharacter+Local_u8_tIterator));

			//LCD_enuWriteNLatch((u8_t*)(Copy_u8_tPArrCustomCharacter+Local_u8_tIterator));

		DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tHIGH); /*Send data*/
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	63 e0       	ldi	r22, 0x03	; 3
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

			LCD_enuWriteNLatch(*(Copy_u8_tPArrCustomCharacter+Local_u8_tIterator));
    1c28:	f6 01       	movw	r30, r12
    1c2a:	ec 0f       	add	r30, r28
    1c2c:	fd 1f       	adc	r31, r29
    1c2e:	80 81       	ld	r24, Z
    1c30:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
    1c34:	21 96       	adiw	r28, 0x01	; 1
	DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tLOW); /*Send command*/

	LCD_enuWriteNLatch(FIRST_CGRAM_PATTERN); //First Pattern location in CGRAM


	for(Local_u8_tIterator=0; Local_u8_tIterator<PATTERMS_NUMBER_BITS;Local_u8_tIterator++)
    1c36:	c0 34       	cpi	r28, 0x40	; 64
    1c38:	d1 05       	cpc	r29, r1
    1c3a:	89 f7       	brne	.-30     	; 0x1c1e <LCD_enuSendCustomCharacter+0x2c>
			LCD_enuWriteNLatch(*(Copy_u8_tPArrCustomCharacter+Local_u8_tIterator));

	}
/*****************************POSITION & DIRECTION****************************/

	DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tLOW); /*Send command*/
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	63 e0       	ldi	r22, 0x03	; 3
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

	if(Copy_u8_tXPosition>1||Copy_u8_tYPosition>16||Copy_u8_tPatternsNumber>8||Copy_u8_tDirection>1)
    1c46:	12 30       	cpi	r17, 0x02	; 2
    1c48:	18 f5       	brcc	.+70     	; 0x1c90 <LCD_enuSendCustomCharacter+0x9e>
    1c4a:	80 e1       	ldi	r24, 0x10	; 16
    1c4c:	8f 15       	cp	r24, r15
    1c4e:	00 f1       	brcs	.+64     	; 0x1c90 <LCD_enuSendCustomCharacter+0x9e>
    1c50:	88 e0       	ldi	r24, 0x08	; 8
    1c52:	8e 15       	cp	r24, r14
    1c54:	e8 f0       	brcs	.+58     	; 0x1c90 <LCD_enuSendCustomCharacter+0x9e>
    1c56:	02 30       	cpi	r16, 0x02	; 2
    1c58:	d8 f4       	brcc	.+54     	; 0x1c90 <LCD_enuSendCustomCharacter+0x9e>
	{
		Local_enu_ErrorState=ES_NOK;
	}
	else
	{
		if (Copy_u8_tDirection) /*****************WRITING FROM LIFT TO RIGHT*******************/
    1c5a:	00 23       	and	r16, r16
    1c5c:	59 f0       	breq	.+22     	; 0x1c74 <LCD_enuSendCustomCharacter+0x82>
		{
			switch  (Copy_u8_tXPosition)
    1c5e:	11 23       	and	r17, r17
    1c60:	19 f0       	breq	.+6      	; 0x1c68 <LCD_enuSendCustomCharacter+0x76>
    1c62:	11 30       	cpi	r17, 0x01	; 1
    1c64:	a9 f4       	brne	.+42     	; 0x1c90 <LCD_enuSendCustomCharacter+0x9e>
    1c66:	03 c0       	rjmp	.+6      	; 0x1c6e <LCD_enuSendCustomCharacter+0x7c>
			{
			case 0 : LCD_enuWriteNLatch(FIRST_LINE+Copy_u8_tYPosition);
    1c68:	8f 2d       	mov	r24, r15
    1c6a:	80 58       	subi	r24, 0x80	; 128
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_enuSendCustomCharacter+0x9a>
			break;

			case 1: LCD_enuWriteNLatch(SECOND_LINE+Copy_u8_tYPosition);
    1c6e:	8f 2d       	mov	r24, r15
    1c70:	80 54       	subi	r24, 0x40	; 64
    1c72:	0c c0       	rjmp	.+24     	; 0x1c8c <LCD_enuSendCustomCharacter+0x9a>
			break;
			}
		}
		else /*****************WRITING FROM RIGHT TO LIFT*******************/
		{
			switch  (Copy_u8_tXPosition)
    1c74:	11 23       	and	r17, r17
    1c76:	19 f0       	breq	.+6      	; 0x1c7e <LCD_enuSendCustomCharacter+0x8c>
    1c78:	11 30       	cpi	r17, 0x01	; 1
    1c7a:	51 f4       	brne	.+20     	; 0x1c90 <LCD_enuSendCustomCharacter+0x9e>
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <LCD_enuSendCustomCharacter+0x90>
			{
			case 0 : LCD_enuWriteNLatch(END_FIRST_LINE-Copy_u8_tYPosition);
    1c7e:	8f e8       	ldi	r24, 0x8F	; 143
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <LCD_enuSendCustomCharacter+0x92>
						LCD_enuWriteNLatch(RIGHT_TO_LEFT_DIRECTION);

			break;

			case 1: LCD_enuWriteNLatch(END_SECOND_LINE-Copy_u8_tYPosition);
    1c82:	8f ec       	ldi	r24, 0xCF	; 207
    1c84:	8f 19       	sub	r24, r15
    1c86:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
						LCD_enuWriteNLatch(RIGHT_TO_LEFT_DIRECTION);
    1c8a:	84 e0       	ldi	r24, 0x04	; 4
    1c8c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
			}
		}
	}

	/*******************************PRINTING THE CUSTOM CHARACTERS*********************************/
	DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tHIGH ); /*Send data*/
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	63 e0       	ldi	r22, 0x03	; 3
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8_tPatternsNumber);
    1c9a:	8e 2d       	mov	r24, r14
    1c9c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>


	return Local_enu_ErrorState;


}
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	df 90       	pop	r13
    1cb0:	cf 90       	pop	r12
    1cb2:	08 95       	ret

00001cb4 <LCD_enuSendPosition>:
	return Local_enu_ErrorState;
}


ES_t LCD_enuSendPosition(u8_t Copy_u8_tLine, u8_t Copy_u8_tPosition)
{
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	18 2f       	mov	r17, r24
    1cba:	06 2f       	mov	r16, r22
	//u8_t Copy_u8_tIterator;
	ES_t Local_enu_ErrorState = ES_NOK;
	DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tLOW); /*Send command*/
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	63 e0       	ldi	r22, 0x03	; 3
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	switch (Copy_u8_tLine)
    1cc6:	11 23       	and	r17, r17
    1cc8:	19 f0       	breq	.+6      	; 0x1cd0 <LCD_enuSendPosition+0x1c>
    1cca:	11 30       	cpi	r17, 0x01	; 1
    1ccc:	41 f4       	brne	.+16     	; 0x1cde <LCD_enuSendPosition+0x2a>
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <LCD_enuSendPosition+0x22>
	{
	case 0 : LCD_enuWriteNLatch(FIRST_LINE+Copy_u8_tPosition);
    1cd0:	80 2f       	mov	r24, r16
    1cd2:	80 58       	subi	r24, 0x80	; 128
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <LCD_enuSendPosition+0x26>
	break;

	case 1: LCD_enuWriteNLatch(SECOND_LINE+Copy_u8_tPosition);
    1cd6:	80 2f       	mov	r24, r16
    1cd8:	80 54       	subi	r24, 0x40	; 64
    1cda:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
		LCD_enuWriteNLatch(DISPLAY_POSITION_SHIFT);

	}
*/
	return Local_enu_ErrorState;
}
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	08 95       	ret

00001ce6 <LCD_enuSendCommand>:

	return Local_enu_ErrorState;
}

ES_t LCD_enuSendCommand(u8_t Copy_u8_tCommand)
{
    1ce6:	1f 93       	push	r17
    1ce8:	18 2f       	mov	r17, r24
	ES_t Local_enu_ErrorState = ES_NOK;
	DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tLOW); /*Send command*/
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	63 e0       	ldi	r22, 0x03	; 3
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

	LCD_enuWriteNLatch(Copy_u8_tCommand);
    1cf4:	81 2f       	mov	r24, r17
    1cf6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>

	return Local_enu_ErrorState;
}
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	1f 91       	pop	r17
    1cfe:	08 95       	ret

00001d00 <LCD_enuSendData>:
Local_enu_ErrorState= ES_OK;
return Local_enu_ErrorState;
}

ES_t LCD_enuSendData(u8_t Copy_u8_tData)
{
    1d00:	1f 93       	push	r17
    1d02:	18 2f       	mov	r17, r24
	ES_t Local_enu_ErrorState = ES_NOK;

	DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tHIGH ); /*Send data*/
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	63 e0       	ldi	r22, 0x03	; 3
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8_tData);
    1d0e:	81 2f       	mov	r24, r17
    1d10:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>


	return Local_enu_ErrorState;
}
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	1f 91       	pop	r17
    1d18:	08 95       	ret

00001d1a <LCD_enuInit>:

ES_t LCD_enuInit(void)
{
ES_t Local_enu_ErrorState = ES_NOK;

DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8_tOUTPUT);
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	63 e0       	ldi	r22, 0x03	; 3
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8_tOUTPUT);
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	62 e0       	ldi	r22, 0x02	; 2
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8_tOUTPUT);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>

DIO_enuSetPinDirection(DB7_PORT,DB7_PIN,DIO_u8_tOUTPUT);
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	67 e0       	ldi	r22, 0x07	; 7
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(DB6_PORT,DB6_PIN,DIO_u8_tOUTPUT);
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	66 e0       	ldi	r22, 0x06	; 6
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(DB5_PORT,DB5_PIN,DIO_u8_tOUTPUT);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	65 e0       	ldi	r22, 0x05	; 5
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(DB4_PORT,DB4_PIN,DIO_u8_tOUTPUT);
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	64 e0       	ldi	r22, 0x04	; 4
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
    1d60:	8c e2       	ldi	r24, 0x2C	; 44
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	20 e9       	ldi	r18, 0x90	; 144
    1d66:	31 e0       	ldi	r19, 0x01	; 1
    1d68:	f9 01       	movw	r30, r18
    1d6a:	31 97       	sbiw	r30, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_enuInit+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	d9 f7       	brne	.-10     	; 0x1d68 <LCD_enuInit+0x4e>

_delay_ms(POWER_ON_DELAY);
#if LCD_MODE ==FOUR_BIT
DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tLOW); /*Send command*/
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	63 e0       	ldi	r22, 0x03	; 3
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
LCD_enuWriteNLatch(FUNCTION_SET_FOUR_BIT);
    1d7c:	88 e2       	ldi	r24, 0x28	; 40
    1d7e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
    1d82:	86 e8       	ldi	r24, 0x86	; 134
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	20 e9       	ldi	r18, 0x90	; 144
    1d88:	31 e0       	ldi	r19, 0x01	; 1
    1d8a:	f9 01       	movw	r30, r18
    1d8c:	31 97       	sbiw	r30, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <LCD_enuInit+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d92:	d9 f7       	brne	.-10     	; 0x1d8a <LCD_enuInit+0x70>
    1d94:	86 e8       	ldi	r24, 0x86	; 134
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	20 e9       	ldi	r18, 0x90	; 144
    1d9a:	31 e0       	ldi	r19, 0x01	; 1
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	31 97       	sbiw	r30, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_enuInit+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	d9 f7       	brne	.-10     	; 0x1d9c <LCD_enuInit+0x82>
LCD_enuWriteNLatch(FUNCTION_SET_EIGHT_BIT);
_delay_ms(FUNCTION_SET_DELAY);
#endif

_delay_ms(FUNCTION_SET_DELAY);
DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tLOW); /*Send command*/
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	63 e0       	ldi	r22, 0x03	; 3
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
LCD_enuWriteNLatch(DISPLAY_ON_OFF_BIT);
    1db0:	8f e0       	ldi	r24, 0x0F	; 15
    1db2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
    1db6:	86 e8       	ldi	r24, 0x86	; 134
    1db8:	91 e0       	ldi	r25, 0x01	; 1
    1dba:	20 e9       	ldi	r18, 0x90	; 144
    1dbc:	31 e0       	ldi	r19, 0x01	; 1
    1dbe:	f9 01       	movw	r30, r18
    1dc0:	31 97       	sbiw	r30, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_enuInit+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc6:	d9 f7       	brne	.-10     	; 0x1dbe <LCD_enuInit+0xa4>

_delay_ms(FUNCTION_SET_DELAY);
DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tLOW); /*Send command*/
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	63 e0       	ldi	r22, 0x03	; 3
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
LCD_enuWriteNLatch(DISPLAY_CLEAR_BIT);
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
    1dd8:	88 ee       	ldi	r24, 0xE8	; 232
    1dda:	97 e1       	ldi	r25, 0x17	; 23
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_enuInit+0xc2>

_delay_ms(DISPLAY_CLEAR_DELAY);
DIO_enuSetPinValue(RS_PORT,RS_PIN, DIO_u8_tLOW); /*Send command*/
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	63 e0       	ldi	r22, 0x03	; 3
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
LCD_enuWriteNLatch(ENTERY_MODE_BIT);
    1dea:	86 e0       	ldi	r24, 0x06	; 6
    1dec:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_enuWriteNLatch>
Local_enu_ErrorState= ES_OK;
return Local_enu_ErrorState;
}
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	08 95       	ret

00001df4 <HEAT_COOL_ELEMENTS_enuCoolerStop>:
}
ES_t HEAT_COOL_ELEMENTS_enuCoolerStop(void)
{
	ES_t Local_enu_ErrorState = ES_NOK;
	/* SETPIN */
	DIO_enuSetPinValue(CE_PORT,CE_PIN,DIO_u8_tLOW);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	65 e0       	ldi	r22, 0x05	; 5
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	08 95       	ret

00001e02 <HEAT_COOL_ELEMENTS_enuCoolerStart>:
}
ES_t HEAT_COOL_ELEMENTS_enuCoolerStart(void)
{
	ES_t Local_enu_ErrorState = ES_NOK;
	/* SETPIN */
	DIO_enuSetPinValue(CE_PORT,CE_PIN,DIO_u8_tHIGH);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	65 e0       	ldi	r22, 0x05	; 5
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	08 95       	ret

00001e10 <HEAT_COOL_ELEMENTS_enuHeaterStop>:
ES_t HEAT_COOL_ELEMENTS_enuHeaterStop(void)

{
	ES_t Local_enu_ErrorState = ES_NOK;
	/* SETPIN */
	DIO_enuSetPinValue(HE_PORT,HE_PIN,DIO_u8_tLOW);
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	64 e0       	ldi	r22, 0x04	; 4
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	Local_enu_ErrorState = ES_OK;
return Local_enu_ErrorState;
}
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	08 95       	ret

00001e1e <HEAT_COOL_ELEMENTS_enuHeaterStart>:
}
ES_t HEAT_COOL_ELEMENTS_enuHeaterStart(void)
{
	ES_t Local_enu_ErrorState = ES_NOK;
	/* SETPIN */
	DIO_enuSetPinValue(HE_PORT,HE_PIN,DIO_u8_tHIGH);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	64 e0       	ldi	r22, 0x04	; 4
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	08 95       	ret

00001e2c <HEAT_COOL_ELEMENTS_enuHeaterToggle>:
ES_t HEAT_COOL_ELEMENTS_enuHeaterToggle(void)
{
	ES_t Local_enu_ErrorState = ES_NOK;
	/* SETPIN */
	DIO_enuTogPinValue(HE_PORT,HE_PIN);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	64 e0       	ldi	r22, 0x04	; 4
    1e30:	0e 94 f9 07 	call	0xff2	; 0xff2 <DIO_enuTogPinValue>
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	08 95       	ret

00001e38 <HEAT_COOL_ELEMENTS_enuIniti>:
{
	ES_t Local_enu_ErrorState = ES_NOK;

		/* HEATING ELEMENT*/
		/* Direction */
	DIO_enuSetPinDirection(HE_PORT,HE_PIN, DIO_u8_tOUTPUT);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	64 e0       	ldi	r22, 0x04	; 4
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
		/* SETPIN */
	DIO_enuSetPinValue(HE_PORT,HE_PIN,DIO_u8_tLOW);
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	64 e0       	ldi	r22, 0x04	; 4
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

	/* COOLING ELEMENT*/
		/* Direction */
	DIO_enuSetPinDirection(CE_PORT,CE_PIN, DIO_u8_tOUTPUT);
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	65 e0       	ldi	r22, 0x05	; 5
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
		/* SETPIN */
	DIO_enuSetPinValue(CE_PORT,CE_PIN,DIO_u8_tLOW);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	65 e0       	ldi	r22, 0x05	; 5
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_enuSetPinValue>

	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	08 95       	ret

00001e64 <TMU_enuInit>:
{
	ES_t Local_enuErrorState = ES_NOK;

/*------------------------- TIMER0 SETTING ---------------------------*/

	TCCR0|=(TIMER_MASK_BIT<<TCCR0_CS02);
    1e64:	83 b7       	in	r24, 0x33	; 51
    1e66:	84 60       	ori	r24, 0x04	; 4
    1e68:	83 bf       	out	0x33, r24	; 51
	TCCR0&=~(TIMER_MASK_BIT<<TCCR0_CS01);
    1e6a:	83 b7       	in	r24, 0x33	; 51
    1e6c:	8d 7f       	andi	r24, 0xFD	; 253
    1e6e:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(TIMER_MASK_BIT<<TCCR0_CS00);
    1e70:	83 b7       	in	r24, 0x33	; 51
    1e72:	81 60       	ori	r24, 0x01	; 1
    1e74:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(TIMER_MASK_BIT<<TCCR0_WGM01);
    1e76:	83 b7       	in	r24, 0x33	; 51
    1e78:	88 60       	ori	r24, 0x08	; 8
    1e7a:	83 bf       	out	0x33, r24	; 51
    1e7c:	21 e0       	ldi	r18, 0x01	; 1
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
	Global_u16_tCounterCTC =1;
#elif TICK_TIME > MAX_TICK_TIME
	u8_t Local_u8_tMaxNumber, Local_u8_tCounter;
	for(Local_u8_tCounter=1; Local_u8_tCounter<= MAX_TICK_TIME; Local_u8_tCounter++)
	{
		if(TICK_TIME % Local_u8_tCounter == TMU_ZERO_NUMBER)
    1e80:	84 e1       	ldi	r24, 0x14	; 20
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	b9 01       	movw	r22, r18
    1e86:	0e 94 37 13 	call	0x266e	; 0x266e <__divmodhi4>
    1e8a:	89 2b       	or	r24, r25
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <TMU_enuInit+0x2c>
    1e8e:	42 2f       	mov	r20, r18
    1e90:	2f 5f       	subi	r18, 0xFF	; 255
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
	OCR0 = (TICK_TIME * OCRN_COUNTS);
	Global_u16_tCounterENTERCTCISR =1;
	Global_u16_tCounterCTC =1;
#elif TICK_TIME > MAX_TICK_TIME
	u8_t Local_u8_tMaxNumber, Local_u8_tCounter;
	for(Local_u8_tCounter=1; Local_u8_tCounter<= MAX_TICK_TIME; Local_u8_tCounter++)
    1e94:	21 31       	cpi	r18, 0x11	; 17
    1e96:	31 05       	cpc	r19, r1
    1e98:	99 f7       	brne	.-26     	; 0x1e80 <TMU_enuInit+0x1c>
	{
		if(TICK_TIME % Local_u8_tCounter == TMU_ZERO_NUMBER)
			Local_u8_tMaxNumber =Local_u8_tCounter;
	}
	OCR0 = (Local_u8_tMaxNumber * OCRN_COUNTS);
    1e9a:	84 2f       	mov	r24, r20
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	24 e0       	ldi	r18, 0x04	; 4
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	2a 95       	dec	r18
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <TMU_enuInit+0x3c>
    1ea8:	8c bf       	out	0x3c, r24	; 60
	DDRB=OCR0;
    1eaa:	8c b7       	in	r24, 0x3c	; 60
    1eac:	87 bb       	out	0x17, r24	; 23
	Global_u16_tCounterENTERCTCISR =(TICK_TIME / Local_u8_tMaxNumber);
    1eae:	84 e1       	ldi	r24, 0x14	; 20
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	64 2f       	mov	r22, r20
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	0e 94 37 13 	call	0x266e	; 0x266e <__divmodhi4>
    1eba:	60 93 d3 02 	sts	0x02D3, r22
    1ebe:	70 93 d4 02 	sts	0x02D4, r23
	Global_u16_tCounterCTC = Global_u16_tCounterENTERCTCISR;
    1ec2:	60 93 d5 02 	sts	0x02D5, r22
    1ec6:	70 93 d6 02 	sts	0x02D6, r23
#error	"TICK_TIME SELECTION IS NOT CORRECT"
#endif

	return Local_enuErrorState;

}
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	08 95       	ret

00001ece <TMU_enuCreateTask>:

ES_t TMU_enuCreateTask(void(*Copy_pfunTask)(void),u8_t Copy_u8_tPriority, u8_t Copy_u8_tPeriodicity)
{
    1ece:	9c 01       	movw	r18, r24
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pfunTask !=NULL)
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	11 f4       	brne	.+4      	; 0x1ed8 <TMU_enuCreateTask+0xa>
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	08 95       	ret
	{
		TASKS[Copy_u8_tPriority].Pfun=Copy_pfunTask;
    1ed8:	86 2f       	mov	r24, r22
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	dc 01       	movw	r26, r24
    1ede:	53 e0       	ldi	r21, 0x03	; 3
    1ee0:	aa 0f       	add	r26, r26
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	5a 95       	dec	r21
    1ee6:	e1 f7       	brne	.-8      	; 0x1ee0 <TMU_enuCreateTask+0x12>
    1ee8:	a8 1b       	sub	r26, r24
    1eea:	b9 0b       	sbc	r27, r25
    1eec:	a7 52       	subi	r26, 0x27	; 39
    1eee:	bd 4f       	sbci	r27, 0xFD	; 253
    1ef0:	fd 01       	movw	r30, r26
    1ef2:	21 93       	st	Z+, r18
    1ef4:	31 93       	st	Z+, r19
		TASKS[Copy_u8_tPriority].priodicity=Copy_u8_tPeriodicity;
    1ef6:	12 96       	adiw	r26, 0x02	; 2
    1ef8:	4c 93       	st	X, r20
    1efa:	12 97       	sbiw	r26, 0x02	; 2
    1efc:	11 82       	std	Z+1, r1	; 0x01
		TASKS[Copy_u8_tPriority].counter=Copy_u8_tPeriodicity-1;
    1efe:	84 2f       	mov	r24, r20
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	15 96       	adiw	r26, 0x05	; 5
    1f06:	9c 93       	st	X, r25
    1f08:	8e 93       	st	-X, r24
    1f0a:	14 97       	sbiw	r26, 0x04	; 4
		TASKS[Copy_u8_tPriority].State= READY;
    1f0c:	8b e0       	ldi	r24, 0x0B	; 11
    1f0e:	16 96       	adiw	r26, 0x06	; 6
    1f10:	8c 93       	st	X, r24
    1f12:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;

	return Local_enuErrorState;
}
    1f14:	08 95       	ret

00001f16 <TMU_enuSuspendTask>:


ES_t TMU_enuSuspendTask(u8_t Copy_u8_tPriority)
{
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_u8_tPriority	< MAX_TASKS_NUMBER)
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	68 f4       	brcc	.+26     	; 0x1f34 <TMU_enuSuspendTask+0x1e>
	{
		TASKS[Copy_u8_tPriority].State= SUSPEND;
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	63 e0       	ldi	r22, 0x03	; 3
    1f20:	ee 0f       	add	r30, r30
    1f22:	ff 1f       	adc	r31, r31
    1f24:	6a 95       	dec	r22
    1f26:	e1 f7       	brne	.-8      	; 0x1f20 <TMU_enuSuspendTask+0xa>
    1f28:	e8 1b       	sub	r30, r24
    1f2a:	f9 0b       	sbc	r31, r25
    1f2c:	e7 52       	subi	r30, 0x27	; 39
    1f2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f30:	8c e0       	ldi	r24, 0x0C	; 12
    1f32:	86 83       	std	Z+6, r24	; 0x06
	}

	return Local_enuErrorState;
}
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	08 95       	ret

00001f38 <TMU_enuResumeTask>:
ES_t TMU_enuResumeTask (u8_t Copy_u8_tPriority)
{
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_u8_tPriority< MAX_TASKS_NUMBER)
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	88 f4       	brcc	.+34     	; 0x1f5e <TMU_enuResumeTask+0x26>
		{
			TASKS[Copy_u8_tPriority].State= READY;
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	fc 01       	movw	r30, r24
    1f40:	73 e0       	ldi	r23, 0x03	; 3
    1f42:	ee 0f       	add	r30, r30
    1f44:	ff 1f       	adc	r31, r31
    1f46:	7a 95       	dec	r23
    1f48:	e1 f7       	brne	.-8      	; 0x1f42 <TMU_enuResumeTask+0xa>
    1f4a:	e8 1b       	sub	r30, r24
    1f4c:	f9 0b       	sbc	r31, r25
    1f4e:	e7 52       	subi	r30, 0x27	; 39
    1f50:	fd 4f       	sbci	r31, 0xFD	; 253
    1f52:	8b e0       	ldi	r24, 0x0B	; 11
    1f54:	86 83       	std	Z+6, r24	; 0x06
			TASKS[Copy_u8_tPriority].counter= TASKS[Copy_u8_tPriority].priodicity; //=0;
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	95 83       	std	Z+5, r25	; 0x05
    1f5c:	84 83       	std	Z+4, r24	; 0x04

		}
	return Local_enuErrorState;
}
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	08 95       	ret

00001f62 <TMU_enuDeleteTask>:

ES_t TMU_enuDeleteTask (u8_t Copy_u8_tPriority)
{
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_u8_tPriority< MAX_TASKS_NUMBER)
    1f62:	84 30       	cpi	r24, 0x04	; 4
    1f64:	78 f4       	brcc	.+30     	; 0x1f84 <TMU_enuDeleteTask+0x22>
		{
			TASKS[Copy_u8_tPriority].State= SUSPEND;
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	fc 01       	movw	r30, r24
    1f6a:	a3 e0       	ldi	r26, 0x03	; 3
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	aa 95       	dec	r26
    1f72:	e1 f7       	brne	.-8      	; 0x1f6c <TMU_enuDeleteTask+0xa>
    1f74:	e8 1b       	sub	r30, r24
    1f76:	f9 0b       	sbc	r31, r25
    1f78:	e7 52       	subi	r30, 0x27	; 39
    1f7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f7c:	8c e0       	ldi	r24, 0x0C	; 12
    1f7e:	86 83       	std	Z+6, r24	; 0x06
			TASKS[Copy_u8_tPriority].Pfun= NULL;
    1f80:	11 82       	std	Z+1, r1	; 0x01
    1f82:	10 82       	st	Z, r1

		}
	return Local_enuErrorState;
}
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	08 95       	ret

00001f88 <TMU_enuStartScheduler>:
ES_t TMU_enuStartScheduler(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	 //Enable the CTC Interrupt
	 TIMSK |= (TIMER_MASK_BIT<<TIMSK_OCIE0);
    1f88:	89 b7       	in	r24, 0x39	; 57
    1f8a:	82 60       	ori	r24, 0x02	; 2
    1f8c:	89 bf       	out	0x39, r24	; 57
	 GIE_enu_Enable();
    1f8e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <GIE_enu_Enable>
    1f92:	ff cf       	rjmp	.-2      	; 0x1f92 <TMU_enuStartScheduler+0xa>

00001f94 <SYSTEM_enuCalculateAverateTemp>:
	return Local_enuErrorState;
}


ES_t SYSTEM_enuCalculateAverateTemp(u16_t * Copy_pu16_tAstrTempReadings, u16_t * Copy_u16_tReturnTempValue)
{
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	dc 01       	movw	r26, r24
    1f9a:	eb 01       	movw	r28, r22
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
	u16_t Local_u16_tSumOfReadings = ZERO_VALUE;
	u16_t Local_u16_tAverageOfReadings;
	u8_t Local_u8_tIterator;

	for(Local_u8_tIterator=0; Local_u8_tIterator<NUM_OF_TEMP_MEASURES; Local_u8_tIterator++){
		Local_u16_tSumOfReadings = Local_u16_tSumOfReadings + Copy_pu16_tAstrTempReadings[Local_u8_tIterator];
    1fa4:	fd 01       	movw	r30, r26
    1fa6:	e2 0f       	add	r30, r18
    1fa8:	f3 1f       	adc	r31, r19
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	48 0f       	add	r20, r24
    1fb0:	59 1f       	adc	r21, r25
    1fb2:	2e 5f       	subi	r18, 0xFE	; 254
    1fb4:	3f 4f       	sbci	r19, 0xFF	; 255
	ES_t Local_enu_ErrorState = ES_NOK;
	u16_t Local_u16_tSumOfReadings = ZERO_VALUE;
	u16_t Local_u16_tAverageOfReadings;
	u8_t Local_u8_tIterator;

	for(Local_u8_tIterator=0; Local_u8_tIterator<NUM_OF_TEMP_MEASURES; Local_u8_tIterator++){
    1fb6:	24 31       	cpi	r18, 0x14	; 20
    1fb8:	31 05       	cpc	r19, r1
    1fba:	a1 f7       	brne	.-24     	; 0x1fa4 <SYSTEM_enuCalculateAverateTemp+0x10>
		Local_u16_tSumOfReadings = Local_u16_tSumOfReadings + Copy_pu16_tAstrTempReadings[Local_u8_tIterator];

	}
	Local_u16_tAverageOfReadings = (u16_t) Local_u16_tSumOfReadings / NUM_OF_TEMP_MEASURES;
	* Copy_u16_tReturnTempValue=Local_u16_tAverageOfReadings;
    1fbc:	ca 01       	movw	r24, r20
    1fbe:	6a e0       	ldi	r22, 0x0A	; 10
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	0e 94 23 13 	call	0x2646	; 0x2646 <__udivmodhi4>
    1fc6:	79 83       	std	Y+1, r23	; 0x01
    1fc8:	68 83       	st	Y, r22
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <SYSTEM_enuAddNewTemp>:

ES_t SYSTEM_enuAddNewTemp(u16_t * Copy_pu16_tAstrTempReadings, u16_t Copy_u16_tAddedTempValue)
{
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	a0 e4       	ldi	r26, 0x40	; 64
    1fd8:	bc e9       	ldi	r27, 0x9C	; 156
	ES_t Local_enuErrorState = ES_NOK;
	u8_t Local_u8_tIterator;
	for(Local_u8_tIterator=ZERO_VALUE;Local_u8_tIterator<NUM_OF_TEMP_MEASURES;Local_u8_tIterator++)
	{
		Copy_pu16_tAstrTempReadings [Global_u8_tArrCounter] =Copy_u16_tAddedTempValue;
    1fda:	e0 91 11 03 	lds	r30, 0x0311
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	ee 0f       	add	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	e4 0f       	add	r30, r20
    1fe6:	f5 1f       	adc	r31, r21
    1fe8:	71 83       	std	Z+1, r23	; 0x01
    1fea:	60 83       	st	Z, r22
    1fec:	fd 01       	movw	r30, r26
    1fee:	31 97       	sbiw	r30, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <SYSTEM_enuAddNewTemp+0x1c>
		_delay_ms(10);
		Global_u8_tArrCounter++;
    1ff2:	80 91 11 03 	lds	r24, 0x0311
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	80 93 11 03 	sts	0x0311, r24
		if(Global_u8_tArrCounter==NUM_OF_TEMP_MEASURES)
    1ffc:	8a 30       	cpi	r24, 0x0A	; 10
    1ffe:	11 f4       	brne	.+4      	; 0x2004 <SYSTEM_enuAddNewTemp+0x32>
			{
				Global_u8_tArrCounter=ZERO_VALUE;
    2000:	10 92 11 03 	sts	0x0311, r1

ES_t SYSTEM_enuAddNewTemp(u16_t * Copy_pu16_tAstrTempReadings, u16_t Copy_u16_tAddedTempValue)
{
	ES_t Local_enuErrorState = ES_NOK;
	u8_t Local_u8_tIterator;
	for(Local_u8_tIterator=ZERO_VALUE;Local_u8_tIterator<NUM_OF_TEMP_MEASURES;Local_u8_tIterator++)
    2004:	2f 5f       	subi	r18, 0xFF	; 255
    2006:	2a 30       	cpi	r18, 0x0A	; 10
    2008:	41 f7       	brne	.-48     	; 0x1fda <SYSTEM_enuAddNewTemp+0x8>
			}
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	08 95       	ret

0000200e <SYSTEM_vFiveSecondsInSettingMode>:

}

void SYSTEM_vFiveSecondsInSettingMode(void)
{
		if (Global_u16_tFive_SecondToggleFlag ==1 && Global_u8_tCurrentState == SETTINT_STATE)
    200e:	80 91 12 03 	lds	r24, 0x0312
    2012:	90 91 13 03 	lds	r25, 0x0313
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	59 f4       	brne	.+22     	; 0x2030 <SYSTEM_vFiveSecondsInSettingMode+0x22>
    201a:	80 91 16 03 	lds	r24, 0x0316
    201e:	82 30       	cpi	r24, 0x02	; 2
    2020:	39 f4       	brne	.+14     	; 0x2030 <SYSTEM_vFiveSecondsInSettingMode+0x22>
		{
			Global_u8_tCurrentState = ON_STATE;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	80 93 16 03 	sts	0x0316, r24
			Global_u16_tFive_SecondToggleFlag=0;
    2028:	10 92 13 03 	sts	0x0313, r1
    202c:	10 92 12 03 	sts	0x0312, r1
    2030:	08 95       	ret

00002032 <SYSTEM_enuSleepMode>:


ES_t SYSTEM_enuSleepMode(void){
	ES_t Local_enu_ErrorState = ES_NOK;
	/*Sleep Mode Select --> IDLE STATE*/
	MCUCR&=~(1<<MCUCR_SM0);
    2032:	ac 98       	cbi	0x15, 4	; 21
	MCUCR&=~(1<<MCUCR_SM1);
    2034:	ad 98       	cbi	0x15, 5	; 21
	MCUCR&=~(1<<MCUCR_SM2);
    2036:	ae 98       	cbi	0x15, 6	; 21
	/* Sleep mode Enable */
	MCUCR|=(1<<MCUCR_SE);
    2038:	af 9a       	sbi	0x15, 7	; 21

	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	08 95       	ret

0000203e <__vector_1>:




ISR(VECT_INT0) //TEMP_UP_SWITCH
{
    203e:	1f 92       	push	r1
    2040:	0f 92       	push	r0
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	0f 92       	push	r0
    2046:	11 24       	eor	r1, r1
    2048:	8f 93       	push	r24
	if (Global_u8_tUPSwitchFlag==NOT_RISED)
    204a:	80 91 0d 03 	lds	r24, 0x030D
    204e:	88 23       	and	r24, r24
    2050:	19 f4       	brne	.+6      	; 0x2058 <__vector_1+0x1a>
	{
		Global_u8_tUPSwitchFlag=RISED;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	80 93 0d 03 	sts	0x030D, r24
	}

}
    2058:	8f 91       	pop	r24
    205a:	0f 90       	pop	r0
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	0f 90       	pop	r0
    2060:	1f 90       	pop	r1
    2062:	18 95       	reti

00002064 <__vector_2>:

ISR(VECT_INT1)	//TEMP_DOWN_SWITCH
{
    2064:	1f 92       	push	r1
    2066:	0f 92       	push	r0
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	0f 92       	push	r0
    206c:	11 24       	eor	r1, r1
    206e:	8f 93       	push	r24
	if (Global_u8_tDOWNSwitchFlag==NOT_RISED)
    2070:	80 91 0e 03 	lds	r24, 0x030E
    2074:	88 23       	and	r24, r24
    2076:	19 f4       	brne	.+6      	; 0x207e <__vector_2+0x1a>
	{
		Global_u8_tDOWNSwitchFlag=RISED;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 93 0e 03 	sts	0x030E, r24
	}


}
    207e:	8f 91       	pop	r24
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_4>:
	}
}

/*- Timer 2 is responsible for the five seconds delay between the setting mode and the normal mode when no switch is pressed in setting mode ------*/
ISR (VECT_TIMER2_CTC)
{
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	11 24       	eor	r1, r1
    2094:	2f 93       	push	r18
    2096:	8f 93       	push	r24
    2098:	9f 93       	push	r25

	if(Global_u8_tCurrentState==SETTINT_STATE || Global_u8_tCurrentState== ON_STATE)
    209a:	80 91 16 03 	lds	r24, 0x0316
    209e:	81 50       	subi	r24, 0x01	; 1
    20a0:	82 30       	cpi	r24, 0x02	; 2
    20a2:	90 f4       	brcc	.+36     	; 0x20c8 <__vector_4+0x3e>
	{
		Global_u16_tFive_SecondCounter ++;
    20a4:	80 91 d7 02 	lds	r24, 0x02D7
    20a8:	90 91 d8 02 	lds	r25, 0x02D8
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	90 93 d8 02 	sts	0x02D8, r25
    20b2:	80 93 d7 02 	sts	0x02D7, r24
		if (Global_u16_tFive_SecondCounter == FIVE_SECONDS)
    20b6:	88 58       	subi	r24, 0x88	; 136
    20b8:	93 41       	sbci	r25, 0x13	; 19
    20ba:	31 f4       	brne	.+12     	; 0x20c8 <__vector_4+0x3e>
		{

			Global_u16_tFive_SecondToggleFlag=1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	90 93 13 03 	sts	0x0313, r25
    20c4:	80 93 12 03 	sts	0x0312, r24
		}
	}

}
    20c8:	9f 91       	pop	r25
    20ca:	8f 91       	pop	r24
    20cc:	2f 91       	pop	r18
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <__vector_3>:
	}


}
ISR(VECT_INT2)	//ON_OFF_SWITCH
{
    20d8:	1f 92       	push	r1
    20da:	0f 92       	push	r0
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	0f 92       	push	r0
    20e0:	11 24       	eor	r1, r1
    20e2:	2f 93       	push	r18
    20e4:	3f 93       	push	r19
    20e6:	4f 93       	push	r20
    20e8:	5f 93       	push	r21
    20ea:	6f 93       	push	r22
    20ec:	7f 93       	push	r23
    20ee:	8f 93       	push	r24
    20f0:	9f 93       	push	r25
    20f2:	af 93       	push	r26
    20f4:	bf 93       	push	r27
    20f6:	ef 93       	push	r30
    20f8:	ff 93       	push	r31
	if(Global_u8_tCurrentState==OFF_STATE)
    20fa:	80 91 16 03 	lds	r24, 0x0316
    20fe:	88 23       	and	r24, r24
    2100:	81 f4       	brne	.+32     	; 0x2122 <__vector_3+0x4a>
	{
		Global_u8_tCurrentState = ON_STATE;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 16 03 	sts	0x0316, r24
		EEPROM_enuReadByteFromAddress(0x0000,&Global_u8_tReadData);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	67 e1       	ldi	r22, 0x17	; 23
    210e:	73 e0       	ldi	r23, 0x03	; 3
    2110:	0e 94 8f 05 	call	0xb1e	; 0xb1e <EEPROM_enuReadByteFromAddress>
		Global_u16_tDesiredTemp = Global_u8_tReadData;
    2114:	80 91 17 03 	lds	r24, 0x0317
    2118:	80 93 f7 02 	sts	0x02F7, r24
    211c:	10 92 f8 02 	sts	0x02F8, r1
    2120:	05 c0       	rjmp	.+10     	; 0x212c <__vector_3+0x54>
	}
	else if (Global_u8_tCurrentState==ON_STATE || Global_u8_tCurrentState==SETTINT_STATE){
    2122:	81 50       	subi	r24, 0x01	; 1
    2124:	82 30       	cpi	r24, 0x02	; 2
    2126:	10 f4       	brcc	.+4      	; 0x212c <__vector_3+0x54>
		Global_u8_tCurrentState = OFF_STATE;
    2128:	10 92 16 03 	sts	0x0316, r1
	}
}
    212c:	ff 91       	pop	r31
    212e:	ef 91       	pop	r30
    2130:	bf 91       	pop	r27
    2132:	af 91       	pop	r26
    2134:	9f 91       	pop	r25
    2136:	8f 91       	pop	r24
    2138:	7f 91       	pop	r23
    213a:	6f 91       	pop	r22
    213c:	5f 91       	pop	r21
    213e:	4f 91       	pop	r20
    2140:	3f 91       	pop	r19
    2142:	2f 91       	pop	r18
    2144:	0f 90       	pop	r0
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	0f 90       	pop	r0
    214a:	1f 90       	pop	r1
    214c:	18 95       	reti

0000214e <SYSTEM_vTogSevenSeg>:
	return Local_enuErrorState;
}


void SYSTEM_vTogSevenSeg (void)
{
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
	SevenSegment_enuDisableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[0]);
    2152:	06 e6       	ldi	r16, 0x66	; 102
    2154:	12 e0       	ldi	r17, 0x02	; 2
    2156:	c8 01       	movw	r24, r16
    2158:	0e 94 ed 0a 	call	0x15da	; 0x15da <SevenSegment_enuDisableCommon>
	SevenSegment_enuDisableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[1]);
    215c:	c8 01       	movw	r24, r16
    215e:	43 96       	adiw	r24, 0x13	; 19
    2160:	0e 94 ed 0a 	call	0x15da	; 0x15da <SevenSegment_enuDisableCommon>

}
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	08 95       	ret

0000216a <SYSTEM_enuOffState>:
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}

ES_t SYSTEM_enuOffState(void)
{
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
	ES_t Local_enuErrorState =ES_NOK;

		SevenSegment_enuDisableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[0]);
    216e:	06 e6       	ldi	r16, 0x66	; 102
    2170:	12 e0       	ldi	r17, 0x02	; 2
    2172:	c8 01       	movw	r24, r16
    2174:	0e 94 ed 0a 	call	0x15da	; 0x15da <SevenSegment_enuDisableCommon>
		SevenSegment_enuDisableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[1]);
    2178:	c8 01       	movw	r24, r16
    217a:	43 96       	adiw	r24, 0x13	; 19
    217c:	0e 94 ed 0a 	call	0x15da	; 0x15da <SevenSegment_enuDisableCommon>
		LCD_enuClearDisplay();
    2180:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_enuClearDisplay>
		LED_SYSTEM_enuLedStop();
    2184:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LED_SYSTEM_enuLedStop>
		HEAT_COOL_ELEMENTS_enuHeaterStop();
    2188:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <HEAT_COOL_ELEMENTS_enuHeaterStop>
		HEAT_COOL_ELEMENTS_enuCoolerStop();
    218c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <HEAT_COOL_ELEMENTS_enuCoolerStop>
		//TIMER0_enuStopTimer();
		//TIMER1_enuStopTimer();
		/*Power Management and Sleep Modes*/
		SYSTEM_enuSleepMode();
    2190:	0e 94 19 10 	call	0x2032	; 0x2032 <SYSTEM_enuSleepMode>

	Local_enuErrorState=ES_OK;
	return Local_enuErrorState;
}
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	08 95       	ret

0000219c <SYSTEM_enuSettingState>:
}
ES_t SYSTEM_enuSettingState(void)
{
	ES_t Local_enuErrorState =ES_NOK;

	HEAT_COOL_ELEMENTS_enuCoolerStop();
    219c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <HEAT_COOL_ELEMENTS_enuCoolerStop>
	HEAT_COOL_ELEMENTS_enuHeaterStop();
    21a0:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <HEAT_COOL_ELEMENTS_enuHeaterStop>
	LED_SYSTEM_enuLedStop();
    21a4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LED_SYSTEM_enuLedStop>

	/*------------------ Toggle the SevenSegment every 5 Seconds -------------------*/
	//TIMER0_enuSetCallBackDelay((volatile void (*)(void))SYSTEM_vTogSevenSeg/*new fuction to toggle the sevensegment*/,TIMER0_CTC_INDEX,DELAY_FIVE_SECONDS);


	LCD_enuSendCommand(FIRST_LINE);
    21a8:	80 e8       	ldi	r24, 0x80	; 128
    21aa:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("Setting Mode On   ");
    21ae:	80 e6       	ldi	r24, 0x60	; 96
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
	LCD_enuSendCommand(SECOND_LINE);
    21b6:	80 ec       	ldi	r24, 0xC0	; 192
    21b8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("Desired Temp=   C ");
    21bc:	83 e7       	ldi	r24, 0x73	; 115
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
	LCD_enuSendCommand(SECOND_LINE+13);
    21c4:	8d ec       	ldi	r24, 0xCD	; 205
    21c6:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuDisplayIntegerNum(Global_u16_tDesiredTemp);
    21ca:	60 91 f7 02 	lds	r22, 0x02F7
    21ce:	70 91 f8 02 	lds	r23, 0x02F8
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_enuDisplayIntegerNum>
	SevenSegment_Write(Global_u16_tDesiredTemp);
    21da:	80 91 f7 02 	lds	r24, 0x02F7
    21de:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <SevenSegment_Write>
    21e2:	80 e1       	ldi	r24, 0x10	; 16
    21e4:	97 e2       	ldi	r25, 0x27	; 39
    21e6:	20 e9       	ldi	r18, 0x90	; 144
    21e8:	31 e0       	ldi	r19, 0x01	; 1
    21ea:	f9 01       	movw	r30, r18
    21ec:	31 97       	sbiw	r30, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <SYSTEM_enuSettingState+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	d9 f7       	brne	.-10     	; 0x21ea <SYSTEM_enuSettingState+0x4e>
//	Global_32_tTIMER1_CTCA_SecondsCounter==TIMER1_DELAY_FIVE_SECONDS

	_delay_ms(1000);

	if (Global_u8_tUPSwitchFlag == RISED && (Global_u16_tDesiredTemp < MAXIMUM_TEMP))
    21f4:	80 91 0d 03 	lds	r24, 0x030D
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	89 f4       	brne	.+34     	; 0x221e <SYSTEM_enuSettingState+0x82>
    21fc:	80 91 f7 02 	lds	r24, 0x02F7
    2200:	90 91 f8 02 	lds	r25, 0x02F8
    2204:	8b 34       	cpi	r24, 0x4B	; 75
    2206:	91 05       	cpc	r25, r1
    2208:	50 f4       	brcc	.+20     	; 0x221e <SYSTEM_enuSettingState+0x82>
	{
		Global_u16_tDesiredTemp = Global_u16_tDesiredTemp + FIVE_TEMP_DEGREE;
    220a:	05 96       	adiw	r24, 0x05	; 5
    220c:	90 93 f8 02 	sts	0x02F8, r25
    2210:	80 93 f7 02 	sts	0x02F7, r24
		SevenSegment_Write(Global_u16_tDesiredTemp);
    2214:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <SevenSegment_Write>
		Global_u8_tUPSwitchFlag=NOT_RISED;
    2218:	10 92 0d 03 	sts	0x030D, r1
    221c:	14 c0       	rjmp	.+40     	; 0x2246 <SYSTEM_enuSettingState+0xaa>

	}

	else if (Global_u8_tDOWNSwitchFlag == RISED&& (Global_u16_tDesiredTemp > MINIMUM_TEMP))
    221e:	80 91 0e 03 	lds	r24, 0x030E
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	81 f4       	brne	.+32     	; 0x2246 <SYSTEM_enuSettingState+0xaa>
    2226:	80 91 f7 02 	lds	r24, 0x02F7
    222a:	90 91 f8 02 	lds	r25, 0x02F8
    222e:	84 32       	cpi	r24, 0x24	; 36
    2230:	91 05       	cpc	r25, r1
    2232:	48 f0       	brcs	.+18     	; 0x2246 <SYSTEM_enuSettingState+0xaa>
		{
			Global_u16_tDesiredTemp = Global_u16_tDesiredTemp - FIVE_TEMP_DEGREE;
    2234:	05 97       	sbiw	r24, 0x05	; 5
    2236:	90 93 f8 02 	sts	0x02F8, r25
    223a:	80 93 f7 02 	sts	0x02F7, r24
			SevenSegment_Write(Global_u16_tDesiredTemp);
    223e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <SevenSegment_Write>
			Global_u8_tDOWNSwitchFlag= NOT_RISED;
    2242:	10 92 0e 03 	sts	0x030E, r1
		}
	if (Global_u8_tDOWNSwitchFlag == NOT_RISED && Global_u8_tUPSwitchFlag == NOT_RISED)
    2246:	80 91 0e 03 	lds	r24, 0x030E
    224a:	88 23       	and	r24, r24
    224c:	59 f4       	brne	.+22     	; 0x2264 <SYSTEM_enuSettingState+0xc8>
    224e:	80 91 0d 03 	lds	r24, 0x030D
    2252:	88 23       	and	r24, r24
    2254:	39 f4       	brne	.+14     	; 0x2264 <SYSTEM_enuSettingState+0xc8>
	{
		TIMER1_enuSetCallBackDelay((void (*)(void))SYSTEM_vFiveSecondsInSettingMode, TIMER_CTC1A_INTERRUPT_INDEX, TIMER1_DELAY_FIVE_SECONDS);
    2256:	87 e0       	ldi	r24, 0x07	; 7
    2258:	90 e1       	ldi	r25, 0x10	; 16
    225a:	61 e0       	ldi	r22, 0x01	; 1
    225c:	42 e3       	ldi	r20, 0x32	; 50
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	0e 94 85 04 	call	0x90a	; 0x90a <TIMER1_enuSetCallBackDelay>
	//TIMER1_enuStartTimer();




	EEPROM_enuWriteByteToAddress(0x0000,Global_u16_tDesiredTemp);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	60 91 f7 02 	lds	r22, 0x02F7
    226c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <EEPROM_enuWriteByteToAddress>


	Local_enuErrorState =ES_OK;
	return Local_enuErrorState;

}
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	08 95       	ret

00002274 <SYSTEM_enuGetTemp>:
u16_t Global_Au16_tTempArr[NUM_OF_TEMP_MEASURES];
u8_t  Global_u8_tCurrentState,Global_u8_tTempMeasureFlag,Global_u8_tReadData,Global_u8_tArrCounter,Global_u8_tUPSwitchFlag,Global_u8_tDOWNSwitchFlag;


ES_t SYSTEM_enuGetTemp(void)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <SYSTEM_enuGetTemp+0x6>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
	u8_t Local_u8_tIterator;
	u16_t Local_u16_tFirstTempReading;
	/*Getting the Temperature every 100mSecond*/
	TempSensor_enuGetTempReading(&Local_u16_tFirstTempReading);
    227e:	ce 01       	movw	r24, r28
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	0e 94 c1 08 	call	0x1182	; 0x1182 <TempSensor_enuGetTempReading>
	//SYSTEM_enuAddNewTemp(Global_Au16_tTempArr,Global_u16_tTempRead);
	for (Local_u8_tIterator = 0; Local_u8_tIterator<NUM_OF_TEMP_MEASURES; Local_u8_tIterator++)
	{
		Global_Au16_tTempArr[Local_u8_tIterator]= Local_u16_tFirstTempReading;
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	e9 ef       	ldi	r30, 0xF9	; 249
    228c:	f2 e0       	ldi	r31, 0x02	; 2
    228e:	81 93       	st	Z+, r24
    2290:	91 93       	st	Z+, r25
	u8_t Local_u8_tIterator;
	u16_t Local_u16_tFirstTempReading;
	/*Getting the Temperature every 100mSecond*/
	TempSensor_enuGetTempReading(&Local_u16_tFirstTempReading);
	//SYSTEM_enuAddNewTemp(Global_Au16_tTempArr,Global_u16_tTempRead);
	for (Local_u8_tIterator = 0; Local_u8_tIterator<NUM_OF_TEMP_MEASURES; Local_u8_tIterator++)
    2292:	23 e0       	ldi	r18, 0x03	; 3
    2294:	ed 30       	cpi	r30, 0x0D	; 13
    2296:	f2 07       	cpc	r31, r18
    2298:	d1 f7       	brne	.-12     	; 0x228e <SYSTEM_enuGetTemp+0x1a>
	{
		Global_Au16_tTempArr[Local_u8_tIterator]= Local_u16_tFirstTempReading;
	}
	//SYSTEM_enuCalculateAverateTemp(Global_Au16_tTempArr,&Global_u16_tAverageTemp);

	Global_u8_tArrCounter=0;
    229a:	10 92 11 03 	sts	0x0311, r1

	/***********************************EEPROM**************************************/


	return Local_enuErrorState;
}
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <SYSTEM_enuChangeTemp>:
}

ES_t SYSTEM_enuChangeTemp(void){
	ES_t Local_enu_ErrorState = ES_NOK;
	/*SYSTEM IN IDLE STATE NO NEED FOR ACTION*/
	if( (Global_u16_tDesiredTemp < Global_u16_tAverageTemp + FIVE_TEMP_DEGREE) && (Global_u16_tDesiredTemp > Global_u16_tAverageTemp - FIVE_TEMP_DEGREE) )
    22aa:	20 91 f7 02 	lds	r18, 0x02F7
    22ae:	30 91 f8 02 	lds	r19, 0x02F8
    22b2:	80 91 14 03 	lds	r24, 0x0314
    22b6:	90 91 15 03 	lds	r25, 0x0315
    22ba:	ac 01       	movw	r20, r24
    22bc:	45 50       	subi	r20, 0x05	; 5
    22be:	50 40       	sbci	r21, 0x00	; 0
    22c0:	05 96       	adiw	r24, 0x05	; 5
    22c2:	28 17       	cp	r18, r24
    22c4:	39 07       	cpc	r19, r25
    22c6:	88 f4       	brcc	.+34     	; 0x22ea <SYSTEM_enuChangeTemp+0x40>
    22c8:	42 17       	cp	r20, r18
    22ca:	53 07       	cpc	r21, r19
    22cc:	38 f4       	brcc	.+14     	; 0x22dc <SYSTEM_enuChangeTemp+0x32>
	{
		// Actual Temperature is in ten dergee range of the Desired set Temperature
		// Neither Heating or Cooling Systems are needed
		HEAT_COOL_ELEMENTS_enuHeaterStop();
    22ce:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <HEAT_COOL_ELEMENTS_enuHeaterStop>
		HEAT_COOL_ELEMENTS_enuCoolerStop();
    22d2:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <HEAT_COOL_ELEMENTS_enuCoolerStop>
		LED_SYSTEM_enuLedStop();
    22d6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LED_SYSTEM_enuLedStop>
    22da:	15 c0       	rjmp	.+42     	; 0x2306 <SYSTEM_enuChangeTemp+0x5c>
	else if(Global_u16_tDesiredTemp < Global_u16_tAverageTemp + FIVE_TEMP_DEGREE)
	{
		// Actual Temperature is Higher than the saved desired temperature
		// The Cooling system is needed

		HEAT_COOL_ELEMENTS_enuHeaterStop();
    22dc:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <HEAT_COOL_ELEMENTS_enuHeaterStop>
		HEAT_COOL_ELEMENTS_enuCoolerStart();
    22e0:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <HEAT_COOL_ELEMENTS_enuCoolerStart>
		LED_SYSTEM_enuLedStart();
    22e4:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LED_SYSTEM_enuLedStart>
    22e8:	0e c0       	rjmp	.+28     	; 0x2306 <SYSTEM_enuChangeTemp+0x5c>

	}
	else if (Global_u16_tDesiredTemp > Global_u16_tAverageTemp - FIVE_TEMP_DEGREE)
    22ea:	42 17       	cp	r20, r18
    22ec:	53 07       	cpc	r21, r19
    22ee:	58 f4       	brcc	.+22     	; 0x2306 <SYSTEM_enuChangeTemp+0x5c>
	{
		// Actual Temperature is Lower than the saved desired temperature
		// The Heating system is needed

		HEAT_COOL_ELEMENTS_enuHeaterStart();
    22f0:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <HEAT_COOL_ELEMENTS_enuHeaterStart>
		HEAT_COOL_ELEMENTS_enuCoolerStop();
    22f4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <HEAT_COOL_ELEMENTS_enuCoolerStop>
		/*------------------ TOGGLE THE LED EVERY ONE SECOND -----------------*/
		TIMER0_enuSetCallBackDelay(( void (*) (void))LED_SYSTEM_enuSystemToggle,TIMER0_CTC_INDEX,TIMER0_DELAY_ONE_SECOND);
    22f8:	87 ef       	ldi	r24, 0xF7	; 247
    22fa:	91 e1       	ldi	r25, 0x11	; 17
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	48 ee       	ldi	r20, 0xE8	; 232
    2300:	53 e0       	ldi	r21, 0x03	; 3
    2302:	0e 94 12 03 	call	0x624	; 0x624 <TIMER0_enuSetCallBackDelay>
		*/

	}
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;
}
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	08 95       	ret

0000230a <SYSTEM_enuOnState>:


ES_t SYSTEM_enuOnState(void)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <SYSTEM_enuOnState+0x6>
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
	u16_t Local_u16_tNewTempReading;

	SevenSegment_enuEnableCommon(SEVENSEGMENT_AstrSevenSegmentConfig);
    2314:	86 e6       	ldi	r24, 0x66	; 102
    2316:	92 e0       	ldi	r25, 0x02	; 2
    2318:	0e 94 04 0b 	call	0x1608	; 0x1608 <SevenSegment_enuEnableCommon>
 * read the Value of the ADC readying every 100m second.
 * 					 TIMER1_enuSetCallBackDelay((volatile void (*) (void) ) ADC_enuEnableADC,TIMER_CTC1B_INTERRUPT_INDEX,TIMER1_100_MILE_SECOND);
 * 					 ADC_enuCallBack( (volatile void (*) (void) ) TempSensor_RiseFlag);
 */

	TempSensor_enuGetTempReading(&Local_u16_tNewTempReading);
    231c:	ce 01       	movw	r24, r28
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	0e 94 c1 08 	call	0x1182	; 0x1182 <TempSensor_enuGetTempReading>

	SYSTEM_enuAddNewTemp(Global_Au16_tTempArr,Local_u16_tNewTempReading);
    2324:	69 81       	ldd	r22, Y+1	; 0x01
    2326:	7a 81       	ldd	r23, Y+2	; 0x02
    2328:	89 ef       	ldi	r24, 0xF9	; 249
    232a:	92 e0       	ldi	r25, 0x02	; 2
    232c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <SYSTEM_enuAddNewTemp>
	SYSTEM_enuCalculateAverateTemp(Global_Au16_tTempArr, &Global_u16_tAverageTemp);
    2330:	89 ef       	ldi	r24, 0xF9	; 249
    2332:	92 e0       	ldi	r25, 0x02	; 2
    2334:	64 e1       	ldi	r22, 0x14	; 20
    2336:	73 e0       	ldi	r23, 0x03	; 3
    2338:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <SYSTEM_enuCalculateAverateTemp>


	//LCD_enuSendCommand(SECOND_LINE);
	//LCD_enuSendpcString("                ");
	LCD_enuSendCommand(FIRST_LINE);
    233c:	80 e8       	ldi	r24, 0x80	; 128
    233e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("NORMAL MODE ON  	");
    2342:	86 e8       	ldi	r24, 0x86	; 134
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
	LCD_enuSendCommand(SECOND_LINE);
    234a:	80 ec       	ldi	r24, 0xC0	; 192
    234c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("Actual Temp=    C");
    2350:	88 e9       	ldi	r24, 0x98	; 152
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
	LCD_enuSendCommand(SECOND_LINE +13);
    2358:	8d ec       	ldi	r24, 0xCD	; 205
    235a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuDisplayIntegerNum(Global_u16_tAverageTemp);
    235e:	60 91 14 03 	lds	r22, 0x0314
    2362:	70 91 15 03 	lds	r23, 0x0315
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_enuDisplayIntegerNum>
	SevenSegment_Write(Global_u16_tAverageTemp);
    236e:	80 91 14 03 	lds	r24, 0x0314
    2372:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <SevenSegment_Write>
	SYSTEM_enuChangeTemp();
    2376:	0e 94 55 11 	call	0x22aa	; 0x22aa <SYSTEM_enuChangeTemp>

	/*------------------- Listen for the UP|DOWN SWITCHES IF CHANGE OCCURES
	 *------------------- THEN, CHANGE THE CURRENT STATE MODE -------------------------*/

	if(Global_u8_tUPSwitchFlag==RISED||Global_u8_tDOWNSwitchFlag ==RISED)
    237a:	80 91 0d 03 	lds	r24, 0x030D
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	21 f0       	breq	.+8      	; 0x238a <SYSTEM_enuOnState+0x80>
    2382:	80 91 0e 03 	lds	r24, 0x030E
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	61 f5       	brne	.+88     	; 0x23e2 <SYSTEM_enuOnState+0xd8>
	{

		Global_u8_tCurrentState= SETTINT_STATE;
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	80 93 16 03 	sts	0x0316, r24
		Global_u8_tUPSwitchFlag=NOT_RISED;
    2390:	10 92 0d 03 	sts	0x030D, r1
		Global_u8_tDOWNSwitchFlag=NOT_RISED;
    2394:	10 92 0e 03 	sts	0x030E, r1
		LCD_enuSendCommand(FIRST_LINE);
    2398:	80 e8       	ldi	r24, 0x80	; 128
    239a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
		LCD_enuSendpcString("                ");
    239e:	8a ea       	ldi	r24, 0xAA	; 170
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
		LCD_enuSendCommand(SECOND_LINE);
    23a6:	80 ec       	ldi	r24, 0xC0	; 192
    23a8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
		LCD_enuSendpcString("                ");
    23ac:	8a ea       	ldi	r24, 0xAA	; 170
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>

		LCD_enuSendCommand(FIRST_LINE);
    23b4:	80 e8       	ldi	r24, 0x80	; 128
    23b6:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
		LCD_enuSendpcString("Welcome to the    ");
    23ba:	8b eb       	ldi	r24, 0xBB	; 187
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
		LCD_enuSendCommand(SECOND_LINE);
    23c2:	80 ec       	ldi	r24, 0xC0	; 192
    23c4:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
		LCD_enuSendpcString("Setting Mode      ");
    23c8:	8e ec       	ldi	r24, 0xCE	; 206
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
    23d0:	88 e8       	ldi	r24, 0x88	; 136
    23d2:	93 e1       	ldi	r25, 0x13	; 19
    23d4:	20 e9       	ldi	r18, 0x90	; 144
    23d6:	31 e0       	ldi	r19, 0x01	; 1
    23d8:	f9 01       	movw	r30, r18
    23da:	31 97       	sbiw	r30, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <SYSTEM_enuOnState+0xd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e0:	d9 f7       	brne	.-10     	; 0x23d8 <SYSTEM_enuOnState+0xce>
	}

	Local_enuErrorState =ES_OK;
	return Local_enuErrorState;

}
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <LED_SYSTEM_enuSystemToggle>:
	ES_t Local_enu_ErrorState = ES_NOK;
	/* SETPIN */
	/*The bug reason is here because second condition*/
	/*Hopefuly the bug has been solved
	 * confermation, bug is fixed on 28/3/2022 tarek eldallal.*/
	if (Global_u8_tCurrentState==ON_STATE && (Global_u16_tDesiredTemp > Global_u16_tAverageTemp - FIVE_TEMP_DEGREE))
    23ee:	80 91 16 03 	lds	r24, 0x0316
    23f2:	81 30       	cpi	r24, 0x01	; 1
    23f4:	e9 f4       	brne	.+58     	; 0x2430 <LED_SYSTEM_enuSystemToggle+0x42>
    23f6:	80 91 14 03 	lds	r24, 0x0314
    23fa:	90 91 15 03 	lds	r25, 0x0315
    23fe:	05 97       	sbiw	r24, 0x05	; 5
    2400:	20 91 f7 02 	lds	r18, 0x02F7
    2404:	30 91 f8 02 	lds	r19, 0x02F8
    2408:	82 17       	cp	r24, r18
    240a:	93 07       	cpc	r25, r19
    240c:	a8 f4       	brcc	.+42     	; 0x2438 <LED_SYSTEM_enuSystemToggle+0x4a>
	{
		LED_SYSTEM_enuLedToggle();
    240e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LED_SYSTEM_enuLedToggle>
		if  (Global_u16_tDesiredTemp < Global_u16_tAverageTemp + FIVE_TEMP_DEGREE)
    2412:	80 91 14 03 	lds	r24, 0x0314
    2416:	90 91 15 03 	lds	r25, 0x0315
    241a:	05 96       	adiw	r24, 0x05	; 5
    241c:	20 91 f7 02 	lds	r18, 0x02F7
    2420:	30 91 f8 02 	lds	r19, 0x02F8
    2424:	28 17       	cp	r18, r24
    2426:	39 07       	cpc	r19, r25
    2428:	38 f4       	brcc	.+14     	; 0x2438 <LED_SYSTEM_enuSystemToggle+0x4a>
		{
			LED_SYSTEM_enuLedStop();
    242a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LED_SYSTEM_enuLedStop>
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <LED_SYSTEM_enuSystemToggle+0x4a>

		}
	}
	else if(Global_u8_tCurrentState==SETTINT_STATE)
    2430:	82 30       	cpi	r24, 0x02	; 2
    2432:	11 f4       	brne	.+4      	; 0x2438 <LED_SYSTEM_enuSystemToggle+0x4a>
	{
		SYSTEM_vTogSevenSeg();
    2434:	0e 94 a7 10 	call	0x214e	; 0x214e <SYSTEM_vTogSevenSeg>

	}
	Local_enu_ErrorState = ES_OK;
	return Local_enu_ErrorState;

}
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	08 95       	ret

0000243c <SYSTEM_enuInit>:
	-Heating and Cooling Elements.                  [OUTPUT]



*/
	DIO_enuInit();
    243c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <DIO_enuInit>
	EXTI_enuInit(EXTI_AstrEXTIConfig);
    2440:	87 e5       	ldi	r24, 0x57	; 87
    2442:	92 e0       	ldi	r25, 0x02	; 2
    2444:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <EXTI_enuInit>
	SevenSegment_enuInit( SEVENSEGMENT_AstrSevenSegmentConfig);
    2448:	86 e6       	ldi	r24, 0x66	; 102
    244a:	92 e0       	ldi	r25, 0x02	; 2
    244c:	0e 94 3f 0c 	call	0x187e	; 0x187e <SevenSegment_enuInit>
	SevenSegment_enuDisableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[0]);
    2450:	86 e6       	ldi	r24, 0x66	; 102
    2452:	92 e0       	ldi	r25, 0x02	; 2
    2454:	0e 94 ed 0a 	call	0x15da	; 0x15da <SevenSegment_enuDisableCommon>
	SevenSegment_enuDisableCommon(&SEVENSEGMENT_AstrSevenSegmentConfig[1]);
    2458:	89 e7       	ldi	r24, 0x79	; 121
    245a:	92 e0       	ldi	r25, 0x02	; 2
    245c:	0e 94 ed 0a 	call	0x15da	; 0x15da <SevenSegment_enuDisableCommon>
	SWITCH_enuIniti(SWITCH_AstrSwitchConfig);
    2460:	8d e5       	ldi	r24, 0x5D	; 93
    2462:	92 e0       	ldi	r25, 0x02	; 2
    2464:	0e 94 bf 09 	call	0x137e	; 0x137e <SWITCH_enuIniti>
	LCD_enuInit();
    2468:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_enuInit>
	HEAT_COOL_ELEMENTS_enuIniti();
    246c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <HEAT_COOL_ELEMENTS_enuIniti>
	LED_SYSTEM_enuIniti();
    2470:	0e 94 ae 0c 	call	0x195c	; 0x195c <LED_SYSTEM_enuIniti>
	TIMER0_enuInit();
    2474:	0e 94 e7 02 	call	0x5ce	; 0x5ce <TIMER0_enuInit>
	TIMER1_enuInit();
    2478:	0e 94 47 04 	call	0x88e	; 0x88e <TIMER1_enuInit>
	TIMER2_enuInit();
    247c:	0e 94 c2 03 	call	0x784	; 0x784 <TIMER2_enuInit>


	/* ------- In TEMPSENSOR MODULE THE ADC AND THE TIMER1 IS INITIALIZED ---------- */
	TempSensor_enuInit();
    2480:	0e 94 f6 08 	call	0x11ec	; 0x11ec <TempSensor_enuInit>
	GIE_enu_Init();
    2484:	0e 94 d5 05 	call	0xbaa	; 0xbaa <GIE_enu_Init>
	//I2C_voidMasterInit();
	/*No need for it, as the EXTI_config.c has been edited*/
	//EXTI_enuSetSenseLevel(ON_OFF_SWITCH,RISED);

	EXTI_enuEnableInterrupt(TEMP_UP_SWITCH);
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <EXTI_enuEnableInterrupt>
	EXTI_enuEnableInterrupt(TEMP_DOWN_SWITCH);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	0e 94 ad 06 	call	0xd5a	; 0xd5a <EXTI_enuEnableInterrupt>
	EXTI_enuEnableInterrupt(ON_OFF_SWITCH);
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	0e 94 ad 06 	call	0xd5a	; 0xd5a <EXTI_enuEnableInterrupt>
	TIMER0_enuInterruptEnable();
    249a:	0e 94 88 05 	call	0xb10	; 0xb10 <TIMER0_enuInterruptEnable>
	TIMER1_enuInterruptEnable();
    249e:	0e 94 77 05 	call	0xaee	; 0xaee <TIMER1_enuInterruptEnable>
	TIMER2_enuInterruptEnable();
    24a2:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER2_enuInterruptEnable>

	GIE_enu_Enable();
    24a6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <GIE_enu_Enable>
	TIMER0_enuStartTimer();
    24aa:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <TIMER0_enuStartTimer>
	TIMER1_enuStartTimer();
    24ae:	0e 94 6f 04 	call	0x8de	; 0x8de <TIMER1_enuStartTimer>
	TIMER2_enuStartTimer();
    24b2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <TIMER2_enuStartTimer>

	DIO_enuSetPinDirection(DIO_u8_tPORT_B,DIO_u8_tPIN3,DIO_u8_tOUTPUT);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	63 e0       	ldi	r22, 0x03	; 3
    24ba:	41 e0       	ldi	r20, 0x01	; 1
    24bc:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8_tPORT_D,DIO_u8_tPIN4,DIO_u8_tOUTPUT);
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	64 e0       	ldi	r22, 0x04	; 4
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(DIO_u8_tPORT_D,DIO_u8_tPIN5,DIO_u8_tOUTPUT);
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	65 e0       	ldi	r22, 0x05	; 5
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8_tPORT_D,DIO_u8_tPIN7,DIO_u8_tOUTPUT);
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	67 e0       	ldi	r22, 0x07	; 7
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_enuSetPinDirection>


	Global_u8_tCurrentState = OFF_STATE;
    24de:	10 92 16 03 	sts	0x0316, r1
	Global_u8_tUPSwitchFlag = NOT_RISED;
    24e2:	10 92 0d 03 	sts	0x030D, r1
	Global_u8_tDOWNSwitchFlag = NOT_RISED;
    24e6:	10 92 0e 03 	sts	0x030E, r1

	SYSTEM_enuGetTemp();
    24ea:	0e 94 3a 11 	call	0x2274	; 0x2274 <SYSTEM_enuGetTemp>

	/*---------- PROJECT Message ----------*/
	LCD_enuSendCommand(FIRST_LINE);
    24ee:	80 e8       	ldi	r24, 0x80	; 128
    24f0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("Welcome to AMIT      ");
    24f4:	81 ee       	ldi	r24, 0xE1	; 225
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
	LCD_enuSendCommand(SECOND_LINE);
    24fc:	80 ec       	ldi	r24, 0xC0	; 192
    24fe:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("graduation Project    ");
    2502:	87 ef       	ldi	r24, 0xF7	; 247
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
    250a:	88 e5       	ldi	r24, 0x58	; 88
    250c:	9b e1       	ldi	r25, 0x1B	; 27
    250e:	20 e9       	ldi	r18, 0x90	; 144
    2510:	31 e0       	ldi	r19, 0x01	; 1
    2512:	f9 01       	movw	r30, r18
    2514:	31 97       	sbiw	r30, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <SYSTEM_enuInit+0xd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	d9 f7       	brne	.-10     	; 0x2512 <SYSTEM_enuInit+0xd6>
	_delay_ms(700);
	LCD_enuSendCommand(FIRST_LINE);
    251c:	80 e8       	ldi	r24, 0x80	; 128
    251e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("ELECTRIC WATER			");
    2522:	8e e0       	ldi	r24, 0x0E	; 14
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
	LCD_enuSendCommand(SECOND_LINE);
    252a:	80 ec       	ldi	r24, 0xC0	; 192
    252c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("HEATER SYSTEM	 		");
    2530:	80 e2       	ldi	r24, 0x20	; 32
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
    2538:	80 e1       	ldi	r24, 0x10	; 16
    253a:	97 e2       	ldi	r25, 0x27	; 39
    253c:	20 e9       	ldi	r18, 0x90	; 144
    253e:	31 e0       	ldi	r19, 0x01	; 1
    2540:	f9 01       	movw	r30, r18
    2542:	31 97       	sbiw	r30, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <SYSTEM_enuInit+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	d9 f7       	brne	.-10     	; 0x2540 <SYSTEM_enuInit+0x104>
	_delay_ms(1000);
	/*---------- PROJECT Message ----------*/


	//setting initial temp. and fill array
	EEPROM_enuReadByteFromAddress(0x0000,&Global_u8_tReadData);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	67 e1       	ldi	r22, 0x17	; 23
    2550:	73 e0       	ldi	r23, 0x03	; 3
    2552:	0e 94 8f 05 	call	0xb1e	; 0xb1e <EEPROM_enuReadByteFromAddress>
	if(Global_u8_tReadData != 0xFF)
    2556:	80 91 17 03 	lds	r24, 0x0317
    255a:	8f 3f       	cpi	r24, 0xFF	; 255
    255c:	29 f0       	breq	.+10     	; 0x2568 <SYSTEM_enuInit+0x12c>
		{
			Global_u16_tDesiredTemp = Global_u8_tReadData;
    255e:	80 93 f7 02 	sts	0x02F7, r24
    2562:	10 92 f8 02 	sts	0x02F8, r1
    2566:	06 c0       	rjmp	.+12     	; 0x2574 <SYSTEM_enuInit+0x138>
		}
	else
		{
			Global_u16_tDesiredTemp = 60;
    2568:	8c e3       	ldi	r24, 0x3C	; 60
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	90 93 f8 02 	sts	0x02F8, r25
    2570:	80 93 f7 02 	sts	0x02F7, r24
		}
	// Save desired temp in EEPROM, which is the INITIAL_DESIRED_TEMP.

	EEPROM_enuWriteByteToAddress(0x0000,Global_u16_tDesiredTemp);
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	60 91 f7 02 	lds	r22, 0x02F7
    257c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <EEPROM_enuWriteByteToAddress>

	/*---------- Welcome Message ----------*/

	//LCD_enuSendCommand(SECOND_LINE+12);
	//LCD_enuDisplayIntegerNum(Global_u16_tDesiredTemp);
	LCD_enuSendCommand(FIRST_LINE);
    2580:	80 e8       	ldi	r24, 0x80	; 128
    2582:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("                   ");
    2586:	82 e3       	ldi	r24, 0x32	; 50
    2588:	91 e0       	ldi	r25, 0x01	; 1
    258a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
	LCD_enuSendCommand(SECOND_LINE);
    258e:	80 ec       	ldi	r24, 0xC0	; 192
    2590:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuSendpcString("SAVED Temp=   C	");
    2594:	86 e4       	ldi	r24, 0x46	; 70
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_enuSendpcString>
	LCD_enuSendCommand(SECOND_LINE +12);
    259c:	8c ec       	ldi	r24, 0xCC	; 204
    259e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_enuSendCommand>
	LCD_enuDisplayIntegerNum(Global_u16_tDesiredTemp);
    25a2:	60 91 f7 02 	lds	r22, 0x02F7
    25a6:	70 91 f8 02 	lds	r23, 0x02F8
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_enuDisplayIntegerNum>
    25b2:	88 e9       	ldi	r24, 0x98	; 152
    25b4:	9a e3       	ldi	r25, 0x3A	; 58
    25b6:	20 e9       	ldi	r18, 0x90	; 144
    25b8:	31 e0       	ldi	r19, 0x01	; 1
    25ba:	f9 01       	movw	r30, r18
    25bc:	31 97       	sbiw	r30, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <SYSTEM_enuInit+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	d9 f7       	brne	.-10     	; 0x25ba <SYSTEM_enuInit+0x17e>
	/*---------- Welcome Message ----------*/

	/*The Function to be used in Callback must be built|| declared before using*/
	//EXTI_enuCallBack( (volatile void (*) (void)) SYSTEM_enuSettingState,ON_OFF_SWITCH);
	return Local_enuErrorState;
}
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	08 95       	ret

000025c8 <main>:


int main(void)
{

	SYSTEM_enuInit();
    25c8:	0e 94 1e 12 	call	0x243c	; 0x243c <SYSTEM_enuInit>

while(1)
{
	switch (Global_u8_tCurrentState)
    25cc:	80 91 16 03 	lds	r24, 0x0316
    25d0:	81 30       	cpi	r24, 0x01	; 1
    25d2:	29 f0       	breq	.+10     	; 0x25de <main+0x16>
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	30 f0       	brcs	.+12     	; 0x25e4 <main+0x1c>
    25d8:	82 30       	cpi	r24, 0x02	; 2
    25da:	d1 f7       	brne	.-12     	; 0x25d0 <main+0x8>
    25dc:	06 c0       	rjmp	.+12     	; 0x25ea <main+0x22>
	{
		case ON_STATE:
		{
			SYSTEM_enuOnState();
    25de:	0e 94 85 11 	call	0x230a	; 0x230a <SYSTEM_enuOnState>
    25e2:	f4 cf       	rjmp	.-24     	; 0x25cc <main+0x4>
			break;
		}
		case OFF_STATE:
		{
			SYSTEM_enuOffState();
    25e4:	0e 94 b5 10 	call	0x216a	; 0x216a <SYSTEM_enuOffState>
    25e8:	f1 cf       	rjmp	.-30     	; 0x25cc <main+0x4>
			break;
		}
		case SETTINT_STATE:
		{
			SYSTEM_enuSettingState();
    25ea:	0e 94 ce 10 	call	0x219c	; 0x219c <SYSTEM_enuSettingState>
    25ee:	ee cf       	rjmp	.-36     	; 0x25cc <main+0x4>

000025f0 <__mulsi3>:
    25f0:	62 9f       	mul	r22, r18
    25f2:	d0 01       	movw	r26, r0
    25f4:	73 9f       	mul	r23, r19
    25f6:	f0 01       	movw	r30, r0
    25f8:	82 9f       	mul	r24, r18
    25fa:	e0 0d       	add	r30, r0
    25fc:	f1 1d       	adc	r31, r1
    25fe:	64 9f       	mul	r22, r20
    2600:	e0 0d       	add	r30, r0
    2602:	f1 1d       	adc	r31, r1
    2604:	92 9f       	mul	r25, r18
    2606:	f0 0d       	add	r31, r0
    2608:	83 9f       	mul	r24, r19
    260a:	f0 0d       	add	r31, r0
    260c:	74 9f       	mul	r23, r20
    260e:	f0 0d       	add	r31, r0
    2610:	65 9f       	mul	r22, r21
    2612:	f0 0d       	add	r31, r0
    2614:	99 27       	eor	r25, r25
    2616:	72 9f       	mul	r23, r18
    2618:	b0 0d       	add	r27, r0
    261a:	e1 1d       	adc	r30, r1
    261c:	f9 1f       	adc	r31, r25
    261e:	63 9f       	mul	r22, r19
    2620:	b0 0d       	add	r27, r0
    2622:	e1 1d       	adc	r30, r1
    2624:	f9 1f       	adc	r31, r25
    2626:	bd 01       	movw	r22, r26
    2628:	cf 01       	movw	r24, r30
    262a:	11 24       	eor	r1, r1
    262c:	08 95       	ret

0000262e <__udivmodqi4>:
    262e:	99 1b       	sub	r25, r25
    2630:	79 e0       	ldi	r23, 0x09	; 9
    2632:	04 c0       	rjmp	.+8      	; 0x263c <__udivmodqi4_ep>

00002634 <__udivmodqi4_loop>:
    2634:	99 1f       	adc	r25, r25
    2636:	96 17       	cp	r25, r22
    2638:	08 f0       	brcs	.+2      	; 0x263c <__udivmodqi4_ep>
    263a:	96 1b       	sub	r25, r22

0000263c <__udivmodqi4_ep>:
    263c:	88 1f       	adc	r24, r24
    263e:	7a 95       	dec	r23
    2640:	c9 f7       	brne	.-14     	; 0x2634 <__udivmodqi4_loop>
    2642:	80 95       	com	r24
    2644:	08 95       	ret

00002646 <__udivmodhi4>:
    2646:	aa 1b       	sub	r26, r26
    2648:	bb 1b       	sub	r27, r27
    264a:	51 e1       	ldi	r21, 0x11	; 17
    264c:	07 c0       	rjmp	.+14     	; 0x265c <__udivmodhi4_ep>

0000264e <__udivmodhi4_loop>:
    264e:	aa 1f       	adc	r26, r26
    2650:	bb 1f       	adc	r27, r27
    2652:	a6 17       	cp	r26, r22
    2654:	b7 07       	cpc	r27, r23
    2656:	10 f0       	brcs	.+4      	; 0x265c <__udivmodhi4_ep>
    2658:	a6 1b       	sub	r26, r22
    265a:	b7 0b       	sbc	r27, r23

0000265c <__udivmodhi4_ep>:
    265c:	88 1f       	adc	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	5a 95       	dec	r21
    2662:	a9 f7       	brne	.-22     	; 0x264e <__udivmodhi4_loop>
    2664:	80 95       	com	r24
    2666:	90 95       	com	r25
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	08 95       	ret

0000266e <__divmodhi4>:
    266e:	97 fb       	bst	r25, 7
    2670:	09 2e       	mov	r0, r25
    2672:	07 26       	eor	r0, r23
    2674:	0a d0       	rcall	.+20     	; 0x268a <__divmodhi4_neg1>
    2676:	77 fd       	sbrc	r23, 7
    2678:	04 d0       	rcall	.+8      	; 0x2682 <__divmodhi4_neg2>
    267a:	e5 df       	rcall	.-54     	; 0x2646 <__udivmodhi4>
    267c:	06 d0       	rcall	.+12     	; 0x268a <__divmodhi4_neg1>
    267e:	00 20       	and	r0, r0
    2680:	1a f4       	brpl	.+6      	; 0x2688 <__divmodhi4_exit>

00002682 <__divmodhi4_neg2>:
    2682:	70 95       	com	r23
    2684:	61 95       	neg	r22
    2686:	7f 4f       	sbci	r23, 0xFF	; 255

00002688 <__divmodhi4_exit>:
    2688:	08 95       	ret

0000268a <__divmodhi4_neg1>:
    268a:	f6 f7       	brtc	.-4      	; 0x2688 <__divmodhi4_exit>
    268c:	90 95       	com	r25
    268e:	81 95       	neg	r24
    2690:	9f 4f       	sbci	r25, 0xFF	; 255
    2692:	08 95       	ret

00002694 <__udivmodsi4>:
    2694:	a1 e2       	ldi	r26, 0x21	; 33
    2696:	1a 2e       	mov	r1, r26
    2698:	aa 1b       	sub	r26, r26
    269a:	bb 1b       	sub	r27, r27
    269c:	fd 01       	movw	r30, r26
    269e:	0d c0       	rjmp	.+26     	; 0x26ba <__udivmodsi4_ep>

000026a0 <__udivmodsi4_loop>:
    26a0:	aa 1f       	adc	r26, r26
    26a2:	bb 1f       	adc	r27, r27
    26a4:	ee 1f       	adc	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	a2 17       	cp	r26, r18
    26aa:	b3 07       	cpc	r27, r19
    26ac:	e4 07       	cpc	r30, r20
    26ae:	f5 07       	cpc	r31, r21
    26b0:	20 f0       	brcs	.+8      	; 0x26ba <__udivmodsi4_ep>
    26b2:	a2 1b       	sub	r26, r18
    26b4:	b3 0b       	sbc	r27, r19
    26b6:	e4 0b       	sbc	r30, r20
    26b8:	f5 0b       	sbc	r31, r21

000026ba <__udivmodsi4_ep>:
    26ba:	66 1f       	adc	r22, r22
    26bc:	77 1f       	adc	r23, r23
    26be:	88 1f       	adc	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	1a 94       	dec	r1
    26c4:	69 f7       	brne	.-38     	; 0x26a0 <__udivmodsi4_loop>
    26c6:	60 95       	com	r22
    26c8:	70 95       	com	r23
    26ca:	80 95       	com	r24
    26cc:	90 95       	com	r25
    26ce:	9b 01       	movw	r18, r22
    26d0:	ac 01       	movw	r20, r24
    26d2:	bd 01       	movw	r22, r26
    26d4:	cf 01       	movw	r24, r30
    26d6:	08 95       	ret

000026d8 <__divmodsi4>:
    26d8:	97 fb       	bst	r25, 7
    26da:	09 2e       	mov	r0, r25
    26dc:	05 26       	eor	r0, r21
    26de:	0e d0       	rcall	.+28     	; 0x26fc <__divmodsi4_neg1>
    26e0:	57 fd       	sbrc	r21, 7
    26e2:	04 d0       	rcall	.+8      	; 0x26ec <__divmodsi4_neg2>
    26e4:	d7 df       	rcall	.-82     	; 0x2694 <__udivmodsi4>
    26e6:	0a d0       	rcall	.+20     	; 0x26fc <__divmodsi4_neg1>
    26e8:	00 1c       	adc	r0, r0
    26ea:	38 f4       	brcc	.+14     	; 0x26fa <__divmodsi4_exit>

000026ec <__divmodsi4_neg2>:
    26ec:	50 95       	com	r21
    26ee:	40 95       	com	r20
    26f0:	30 95       	com	r19
    26f2:	21 95       	neg	r18
    26f4:	3f 4f       	sbci	r19, 0xFF	; 255
    26f6:	4f 4f       	sbci	r20, 0xFF	; 255
    26f8:	5f 4f       	sbci	r21, 0xFF	; 255

000026fa <__divmodsi4_exit>:
    26fa:	08 95       	ret

000026fc <__divmodsi4_neg1>:
    26fc:	f6 f7       	brtc	.-4      	; 0x26fa <__divmodsi4_exit>
    26fe:	90 95       	com	r25
    2700:	80 95       	com	r24
    2702:	70 95       	com	r23
    2704:	61 95       	neg	r22
    2706:	7f 4f       	sbci	r23, 0xFF	; 255
    2708:	8f 4f       	sbci	r24, 0xFF	; 255
    270a:	9f 4f       	sbci	r25, 0xFF	; 255
    270c:	08 95       	ret

0000270e <__prologue_saves__>:
    270e:	2f 92       	push	r2
    2710:	3f 92       	push	r3
    2712:	4f 92       	push	r4
    2714:	5f 92       	push	r5
    2716:	6f 92       	push	r6
    2718:	7f 92       	push	r7
    271a:	8f 92       	push	r8
    271c:	9f 92       	push	r9
    271e:	af 92       	push	r10
    2720:	bf 92       	push	r11
    2722:	cf 92       	push	r12
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	ca 1b       	sub	r28, r26
    2738:	db 0b       	sbc	r29, r27
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	09 94       	ijmp

00002746 <__epilogue_restores__>:
    2746:	2a 88       	ldd	r2, Y+18	; 0x12
    2748:	39 88       	ldd	r3, Y+17	; 0x11
    274a:	48 88       	ldd	r4, Y+16	; 0x10
    274c:	5f 84       	ldd	r5, Y+15	; 0x0f
    274e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2750:	7d 84       	ldd	r7, Y+13	; 0x0d
    2752:	8c 84       	ldd	r8, Y+12	; 0x0c
    2754:	9b 84       	ldd	r9, Y+11	; 0x0b
    2756:	aa 84       	ldd	r10, Y+10	; 0x0a
    2758:	b9 84       	ldd	r11, Y+9	; 0x09
    275a:	c8 84       	ldd	r12, Y+8	; 0x08
    275c:	df 80       	ldd	r13, Y+7	; 0x07
    275e:	ee 80       	ldd	r14, Y+6	; 0x06
    2760:	fd 80       	ldd	r15, Y+5	; 0x05
    2762:	0c 81       	ldd	r16, Y+4	; 0x04
    2764:	1b 81       	ldd	r17, Y+3	; 0x03
    2766:	aa 81       	ldd	r26, Y+2	; 0x02
    2768:	b9 81       	ldd	r27, Y+1	; 0x01
    276a:	ce 0f       	add	r28, r30
    276c:	d1 1d       	adc	r29, r1
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	ed 01       	movw	r28, r26
    277a:	08 95       	ret

0000277c <_exit>:
    277c:	f8 94       	cli

0000277e <__stop_program>:
    277e:	ff cf       	rjmp	.-2      	; 0x277e <__stop_program>
